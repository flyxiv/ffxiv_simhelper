use crate::event::ffxiv_event::FfxivEvent::{
    AddTicker, ApplyBuff, ApplyBuffStack, ApplyDebuff, ApplyRaidBuff,
};
use crate::event::FfxivEventQueue;
use crate::event_ticker::auto_attack_ticker::AutoAttackTicker;
use crate::event_ticker::ffxiv_event_ticker::FfxivEventTicker;
use crate::id_entity::IdEntity;
use crate::jobs_skill_data::{CasterGlobalSkill, PotionSkill};
use crate::rotation::SkillTable;
use crate::skill::attack_skill::AttackSkill;
use crate::skill::damage_category::DamageCategory;
use crate::skill::make_skill_table;
use crate::skill::use_type::UseType;
use crate::skill::ResourceRequirements::{CheckStatus, Resource, UseBuff};
use crate::status::buff_status::BuffStatus;
use crate::status::debuff_status::DebuffStatus;
use crate::status::status_info::StatusInfo;
use crate::types::PlayerIdType;
use std::cell::RefCell;
use std::collections::HashMap;
use std::rc::Rc;

pub(crate) struct SummonerDatabase {
    pub(crate) ruin_iii: AttackSkill,
    pub(crate) ruin_iv: AttackSkill,
    pub(crate) searing_light: AttackSkill,
    pub(crate) energy_drain: AttackSkill,
    pub(crate) necrotize: AttackSkill,
    pub(crate) summon_bahamut: AttackSkill,
    pub(crate) enkindle_bahamut: AttackSkill,
    pub(crate) deathflare: AttackSkill,
    pub(crate) astral_impulse: AttackSkill,
    pub(crate) wyrmwave: AttackSkill,
    pub(crate) summon_ifrit_ii: AttackSkill,
    pub(crate) crimson_cyclone: AttackSkill,
    pub(crate) crimson_strike: AttackSkill,
    pub(crate) ruby_rite: AttackSkill,
    pub(crate) summon_titan_ii: AttackSkill,
    pub(crate) topaz_rite: AttackSkill,
    pub(crate) mountain_buster: AttackSkill,
    pub(crate) summon_garuda_ii: AttackSkill,
    pub(crate) emerald_rite: AttackSkill,
    pub(crate) slipstream: AttackSkill,
    pub(crate) summon_phoenix: AttackSkill,
    pub(crate) fountain_of_fire: AttackSkill,
    pub(crate) enkindle_phoenix: AttackSkill,
    pub(crate) scarlet_flame: AttackSkill,
    pub(crate) transform: AttackSkill,
    pub(crate) searing_flash: AttackSkill,
    pub(crate) summon_solar_bahamut: AttackSkill,
    pub(crate) umbral_impulse: AttackSkill,
    pub(crate) sunflare: AttackSkill,
    pub(crate) enkindle_solar_bahamut: AttackSkill,
    pub(crate) luxwave: AttackSkill,
    pub(crate) swiftcast: AttackSkill,

    pub(crate) searing_light_buff: BuffStatus,
    pub(crate) garuda_state: BuffStatus,

    pub(crate) potion: AttackSkill,
}

impl SummonerDatabase {
    pub(crate) fn new(
        player_id: PlayerIdType,
        ffxiv_event_queue: Rc<RefCell<FfxivEventQueue>>,
    ) -> Self {
        let caster_skills = CasterGlobalSkill::new(player_id);
        let swiftcast_buff = caster_skills.swiftcast_buff.clone();
        let swiftcast = caster_skills.swiftcast.clone();

        let further_ruin: BuffStatus = BuffStatus {
            id: 1600,
            name: String::from("Further Ruin"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 60000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let searing_light_buff: BuffStatus = BuffStatus {
            id: 1601,
            name: String::from("Searing Light"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(5)],
            duration_millisecond: 20000,
            is_raidwide: true,
            trigger_proc_event_on_gcd: vec![],
        };
        let bahamut_state: BuffStatus = BuffStatus {
            id: 1602,
            name: String::from("Bahamut State"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 15000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let pheonix_state: BuffStatus = BuffStatus {
            id: 1603,
            name: String::from("Phoenix State"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 15000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };

        let ifrit_state: BuffStatus = BuffStatus {
            id: 1604,
            name: String::from("Ifrit State"),
            stacks: 2,
            max_stacks: 2,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };

        let titan_state: BuffStatus = BuffStatus {
            id: 1605,
            name: String::from("Titan State"),
            stacks: 4,
            max_stacks: 4,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };

        let garuda_state: BuffStatus = BuffStatus {
            id: 1606,
            name: String::from("Garuda State"),
            stacks: 4,
            max_stacks: 4,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };

        let titans_favor: BuffStatus = BuffStatus {
            id: 1607,
            name: String::from("Titan's Favor"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 10000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };

        let slipstream_dot: DebuffStatus = DebuffStatus {
            id: 1608,
            name: String::from("Slipstream"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            damage_skill_id: Some(1631),
            potency: Some(30),
            trait_percent: Some(130),
            damage_category: Some(DamageCategory::MagicalDot),
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 15000,
            is_raidwide: false,
            snapshotted_infos: Default::default(),
        };
        let solar_bahamut_state: BuffStatus = BuffStatus {
            id: 1609,
            name: String::from("Solar Bahamut State"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 15000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let rubys_glimmer: BuffStatus = BuffStatus {
            id: 1610,
            name: String::from("Ruby's Glimmer"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };

        let wyrmwave: AttackSkill = AttackSkill {
            id: 1609,
            name: String::from("Wyrmwave"),
            player_id,
            potency: 150,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        let scarlet_flame: AttackSkill = AttackSkill {
            id: 1623,
            name: String::from("Scarlet Flame"),
            player_id,
            potency: 150,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        let luxwave: AttackSkill = AttackSkill {
            id: 1630,
            name: String::from("Luxwave"),
            player_id,
            potency: 160,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        let transform: AttackSkill = AttackSkill {
            id: 1624,
            name: String::from("Transform"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };

        let wyrmwave_ticker = AutoAttackTicker::create_summoner_pet_auto_attack(
            1600,
            player_id,
            wyrmwave.clone(),
            DamageCategory::Direct,
            15000,
            ffxiv_event_queue.clone(),
        );
        let phoenix_ticker = AutoAttackTicker::create_summoner_pet_auto_attack(
            1601,
            player_id,
            scarlet_flame.clone(),
            DamageCategory::Direct,
            15000,
            ffxiv_event_queue.clone(),
        );
        let solar_bahamut_ticker = AutoAttackTicker::create_summoner_pet_auto_attack(
            1602,
            player_id,
            luxwave.clone(),
            DamageCategory::Direct,
            15000,
            ffxiv_event_queue.clone(),
        );

        let ruin_iii: AttackSkill = AttackSkill {
            id: 1600,
            name: String::from("Ruin III"),
            player_id,
            potency: 360,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 1000,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let ruin_iv: AttackSkill = AttackSkill {
            id: 1601,
            name: String::from("Ruin IV"),
            player_id,
            potency: 490,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(further_ruin.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let searing_light: AttackSkill = AttackSkill {
            id: 1602,
            name: String::from("Searing Light"),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![
                ApplyRaidBuff(player_id, searing_light_buff.clone(), 20000, 20000, 0),
                ApplyBuff(player_id, player_id, rubys_glimmer.clone(), 30000, 30000, 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 120000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };
        let energy_drain: AttackSkill = AttackSkill {
            id: 1603,
            name: String::from("Energy Drain"),
            player_id,
            potency: 200,
            trait_percent: 130,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                further_ruin.clone(),
                60000,
                60000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 2)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let necrotize: AttackSkill = AttackSkill {
            id: 1604,
            name: String::from("Necrotize"),
            player_id,
            potency: 440,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(0, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let summon_bahamut: AttackSkill = AttackSkill {
            id: 1605,
            name: String::from("Summon Bahamut"),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![
                ApplyBuff(player_id, player_id, bahamut_state.clone(), 15000, 15000, 0),
                AddTicker(FfxivEventTicker::AutoAttackTicker(wyrmwave_ticker), 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: HashMap::from([(1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: Some(transform.get_id()),
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };
        let enkindle_bahamut: AttackSkill = AttackSkill {
            id: 1606,
            name: String::from("Enkindle Bahamut"),
            player_id,
            potency: 1300,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 20000,
            resource_required: vec![CheckStatus(bahamut_state.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let deathflare: AttackSkill = AttackSkill {
            id: 1607,
            name: String::from("Deathflare"),
            player_id,
            potency: 500,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 20000,
            resource_required: vec![CheckStatus(bahamut_state.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let astral_impulse: AttackSkill = AttackSkill {
            id: 1608,
            name: String::from("Astral Impulse"),
            player_id,
            potency: 500,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![CheckStatus(bahamut_state.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let summon_ifrit_ii: AttackSkill = AttackSkill {
            id: 1610,
            name: String::from("Summon Ifrit II"),
            player_id,
            potency: 800,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuffStack(
                player_id,
                player_id,
                ifrit_state.clone(),
                30000,
                true,
                0,
            )],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(1, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let crimson_cyclone: AttackSkill = AttackSkill {
            id: 1611,
            name: String::from("Crimson Cyclone"),
            player_id,
            potency: 490,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 30000,
            resource_required: vec![CheckStatus(ifrit_state.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let crimson_strike: AttackSkill = AttackSkill {
            id: 1612,
            name: String::from("Crimson Strike"),
            player_id,
            potency: 490,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(2),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 30000,
            resource_required: vec![CheckStatus(ifrit_state.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let ruby_rite: AttackSkill = AttackSkill {
            id: 1613,
            name: String::from("Ruby Rite"),
            player_id,
            potency: 540,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 2800,
            gcd_cooldown_millisecond: 3000,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(ifrit_state.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let summon_titan_ii: AttackSkill = AttackSkill {
            id: 1614,
            name: String::from("Summon Titan II"),
            player_id,
            potency: 800,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuffStack(
                player_id,
                player_id,
                titan_state.clone(),
                30000,
                true,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(2, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let topaz_rite: AttackSkill = AttackSkill {
            id: 1615,
            name: String::from("Topaz Rite"),
            player_id,
            potency: 340,
            trait_percent: 130,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                titans_favor.clone(),
                10000,
                10000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(titan_state.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        let mountain_buster: AttackSkill = AttackSkill {
            id: 1616,
            name: String::from("Mountain Buster"),
            player_id,
            potency: 160,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(titans_favor.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        let summon_garuda_ii: AttackSkill = AttackSkill {
            id: 1617,
            name: String::from("Summon Garuda II"),
            player_id,
            potency: 800,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuffStack(
                player_id,
                player_id,
                garuda_state.clone(),
                30000,
                true,
                0,
            )],
            proc_events: vec![],
            combo: Some(3),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(3, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        let emerald_rite: AttackSkill = AttackSkill {
            id: 1618,
            name: String::from("Emerald Rite"),
            player_id,
            potency: 240,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1500,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(garuda_state.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        let slipstream: AttackSkill = AttackSkill {
            id: 1619,
            name: String::from("Slipstream"),
            player_id,
            potency: 490,
            trait_percent: 130,
            additional_skill_events: vec![ApplyDebuff(
                player_id,
                slipstream_dot.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: Some(4),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 3500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![
                CheckStatus(garuda_state.get_id()),
                UseBuff(swiftcast_buff.get_id()),
            ],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        let summon_pheonix: AttackSkill = AttackSkill {
            id: 1620,
            name: String::from("Summon Phoenix"),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![
                ApplyBuff(player_id, player_id, pheonix_state.clone(), 15000, 15000, 0),
                AddTicker(FfxivEventTicker::AutoAttackTicker(phoenix_ticker), 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 60000,
            resource_required: vec![Resource(4, 1)],
            resource_created: HashMap::from([(1, 1), (2, 1), (3, 1), (5, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: Some(transform.get_id()),
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        let fountain_of_fire: AttackSkill = AttackSkill {
            id: 1621,
            name: String::from("Fountain of Fire"),
            player_id,
            potency: 580,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![CheckStatus(pheonix_state.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        let enkindle_pheonix: AttackSkill = AttackSkill {
            id: 1622,
            name: String::from("Enkindle Phoenix"),
            player_id,
            potency: 1300,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 20000,
            resource_required: vec![CheckStatus(pheonix_state.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let searing_flash: AttackSkill = AttackSkill {
            id: 1625,
            name: String::from("Searing Flash"),
            player_id,
            potency: 600,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(rubys_glimmer.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let summon_solar_bahamut: AttackSkill = AttackSkill {
            id: 1626,
            name: String::from("Summon Solar Bahamut"),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    solar_bahamut_state.clone(),
                    15000,
                    15000,
                    0,
                ),
                AddTicker(FfxivEventTicker::AutoAttackTicker(solar_bahamut_ticker), 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 60000,
            resource_required: vec![Resource(5, 1)],
            resource_created: HashMap::from([(1, 1), (2, 1), (3, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: Some(transform.get_id()),
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };
        let umbral_impulse: AttackSkill = AttackSkill {
            id: 1627,
            name: String::from("Umbral Impulse"),
            player_id,
            potency: 620,
            trait_percent: 115,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![CheckStatus(solar_bahamut_state.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };
        let sunflare: AttackSkill = AttackSkill {
            id: 1628,
            name: String::from("Sunflare"),
            player_id,
            potency: 700,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 20000,
            resource_required: vec![CheckStatus(solar_bahamut_state.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let enkindle_solar_bahamut: AttackSkill = AttackSkill {
            id: 1629,
            name: String::from("Enkindle Solar Bahamut"),
            player_id,
            potency: 1400,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 20000,
            resource_required: vec![CheckStatus(solar_bahamut_state.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };

        let potion_skill = PotionSkill::new(player_id);

        SummonerDatabase {
            ruin_iii,
            ruin_iv,
            searing_light,
            energy_drain,

            necrotize,
            summon_bahamut,
            enkindle_bahamut,
            deathflare,
            astral_impulse,
            wyrmwave,
            summon_ifrit_ii,
            crimson_cyclone,
            crimson_strike,
            ruby_rite,
            summon_titan_ii,
            topaz_rite,
            mountain_buster,
            summon_garuda_ii,
            emerald_rite,
            slipstream,
            summon_phoenix: summon_pheonix,
            fountain_of_fire,
            enkindle_phoenix: enkindle_pheonix,
            scarlet_flame,
            transform,
            searing_flash,
            summon_solar_bahamut,
            umbral_impulse,
            sunflare,
            enkindle_solar_bahamut,
            luxwave,
            swiftcast,

            searing_light_buff,
            garuda_state,

            potion: potion_skill.potion,
        }
    }
}

pub(crate) fn make_summoner_skill_list(
    player_id: PlayerIdType,
    ffxiv_event_queue: Rc<RefCell<FfxivEventQueue>>,
) -> SkillTable<AttackSkill> {
    let db = SummonerDatabase::new(player_id, ffxiv_event_queue);

    let summoner_skill_list: Vec<AttackSkill> = vec![
        db.ruin_iii,
        db.ruin_iv,
        db.searing_light,
        db.energy_drain,
        db.necrotize,
        db.summon_bahamut,
        db.enkindle_bahamut,
        db.deathflare,
        db.astral_impulse,
        db.wyrmwave,
        db.summon_ifrit_ii,
        db.crimson_cyclone,
        db.crimson_strike,
        db.ruby_rite,
        db.summon_titan_ii,
        db.topaz_rite,
        db.mountain_buster,
        db.summon_garuda_ii,
        db.emerald_rite,
        db.slipstream,
        db.summon_phoenix,
        db.fountain_of_fire,
        db.enkindle_phoenix,
        db.scarlet_flame,
        db.transform,
        db.searing_flash,
        db.summon_solar_bahamut,
        db.umbral_impulse,
        db.sunflare,
        db.enkindle_solar_bahamut,
        db.luxwave,
        db.swiftcast,
        db.potion,
    ];

    make_skill_table(summoner_skill_list)
}
