use crate::event::ffxiv_event::FfxivEvent::{ApplyBuff, ApplyDebuff, ApplyRaidBuff};
use crate::id_entity::IdEntity;
use crate::jobs_skill_data::PotionSkill;
use crate::rotation::SkillTable;
use crate::skill::attack_skill::AttackSkill;
use crate::skill::make_skill_table;
use crate::skill::use_type::UseType;
use crate::skill::ResourceRequirements::{CheckStatus, Resource, UseBuff};
use crate::status::buff_status::BuffStatus;
use crate::status::debuff_status::DebuffStatus;
use crate::status::status_info::StatusInfo;
use crate::types::{PlayerIdType, PotencyType};
use std::collections::HashMap;

pub(crate) struct ReaperDatabase {
    pub(crate) slice: AttackSkill,
    pub(crate) waxing_slice: AttackSkill,
    pub(crate) infernal_slice: AttackSkill,
    pub(crate) shadow_of_death: AttackSkill,
    pub(crate) soul_slice: AttackSkill,
    pub(crate) blood_stalk: AttackSkill,
    pub(crate) gluttony: AttackSkill,
    pub(crate) gallows: AttackSkill,
    pub(crate) enhanced_gallows: AttackSkill,
    pub(crate) enhanced_gibbet: AttackSkill,
    pub(crate) harvest_moon: AttackSkill,
    pub(crate) arcane_circle: AttackSkill,
    pub(crate) plentiful_harvest: AttackSkill,
    pub(crate) enshroud: AttackSkill,
    pub(crate) cross_reaping: AttackSkill,
    pub(crate) void_reaping: AttackSkill,
    pub(crate) lemures_slice: AttackSkill,
    pub(crate) communio: AttackSkill,
    pub(crate) executioners_gallows: AttackSkill,
    pub(crate) executioners_gibbet: AttackSkill,
    pub(crate) sacrificium: AttackSkill,
    pub(crate) perfectio: AttackSkill,
    pub(crate) enshroud_host: AttackSkill,

    pub(crate) enshroud_status: BuffStatus,
    pub(crate) arcane_circle_buff: BuffStatus,
    pub(crate) shadow_of_death_debuff: DebuffStatus,

    pub(crate) potion: AttackSkill,
}

impl ReaperDatabase {
    pub(crate) fn new(player_id: PlayerIdType, player_count: usize) -> Self {
        let enshroud_status: BuffStatus = BuffStatus {
            id: 1200,
            name: String::from("Enshroud"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let enhanced_gallows_buff: BuffStatus = BuffStatus {
            id: 1201,
            name: String::from("Enhanced Gallows"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 60000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let enhanced_gibbet_buff: BuffStatus = BuffStatus {
            id: 1202,
            name: String::from("Enhanced Gibbet"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 60000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let arcane_circle_buff: BuffStatus = BuffStatus {
            id: 1203,
            name: String::from("Arcane Circle"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(3)],
            duration_millisecond: 20000,
            is_raidwide: true,
            trigger_proc_event_on_gcd: vec![],
        };
        let shadow_of_death_debuff: DebuffStatus = DebuffStatus {
            id: 1204,
            name: String::from("Shadow of Death"),
            snapshotted_infos: Default::default(),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            damage_skill_id: None,
            potency: None,
            trait_percent: None,
            damage_category: None,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(10)],
            duration_millisecond: 30000,
            is_raidwide: false,
        };
        let plentiful_harvest_ready: BuffStatus = BuffStatus {
            id: 1205,
            name: String::from("Plentiful Harvest"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 10000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let oblatio: BuffStatus = BuffStatus {
            id: 1206,
            name: String::from("Oblatio"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };

        let perfectio_parata: BuffStatus = BuffStatus {
            id: 1207,
            name: String::from("Perfectio Parata"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };

        let ideal_host: BuffStatus = BuffStatus {
            id: 1208,
            name: String::from("Ideal Host"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };

        let slice: AttackSkill = AttackSkill {
            id: 1200,
            name: String::from("Slice"),
            player_id,
            potency: 420,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(2),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 10)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let waxing_slice: AttackSkill = AttackSkill {
            id: 1201,
            name: String::from("Waxing Slice"),
            player_id,
            potency: 500,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(3),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 10)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let infernal_slice: AttackSkill = AttackSkill {
            id: 1202,
            name: String::from("Infernal Slice"),
            player_id,
            potency: 600,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 10)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let shadow_of_death: AttackSkill = AttackSkill {
            id: 1203,
            name: String::from("Shadow of Death"),
            player_id,
            potency: 300,
            trait_percent: 100,
            additional_skill_events: vec![ApplyDebuff(
                player_id,
                shadow_of_death_debuff.clone(),
                30000,
                60000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let soul_slice: AttackSkill = AttackSkill {
            id: 1204,
            name: String::from("Soul Slice"),
            player_id,
            potency: 520,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 30000,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 50)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 2,
            max_stacks: 2,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let blood_stalk: AttackSkill = AttackSkill {
            id: 1205,
            name: String::from("Blood Stalk"),
            player_id,
            potency: 440,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(0, 50)],
            resource_created: HashMap::from([(2, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let gluttony: AttackSkill = AttackSkill {
            id: 1206,
            name: String::from("Gluttony"),
            player_id,
            potency: 520,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 60000,
            resource_required: vec![Resource(0, 50)],
            resource_created: HashMap::from([(5, 2)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let gallows: AttackSkill = AttackSkill {
            id: 1207,
            name: String::from("Gallows"),
            player_id,
            potency: 560,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                enhanced_gibbet_buff.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(2, 1)],
            resource_created: HashMap::from([(1, 10)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let enhanced_gallows: AttackSkill = AttackSkill {
            id: 1208,
            name: String::from("Gallows"),
            player_id,
            potency: 620,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                enhanced_gibbet_buff.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(2, 1), UseBuff(enhanced_gallows_buff.get_id())],
            resource_created: HashMap::from([(1, 10)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let enhanced_gibbet: AttackSkill = AttackSkill {
            id: 1209,
            name: String::from("Gibbet"),
            player_id,
            potency: 620,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                enhanced_gallows_buff.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(2, 1), UseBuff(enhanced_gibbet_buff.get_id())],
            resource_created: HashMap::from([(1, 10)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let harvest_moon: AttackSkill = AttackSkill {
            id: 1210,
            name: String::from("Harvest Moon"),
            player_id,
            potency: 600,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 10)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let arcane_circle: AttackSkill = AttackSkill {
            id: 1211,
            name: String::from("Arcane Circle"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![
                ApplyRaidBuff(player_id, arcane_circle_buff.clone(), 20000, 20000, 0),
                ApplyBuff(
                    player_id,
                    player_id,
                    plentiful_harvest_ready.clone(),
                    20000,
                    20000,
                    5000,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 120000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let plentiful_harvest: AttackSkill = AttackSkill {
            id: 1212,
            name: String::from("Plentiful Harvest"),
            player_id,
            potency: 720 + 40 * (player_count - 1) as PotencyType,
            trait_percent: 100,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    perfectio_parata.clone(),
                    30000,
                    30000,
                    0,
                ),
                ApplyBuff(player_id, player_id, ideal_host.clone(), 30000, 30000, 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(plentiful_harvest_ready.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let enshroud: AttackSkill = AttackSkill {
            id: 1213,
            name: String::from("Enshroud"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    enshroud_status.clone(),
                    30000,
                    30000,
                    0,
                ),
                ApplyBuff(player_id, player_id, oblatio.clone(), 30000, 30000, 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 15000,
            resource_required: vec![Resource(1, 50)],
            resource_created: HashMap::from([(3, 5)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };
        let cross_reaping: AttackSkill = AttackSkill {
            id: 1214,
            name: String::from("Cross Reaping"),
            player_id,
            potency: 600,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                enhanced_gibbet_buff.clone(),
                60000,
                60000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![
                CheckStatus(enshroud_status.get_id()),
                UseBuff(enhanced_gallows_buff.get_id()),
                Resource(3, 1),
            ],
            resource_created: HashMap::from([(4, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let void_reaping: AttackSkill = AttackSkill {
            id: 1215,
            name: String::from("Void Reaping"),
            player_id,
            potency: 600,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                enhanced_gallows_buff.clone(),
                60000,
                60000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![
                CheckStatus(enshroud_status.get_id()),
                UseBuff(enhanced_gibbet_buff.get_id()),
                Resource(3, 1),
            ],
            resource_created: HashMap::from([(4, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let lemures_slice: AttackSkill = AttackSkill {
            id: 1216,
            name: String::from("Lemure's Slice"),
            player_id,
            potency: 280,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(4, 2)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let communio: AttackSkill = AttackSkill {
            id: 1217,
            name: String::from("Communio"),
            player_id,
            potency: 1100,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 1000,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(3, 1), UseBuff(enshroud_status.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let executioners_gallows: AttackSkill = AttackSkill {
            id: 1218,
            name: String::from("Executioner's Gallows"),
            player_id,
            potency: 820,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                enhanced_gibbet_buff.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(5, 1), UseBuff(enhanced_gallows_buff.get_id())],
            resource_created: HashMap::from([(1, 10)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let executioners_gibbet: AttackSkill = AttackSkill {
            id: 1219,
            name: String::from("Executioner's Gibbet"),
            player_id,
            potency: 820,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                enhanced_gallows_buff.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(5, 1), UseBuff(enhanced_gibbet_buff.get_id())],
            resource_created: HashMap::from([(1, 10)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let sacrificium: AttackSkill = AttackSkill {
            id: 1220,
            name: String::from("Sacrificium"),
            player_id,
            potency: 600,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![
                CheckStatus(enshroud_status.get_id()),
                UseBuff(oblatio.get_id()),
            ],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let perfectio: AttackSkill = AttackSkill {
            id: 1221,
            name: String::from("Perfectio"),
            player_id,
            potency: 1300,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(perfectio_parata.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let enshroud_host: AttackSkill = AttackSkill {
            id: 1222,
            name: String::from("Enshroud"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    enshroud_status.clone(),
                    30000,
                    30000,
                    0,
                ),
                ApplyBuff(player_id, player_id, oblatio.clone(), 30000, 30000, 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 15000,
            resource_required: vec![UseBuff(ideal_host.get_id())],
            resource_created: HashMap::from([(3, 5)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };

        let potion_skill = PotionSkill::new(player_id);

        ReaperDatabase {
            slice,
            waxing_slice,
            infernal_slice,
            shadow_of_death,
            soul_slice,
            blood_stalk,
            gluttony,
            gallows,
            enhanced_gallows,
            enhanced_gibbet,
            harvest_moon,
            arcane_circle,
            plentiful_harvest,
            enshroud,
            cross_reaping,
            void_reaping,
            lemures_slice,
            communio,
            executioners_gallows,
            executioners_gibbet,
            sacrificium,
            perfectio,
            enshroud_host,

            enshroud_status,
            arcane_circle_buff,
            shadow_of_death_debuff,

            potion: potion_skill.potion,
        }
    }
}

pub(crate) fn make_reaper_skill_list(
    player_id: PlayerIdType,
    player_count: usize,
) -> SkillTable<AttackSkill> {
    let db = ReaperDatabase::new(player_id, player_count);

    let reaper_skill_list: Vec<AttackSkill> = vec![
        db.slice,
        db.waxing_slice,
        db.infernal_slice,
        db.shadow_of_death,
        db.soul_slice,
        db.blood_stalk,
        db.gluttony,
        db.gallows,
        db.enhanced_gallows,
        db.enhanced_gibbet,
        db.harvest_moon,
        db.arcane_circle,
        db.plentiful_harvest,
        db.enshroud,
        db.cross_reaping,
        db.void_reaping,
        db.lemures_slice,
        db.communio,
        db.executioners_gallows,
        db.executioners_gibbet,
        db.sacrificium,
        db.perfectio,
        db.enshroud_host,
        db.potion,
    ];

    make_skill_table(reaper_skill_list)
}
