use crate::event::ffxiv_event::FfxivEvent::{ApplyBuff, ApplyDebuff};
use crate::id_entity::IdEntity;
use crate::jobs_skill_data::PotionSkill;
use crate::rotation::SkillTable;
use crate::skill::attack_skill::AttackSkill;
use crate::skill::damage_category::DamageCategory;
use crate::skill::make_skill_table;
use crate::skill::use_type::UseType;
use crate::skill::ResourceRequirements::{CheckStatus, Resource, UseBuff};
use crate::status::buff_status::BuffStatus;
use crate::status::debuff_status::DebuffStatus;
use crate::status::status_info::StatusInfo;
use crate::types::PlayerIdType;
use std::collections::HashMap;

pub(crate) struct DarkknightDatabase {
    pub(crate) hard_slash: AttackSkill,
    pub(crate) syphon_strike: AttackSkill,
    pub(crate) souleater: AttackSkill,
    pub(crate) edge_of_shadow: AttackSkill,
    pub(crate) salted_earth: AttackSkill,
    pub(crate) disesteem: AttackSkill,
    pub(crate) plunge: AttackSkill,
    pub(crate) carve_and_spit: AttackSkill,
    pub(crate) delirium: AttackSkill,
    pub(crate) shadowbringer: AttackSkill,
    pub(crate) bloodspiller: AttackSkill,
    pub(crate) living_shadow: AttackSkill,
    pub(crate) scarlet_delirium: AttackSkill,
    pub(crate) salt_and_darkness: AttackSkill,
    pub(crate) comeuppance: AttackSkill,
    pub(crate) torcleaver: AttackSkill,
    pub(crate) the_blackest_night: AttackSkill,
    pub(crate) edge_of_shadow_proc: AttackSkill,

    pub(crate) darkside: BuffStatus,
    pub(crate) the_blackest_night_proc: BuffStatus,

    pub(crate) potion: AttackSkill,
}

impl DarkknightDatabase {
    pub(crate) fn new(player_id: PlayerIdType) -> Self {
        let darkside: BuffStatus = BuffStatus {
            id: 200,
            name: String::from("Darkside"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(10)],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let delirium_buff: BuffStatus = BuffStatus {
            id: 201,
            name: String::from("Delirium"),
            stacks: 3,
            max_stacks: 3,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 20000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let salted_earth_debuff: DebuffStatus = DebuffStatus {
            id: 202,
            name: String::from("Salted Earth"),
            owner_id: player_id,
            potency: Some(50),
            trait_percent: Some(100),
            damage_category: Some(DamageCategory::PhysicalDot),
            damage_skill_id: Some(205),
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 15000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            snapshotted_infos: Default::default(),
        };
        let scorn: BuffStatus = BuffStatus {
            id: 203,
            name: String::from("Scorn"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let comeuppance_ready: BuffStatus = BuffStatus {
            id: 204,
            name: String::from("Comeuppance Ready"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let torcleaver_ready: BuffStatus = BuffStatus {
            id: 205,
            name: String::from("Torcleaver Ready"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };

        let the_blackest_night_proc: BuffStatus = BuffStatus {
            id: 206,
            name: String::from("Blackest Night Proc"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };

        let hard_slash: AttackSkill = AttackSkill {
            id: 200,
            name: String::from("Hard Slash"),
            player_id,
            potency: 300,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(2),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let syphon_strike: AttackSkill = AttackSkill {
            id: 201,
            name: String::from("Syphon Strike"),
            player_id,
            potency: 380,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(3),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 600)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let souleater: AttackSkill = AttackSkill {
            id: 202,
            name: String::from("Soul Eater"),
            player_id,
            potency: 480,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: HashMap::from([(1, 20)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let edge_of_shadow: AttackSkill = AttackSkill {
            id: 203,
            name: String::from("Edge of Shadow"),
            player_id,
            potency: 460,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                darkside.clone(),
                30000,
                60000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(0, 3000)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let living_shadow: AttackSkill = AttackSkill {
            id: 211,
            name: String::from("Living Shadow"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                scorn.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 120000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let disesteem: AttackSkill = AttackSkill {
            id: 204,
            name: String::from("Disesteem"),
            player_id,
            potency: 1000,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(scorn.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let salted_earth: AttackSkill = AttackSkill {
            id: 205,
            name: String::from("Salted Earth"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![ApplyDebuff(
                player_id,
                salted_earth_debuff.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 90000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };
        let plunge: AttackSkill = AttackSkill {
            id: 206,
            name: String::from("Plunge"),
            player_id,
            potency: 150,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 30000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 2,
            max_stacks: 2,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let carve_and_spit: AttackSkill = AttackSkill {
            id: 207,
            name: String::from("Carve and Spit"),
            player_id,
            potency: 540,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 60000,
            resource_required: vec![Resource(0, 600)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let delirium: AttackSkill = AttackSkill {
            id: 208,
            name: String::from("Delirium"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                delirium_buff.clone(),
                20000,
                20000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };
        let shadowbringer: AttackSkill = AttackSkill {
            id: 209,
            name: String::from("Shadowbringer"),
            player_id,
            potency: 600,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 2,
            max_stacks: 2,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let bloodspiller: AttackSkill = AttackSkill {
            id: 210,
            name: String::from("Bloodspiller"),
            player_id,
            potency: 580,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(1, 50)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let scarlet_delirium: AttackSkill = AttackSkill {
            id: 212,
            name: String::from("Scarlet Delirium"),
            player_id,
            potency: 600,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                comeuppance_ready.clone(),
                20000,
                20000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(delirium_buff.get_id())],
            resource_created: HashMap::from([(0, 800), (1, 10)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let salt_and_darkness: AttackSkill = AttackSkill {
            id: 213,
            name: String::from("Salt and Darkness"),
            player_id,
            potency: 500,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 20000,
            resource_required: vec![CheckStatus(salted_earth_debuff.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        let comeuppance: AttackSkill = AttackSkill {
            id: 214,
            name: String::from("Comeuppance"),
            player_id,
            potency: 700,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                torcleaver_ready.clone(),
                20000,
                20000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![
                UseBuff(delirium_buff.get_id()),
                UseBuff(comeuppance_ready.get_id()),
            ],
            resource_created: HashMap::from([(0, 800), (1, 10)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let torcleaver: AttackSkill = AttackSkill {
            id: 215,
            name: String::from("Torcleaver"),
            player_id,
            potency: 800,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![
                UseBuff(delirium_buff.get_id()),
                UseBuff(torcleaver_ready.get_id()),
            ],
            resource_created: HashMap::from([(0, 800), (1, 10)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let the_blackest_night: AttackSkill = AttackSkill {
            id: 216,
            name: String::from("The Blackest Night"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                the_blackest_night_proc.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 3000,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(0, 3000)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let edge_of_shadow_proc: AttackSkill = AttackSkill {
            id: 217,
            name: String::from("Edge of Shadow"),
            player_id,
            potency: 460,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                darkside.clone(),
                30000,
                60000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(the_blackest_night_proc.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let potion_skill = PotionSkill::new(player_id);

        DarkknightDatabase {
            hard_slash,
            syphon_strike,
            souleater,
            edge_of_shadow,
            salted_earth,
            plunge,
            carve_and_spit,
            delirium,
            shadowbringer,
            bloodspiller,
            living_shadow,
            salt_and_darkness,
            comeuppance,
            torcleaver,
            scarlet_delirium,
            disesteem,
            the_blackest_night,
            edge_of_shadow_proc,

            darkside,
            the_blackest_night_proc,

            potion: potion_skill.potion,
        }
    }
}

pub(crate) fn make_darkknight_skill_list(player_id: PlayerIdType) -> SkillTable<AttackSkill> {
    let db = DarkknightDatabase::new(player_id);

    let darkknight_skill_list: Vec<AttackSkill> = vec![
        db.hard_slash,
        db.syphon_strike,
        db.souleater,
        db.edge_of_shadow,
        db.salted_earth,
        db.plunge,
        db.carve_and_spit,
        db.delirium,
        db.shadowbringer,
        db.bloodspiller,
        db.living_shadow,
        db.salt_and_darkness,
        db.comeuppance,
        db.torcleaver,
        db.scarlet_delirium,
        db.disesteem,
        db.the_blackest_night,
        db.edge_of_shadow_proc,
        db.potion,
    ];

    make_skill_table(darkknight_skill_list)
}
