use crate::event::ffxiv_event::FfxivEvent::{ApplyBuff, ApplyDebuff, ApplyRaidBuff};
use crate::id_entity::IdEntity;
use crate::jobs_skill_data::PotionSkill;
use crate::rotation::SkillTable;
use crate::skill::attack_skill::AttackSkill;
use crate::skill::damage_category::DamageCategory;
use crate::skill::use_type::UseType;
use crate::skill::ResourceRequirements::{CheckStatus, UseBuff};
use crate::skill::{make_skill_table, ResourceRequirements};
use crate::status::buff_status::BuffStatus;
use crate::status::debuff_status::DebuffStatus;
use crate::status::status_info::StatusInfo;
use crate::types::PlayerIdType;
use std::collections::HashMap;

pub(crate) struct AstrologianDatabase {
    pub(crate) fall_malefic: AttackSkill,
    pub(crate) combust_iii: AttackSkill,
    pub(crate) earthly_star: AttackSkill,
    pub(crate) astral_draw: AttackSkill,
    pub(crate) umbral_draw: AttackSkill,
    pub(crate) the_balance: AttackSkill,
    pub(crate) the_spear: AttackSkill,
    pub(crate) divination: AttackSkill,
    pub(crate) lightspeed: AttackSkill,
    pub(crate) lord_of_crowns: AttackSkill,
    pub(crate) fall_malefic_lightspeed: AttackSkill,
    pub(crate) draw: AttackSkill,
    pub(crate) oracle: AttackSkill,

    pub(crate) lord_of_crowns_buff: BuffStatus,
    pub(crate) combust_iii_dot: DebuffStatus,
    pub(crate) the_balance_ready: BuffStatus,
    pub(crate) the_spear_ready: BuffStatus,
    pub(crate) divination_buff: BuffStatus,

    pub(crate) potion: AttackSkill,
}

impl AstrologianDatabase {
    pub(crate) fn new(player_id: PlayerIdType) -> Self {
        let divination_buff: BuffStatus = BuffStatus {
            id: 500,
            name: String::from("Divination"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(6)],
            duration_millisecond: 21000,
            is_raidwide: true,
            trigger_proc_event_on_gcd: vec![],
        };
        let the_balance_buff: BuffStatus = BuffStatus {
            id: 501,
            name: String::from("The Balance"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(7)],
            duration_millisecond: 15000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let the_spear_buff: BuffStatus = BuffStatus {
            id: 502,
            name: String::from("The Spear"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(7)],
            duration_millisecond: 15000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let lightspeed_buff: BuffStatus = BuffStatus {
            id: 503,
            name: String::from("Lightspeed"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 15000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let lord_of_crowns_buff: BuffStatus = BuffStatus {
            id: 504,
            name: String::from("Lord of Crowns"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 240000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let combust_iii_dot: DebuffStatus = DebuffStatus {
            id: 505,
            name: String::from("Combust III"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            damage_skill_id: Some(514),
            potency: Some(70),
            trait_percent: Some(130),
            damage_category: Some(DamageCategory::MagicalDot),
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 30000,
            is_raidwide: false,
            snapshotted_infos: Default::default(),
        };
        let the_balance_ready: BuffStatus = BuffStatus {
            id: 506,
            name: String::from("The Balance Ready"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 240000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let the_spear_ready: BuffStatus = BuffStatus {
            id: 507,
            name: String::from("The Spear Ready"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 240000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let divining: BuffStatus = BuffStatus {
            id: 508,
            name: String::from("Divining"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };

        let fall_malefic = AttackSkill {
            id: 500,
            name: String::from("Fall Malefic"),
            player_id,
            potency: 270,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 1000,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
            cooldown_reduced_by_speed: true,
        };
        let combust_iii = AttackSkill {
            id: 501,
            name: String::from("Combust III"),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![ApplyDebuff(
                player_id,
                combust_iii_dot.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
            cooldown_reduced_by_speed: true,
        };
        let earthly_star = AttackSkill {
            id: 502,
            name: String::from("Earthly Star"),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
            cooldown_reduced_by_speed: false,
        };
        let astral_draw = AttackSkill {
            id: 503,
            name: String::from("Astral Draw"),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    the_balance_ready.clone(),
                    240000,
                    240000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    lord_of_crowns_buff.clone(),
                    240000,
                    240000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 55000,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: Some(512),
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
            cooldown_reduced_by_speed: false,
        };
        let umbral_draw = AttackSkill {
            id: 504,
            name: String::from("Umbral Draw"),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                the_spear_ready.clone(),
                240000,
                240000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 55000,
            resource_required: vec![ResourceRequirements::Resource(0, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: Some(512),
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
            cooldown_reduced_by_speed: false,
        };
        let the_balance = AttackSkill {
            id: 505,
            name: String::from("The Balance"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                the_balance_buff.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(the_balance_ready.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnPartyMember,
            cooldown_reduced_by_speed: false,
        };
        let the_spear = AttackSkill {
            id: 506,
            name: String::from("The Spear"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                the_spear_buff.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(the_spear_ready.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnPartyMember,
            cooldown_reduced_by_speed: false,
        };
        let divination = AttackSkill {
            id: 507,
            name: String::from("Divination"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![
                ApplyRaidBuff(player_id, divination_buff.clone(), 21000, 21000, 0),
                ApplyBuff(player_id, player_id, divining.clone(), 30000, 30000, 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 120000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
            cooldown_reduced_by_speed: false,
        };
        let lightspeed = AttackSkill {
            id: 508,
            name: String::from("Lightspeed"),
            player_id,
            potency: 0,
            trait_percent: 0,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                lightspeed_buff.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 90000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 2,
            max_stacks: 2,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
            cooldown_reduced_by_speed: true,
        };
        let lord_of_crowns = AttackSkill {
            id: 510,
            name: String::from("Lord of Crowns"),
            player_id,
            potency: 400,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(lord_of_crowns_buff.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
            cooldown_reduced_by_speed: false,
        };
        let fall_malefic_lightspeed = AttackSkill {
            id: 511,
            name: String::from("Fall Malefic"),
            player_id,
            potency: 270,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![CheckStatus(lightspeed_buff.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
            cooldown_reduced_by_speed: false,
        };
        let draw = AttackSkill {
            id: 512,
            name: String::from("Draw"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 55000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
            cooldown_reduced_by_speed: false,
        };

        let oracle = AttackSkill {
            id: 513,
            name: String::from("Oracle"),
            player_id,
            potency: 800,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(divining.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
            cooldown_reduced_by_speed: false,
        };

        let potion_skill = PotionSkill::new(player_id);

        AstrologianDatabase {
            fall_malefic,
            combust_iii,
            earthly_star,
            astral_draw,
            umbral_draw,
            the_balance,
            the_spear,
            divination,
            lightspeed,
            lord_of_crowns,
            fall_malefic_lightspeed,
            draw,
            oracle,

            lord_of_crowns_buff,
            the_spear_ready,
            the_balance_ready,
            divination_buff,

            combust_iii_dot,

            potion: potion_skill.potion,
        }
    }
}

pub(crate) fn make_astrologian_skill_list(player_id: PlayerIdType) -> SkillTable<AttackSkill> {
    let db = AstrologianDatabase::new(player_id);

    let astrologian_skill_list: Vec<AttackSkill> = vec![
        db.fall_malefic,
        db.combust_iii,
        db.earthly_star,
        db.astral_draw,
        db.umbral_draw,
        db.the_balance,
        db.the_spear,
        db.divination,
        db.lightspeed,
        db.lord_of_crowns,
        db.fall_malefic_lightspeed,
        db.draw,
        db.oracle,
        db.potion,
    ];

    make_skill_table(astrologian_skill_list)
}
