use crate::event::ffxiv_event::FfxivEvent::{ApplyBuff, ReduceSkillCooldown};
use crate::id_entity::IdEntity;
use crate::jobs_skill_data::PotionSkill;
use crate::rotation::SkillTable;
use crate::skill::attack_skill::AttackSkill;
use crate::skill::use_type::UseType;
use crate::skill::ResourceRequirements::UseBuff;
use crate::skill::{make_skill_table, ResourceRequirements, ResourceTable};
use crate::status::buff_status::BuffStatus;
use crate::status::status_info::StatusInfo;
use crate::types::PlayerIdType;
use std::collections::HashMap;

pub(crate) struct MachinistDatabase {
    pub(crate) heated_split_shot: AttackSkill,
    pub(crate) heated_slug_shot: AttackSkill,
    pub(crate) heated_clean_shot: AttackSkill,
    pub(crate) drill: AttackSkill,
    pub(crate) air_anchor: AttackSkill,
    pub(crate) chainsaw: AttackSkill,
    pub(crate) reassemble: AttackSkill,
    pub(crate) double_check: AttackSkill,
    pub(crate) checkmate: AttackSkill,
    pub(crate) blazing_shot: AttackSkill,
    pub(crate) wildfire: AttackSkill,
    pub(crate) hypercharge: AttackSkill,
    pub(crate) barrel_stabilizer: AttackSkill,
    pub(crate) automaton_queen: AttackSkill,
    pub(crate) drill_reassemble: AttackSkill,
    pub(crate) air_anchor_reassemble: AttackSkill,
    pub(crate) chainsaw_reassemble: AttackSkill,
    pub(crate) excavator: AttackSkill,
    pub(crate) full_metal_field: AttackSkill,
    pub(crate) excavator_reassemble: AttackSkill,
    pub(crate) hypercharge_hypercharged: AttackSkill,
    pub(crate) reassemble_opener: AttackSkill,

    pub(crate) hypercharge_buff: BuffStatus,

    pub(crate) potion: AttackSkill,
}

impl MachinistDatabase {
    pub(crate) fn new(player_id: PlayerIdType) -> Self {
        let reassemble_buff: BuffStatus = {
            BuffStatus {
                id: 1400,
                name: String::from("Reassemble"),
                owner_id: player_id,
                duration_left_millisecond: 0,
                status_info: vec![StatusInfo::None],
                duration_millisecond: 5000,
                is_raidwide: false,
                stacks: 1,
                max_stacks: 1,
                trigger_proc_event_on_gcd: vec![],
            }
        };
        let hypercharge_buff: BuffStatus = BuffStatus {
            id: 1401,
            name: String::from("Hypercharge"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 10000,
            is_raidwide: false,
            stacks: 5,
            max_stacks: 5,
            trigger_proc_event_on_gcd: vec![],
        };
        let excavator_ready: BuffStatus = BuffStatus {
            id: 1402,
            name: String::from("Excavator Ready"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let full_metal_machinist: BuffStatus = BuffStatus {
            id: 1403,
            name: String::from("Full Metal Machinist"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let hypercharged: BuffStatus = BuffStatus {
            id: 1404,
            name: String::from("Hypercharged"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };

        let heated_split_shot: AttackSkill = AttackSkill {
            id: 1400,
            name: String::from("Heated Split Shot"),
            player_id,
            use_type: UseType::UseOnTarget,
            potency: 220,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(2),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 5)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
        };
        let heated_slug_shot: AttackSkill = AttackSkill {
            id: 1401,
            name: String::from("Heated Slug Shot"),
            player_id,
            potency: 320,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(3),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 5)]),
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let heated_clean_shot: AttackSkill = AttackSkill {
            id: 1402,
            name: String::from("Heated Clean Shot"),
            player_id,
            potency: 400,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: ResourceTable::from([(0, 5), (1, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
        };
        let drill: AttackSkill = AttackSkill {
            id: 1403,
            name: String::from("Drill"),
            player_id,
            potency: 600,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 20000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 2,
            max_stacks: 2,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let air_anchor: AttackSkill = AttackSkill {
            id: 1404,
            name: String::from("Air Anchor"),
            player_id,
            potency: 600,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 40000,
            resource_required: vec![],
            resource_created: HashMap::from([(1, 2)]),
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let chain_saw: AttackSkill = AttackSkill {
            id: 1405,
            name: String::from("Chain Saw"),
            player_id,
            potency: 600,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                excavator_ready.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: ResourceTable::from([(1, 2)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
        };
        let reassemble: AttackSkill = AttackSkill {
            id: 1406,
            name: String::from("Reassemble"),
            player_id,
            potency: 0,
            use_type: UseType::NoTarget,
            trait_percent: 120,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                reassemble_buff.clone(),
                5000,
                5000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 55000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 2,
            max_stacks: 2,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let double_check: AttackSkill = AttackSkill {
            id: 1407,
            name: String::from("Double Check"),
            player_id,
            potency: 160,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 30000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 3,
            max_stacks: 3,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let checkmate: AttackSkill = AttackSkill {
            id: 1408,
            name: String::from("Checkmate"),
            player_id,
            potency: 160,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 30000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 3,
            max_stacks: 3,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let blazing_shot: AttackSkill = AttackSkill {
            id: 1409,
            name: String::from("Blazing Shot"),
            player_id,
            potency: 220,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![
                ReduceSkillCooldown(player_id, double_check.get_id(), 15000, 0),
                ReduceSkillCooldown(player_id, checkmate.get_id(), 15000, 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(hypercharge_buff.get_id())],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let wildfire: AttackSkill = AttackSkill {
            id: 1410,
            name: String::from("Wildfire"),
            player_id,
            potency: 0,
            use_type: UseType::UseOnTarget,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 120000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let hypercharge: AttackSkill = AttackSkill {
            id: 1411,
            name: String::from("Hypercharge"),
            player_id,
            potency: 0,
            use_type: UseType::NoTarget,
            trait_percent: 120,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                hypercharge_buff.clone(),
                10000,
                10000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 10000,
            resource_required: vec![ResourceRequirements::Resource(0, 50)],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let barrel_stabilizer: AttackSkill = AttackSkill {
            id: 1412,
            name: String::from("Barrel Stabilizer"),
            player_id,
            potency: 0,
            use_type: UseType::NoTarget,
            trait_percent: 120,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    full_metal_machinist.clone(),
                    30000,
                    30000,
                    0,
                ),
                ApplyBuff(player_id, player_id, hypercharged.clone(), 30000, 30000, 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 120000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let automaton_queen: AttackSkill = AttackSkill {
            id: 1413,
            name: String::from("Automaton Queen"),
            player_id,
            potency: 0,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 15000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
        };
        let drill_reassemble: AttackSkill = AttackSkill {
            id: 1414,
            name: String::from("Drill"),
            player_id,
            potency: 600,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 20000,
            resource_required: vec![UseBuff(reassemble_buff.get_id())],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: Some(drill.get_id()),
            is_guaranteed_crit: true,
            is_guaranteed_direct_hit: true,
        };
        let air_anchor_reassemble: AttackSkill = AttackSkill {
            id: 1415,
            name: String::from("Air Anchor"),
            player_id,
            potency: 600,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 40000,
            resource_required: vec![],
            resource_created: HashMap::from([(1, 2)]),
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: Some(air_anchor.get_id()),
            is_guaranteed_crit: true,
            is_guaranteed_direct_hit: true,
        };
        let chain_saw_reassemble: AttackSkill = AttackSkill {
            id: 1416,
            name: String::from("Chain Saw"),
            player_id,
            potency: 600,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                excavator_ready.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: ResourceTable::from([(1, 2)]),
            is_guaranteed_crit: true,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: Some(chain_saw.get_id()),
            is_guaranteed_direct_hit: true,
        };
        let excavator: AttackSkill = AttackSkill {
            id: 1417,
            name: String::from("Excavator"),
            player_id,
            potency: 600,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(excavator_ready.get_id())],
            resource_created: HashMap::from([(1, 2)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
        };
        let full_metal_field: AttackSkill = AttackSkill {
            id: 1418,
            name: String::from("Full Metal Field"),
            player_id,
            potency: 900,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(full_metal_machinist.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: true,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: true,
        };
        let excavator_reasssemble: AttackSkill = AttackSkill {
            id: 1419,
            name: String::from("Excavator"),
            player_id,
            potency: 600,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![
                UseBuff(reassemble_buff.get_id()),
                UseBuff(excavator_ready.get_id()),
            ],
            resource_created: HashMap::from([(1, 2)]),
            is_guaranteed_crit: true,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: true,
        };
        let hypercharge_hypercharged: AttackSkill = AttackSkill {
            id: 1420,
            name: String::from("Hypercharge"),
            player_id,
            potency: 0,
            use_type: UseType::NoTarget,
            trait_percent: 120,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                hypercharge_buff.clone(),
                10000,
                10000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 10000,
            resource_required: vec![UseBuff(hypercharged.id)],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };

        let reassemble_opener: AttackSkill = AttackSkill {
            id: 1421,
            name: String::from("Reassemble"),
            player_id,
            potency: 0,
            use_type: UseType::NoTarget,
            trait_percent: 120,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                reassemble_buff.clone(),
                5000,
                5000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 1000,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 55000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: Some(reassemble.get_id()),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };

        let potion_skill = PotionSkill::new(player_id);

        Self {
            heated_split_shot,
            heated_slug_shot,
            heated_clean_shot,
            drill,
            air_anchor,
            chainsaw: chain_saw,
            reassemble,
            double_check,
            checkmate,
            blazing_shot,
            wildfire,
            hypercharge,
            barrel_stabilizer,
            automaton_queen,
            drill_reassemble,
            air_anchor_reassemble,
            chainsaw_reassemble: chain_saw_reassemble,
            excavator,
            full_metal_field,
            excavator_reassemble: excavator_reasssemble,
            hypercharge_hypercharged,
            reassemble_opener,

            hypercharge_buff,

            potion: potion_skill.potion,
        }
    }
}

pub(crate) fn make_machinist_skill_list(player_id: PlayerIdType) -> SkillTable<AttackSkill> {
    let db = MachinistDatabase::new(player_id);

    let machinist_skill_list: Vec<AttackSkill> = vec![
        db.heated_split_shot,
        db.heated_slug_shot,
        db.heated_clean_shot,
        db.drill,
        db.air_anchor,
        db.chainsaw,
        db.reassemble,
        db.double_check,
        db.checkmate,
        db.blazing_shot,
        db.wildfire,
        db.hypercharge,
        db.barrel_stabilizer,
        db.automaton_queen,
        db.drill_reassemble,
        db.air_anchor_reassemble,
        db.chainsaw_reassemble,
        db.excavator,
        db.full_metal_field,
        db.excavator_reassemble,
        db.hypercharge_hypercharged,
        db.reassemble_opener,
        db.potion,
    ];

    make_skill_table(machinist_skill_list)
}
