use crate::event::ffxiv_event::FfxivEvent;
use crate::event::ffxiv_event::FfxivEvent::ApplyBuff;
use crate::event_ticker::PercentType;
use crate::id_entity::IdEntity;
use crate::jobs_skill_data::PotionSkill;
use crate::rotation::SkillTable;
use crate::skill::attack_skill::AttackSkill;
use crate::skill::use_type::UseType;
use crate::skill::ResourceRequirements::Resource;
use crate::skill::{make_skill_table, ResourceRequirements};
use crate::status::buff_status::BuffStatus;
use crate::status::status_info::StatusInfo;
use crate::types::PlayerIdType;
use std::collections::HashMap;

const PROC_PERCENT: PercentType = 55;

pub(crate) struct DancerDatabase {
    pub(crate) cascade: AttackSkill,
    pub(crate) fountain: AttackSkill,
    pub(crate) standard_step: AttackSkill,
    pub(crate) technical_step: AttackSkill,
    pub(crate) devilment: AttackSkill,
    pub(crate) flourish: AttackSkill,
    pub(crate) fan_dance1: AttackSkill,
    pub(crate) fan_dance3: AttackSkill,
    pub(crate) fan_dance4: AttackSkill,
    pub(crate) reverse_cascade: AttackSkill,
    pub(crate) fountainfall: AttackSkill,
    pub(crate) saber_dance: AttackSkill,
    pub(crate) starfall_dance: AttackSkill,
    pub(crate) reverse_cascade_flourish: AttackSkill,
    pub(crate) fountainfall_flourish: AttackSkill,
    pub(crate) tillana: AttackSkill,
    pub(crate) last_dance: AttackSkill,
    pub(crate) finishing_move: AttackSkill,
    pub(crate) dance_of_the_dawn: AttackSkill,
    pub(crate) standard_opener: AttackSkill,

    pub(crate) technical_step_buff: BuffStatus,

    pub(crate) potion: AttackSkill,
}

impl DancerDatabase {
    pub(crate) fn new(player_id: PlayerIdType, partner_player_id: PlayerIdType) -> Self {
        let standard_step_buff: BuffStatus = BuffStatus {
            id: 1500,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(5)],
            duration_millisecond: 60000,
            is_raidwide: false,
            name: "Standard Step buff".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let standard_step_proc_buff: BuffStatus = BuffStatus {
            id: 1501,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 60000,
            is_raidwide: false,
            name: "Standard Buff proc".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![(
                FfxivEvent::IncreasePlayerResource(player_id, 0, 10, 0),
                20,
            )],
        };
        let technical_step_buff: BuffStatus = BuffStatus {
            id: 1502,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(5)],
            duration_millisecond: 20000,
            is_raidwide: true,
            name: "Technical Step buff".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let technical_step_proc_buff: BuffStatus = BuffStatus {
            id: 1503,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 20000,
            is_raidwide: true,
            name: "Technical Step proc".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![(
                FfxivEvent::IncreasePlayerResource(player_id, 0, 10, 0),
                20,
            )],
        };
        // we nerf by 10% (20 -> 18) b/c it's eating too much.
        let devilment_buff: BuffStatus = BuffStatus {
            id: 1504,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![
                StatusInfo::CritHitRatePercent(18),
                StatusInfo::DirectHitRatePercent(18),
            ],
            duration_millisecond: 20000,
            is_raidwide: false,
            name: "Devilment Buff".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let threefold_fan_dance: BuffStatus = BuffStatus {
            id: 1505,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            name: "Threefold Fan Dance".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let fourfold_fan_dance: BuffStatus = BuffStatus {
            id: 1506,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            name: "Fourfold Fan Dance".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let silken_symmetry: BuffStatus = BuffStatus {
            id: 1507,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            name: "Silken Symmetry".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let silken_flow: BuffStatus = BuffStatus {
            id: 1508,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            name: "Silken Flow".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let flourishing_starfall: BuffStatus = BuffStatus {
            id: 1509,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 20000,
            is_raidwide: false,
            name: "Flourishing Starfall".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let flourishing_symmetry: BuffStatus = BuffStatus {
            id: 1510,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            name: "Flourishing Symmetry".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let flourishing_flow: BuffStatus = BuffStatus {
            id: 1511,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            name: "Flourishing Flow".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };

        let flourishing_finish: BuffStatus = BuffStatus {
            id: 1512,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            name: "Flourishing Finish".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let last_dance_ready: BuffStatus = BuffStatus {
            id: 1513,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            name: "Last Dance Ready".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let dance_of_the_dawn_ready: BuffStatus = BuffStatus {
            id: 1514,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            name: "Dance of the Dawn".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let finishing_move_ready: BuffStatus = BuffStatus {
            id: 1515,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            name: "Finishing Move Ready".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };

        let cascade: AttackSkill = AttackSkill {
            id: 1500,
            name: "Cascade".to_string(),
            player_id,
            potency: 220,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![(
                ApplyBuff(
                    player_id,
                    player_id,
                    silken_symmetry.clone(),
                    30000,
                    30000,
                    0,
                ),
                50,
            )],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 5)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let fountain: AttackSkill = AttackSkill {
            id: 1501,
            name: "Fountain".to_string(),
            player_id,
            potency: 280,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![(
                ApplyBuff(player_id, player_id, silken_flow.clone(), 30000, 30000, 0),
                50,
            )],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 5)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let standard_step: AttackSkill = AttackSkill {
            id: 1502,
            name: "Standard Step".to_string(),
            player_id,
            potency: 850,
            trait_percent: 120,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    standard_step_buff.clone(),
                    60000,
                    60000,
                    3500,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    standard_step_proc_buff.clone(),
                    60000,
                    60000,
                    3500,
                ),
                ApplyBuff(
                    player_id,
                    partner_player_id,
                    standard_step_buff.clone(),
                    60000,
                    60000,
                    3500,
                ),
                ApplyBuff(
                    player_id,
                    partner_player_id,
                    standard_step_proc_buff.clone(),
                    60000,
                    60000,
                    3500,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    last_dance_ready.clone(),
                    30000,
                    30000,
                    3500,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1500,
            charging_time_millisecond: 3500,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 30000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };

        let technical_step_delay = 5500;

        let technical_step: AttackSkill = AttackSkill {
            id: 1503,
            name: "Technical Step".to_string(),
            player_id,
            potency: 1300,
            trait_percent: 120,
            additional_skill_events: vec![
                FfxivEvent::ApplyRaidBuff(player_id, technical_step_buff.clone(), 20000, 20000, 0),
                FfxivEvent::ApplyRaidBuff(
                    player_id,
                    technical_step_proc_buff.clone(),
                    20000,
                    20000,
                    technical_step_delay,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    flourishing_finish.clone(),
                    30000,
                    30000,
                    technical_step_delay,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    dance_of_the_dawn_ready.clone(),
                    30000,
                    30000,
                    technical_step_delay,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1500,
            charging_time_millisecond: technical_step_delay,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 120000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };

        let devilment: AttackSkill = AttackSkill {
            id: 1504,
            name: "Devilment".to_string(),
            player_id,
            potency: 0,
            trait_percent: 120,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    devilment_buff.clone(),
                    20000,
                    20000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    partner_player_id,
                    devilment_buff.clone(),
                    20000,
                    20000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    flourishing_starfall.clone(),
                    20000,
                    20000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 120000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };

        let flourish: AttackSkill = AttackSkill {
            id: 1505,
            name: "Flourish".to_string(),
            player_id,
            potency: 0,
            trait_percent: 120,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    threefold_fan_dance.clone(),
                    30000,
                    30000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    fourfold_fan_dance.clone(),
                    30000,
                    30000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    flourishing_flow.clone(),
                    30000,
                    30000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    flourishing_symmetry.clone(),
                    30000,
                    30000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    finishing_move_ready.clone(),
                    30000,
                    30000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 60000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };

        let fan_dance_i: AttackSkill = AttackSkill {
            id: 1506,
            name: "Fan Dance I".to_string(),
            player_id,
            potency: 150,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![(
                ApplyBuff(
                    player_id,
                    player_id,
                    threefold_fan_dance.clone(),
                    30000,
                    30000,
                    0,
                ),
                50,
            )],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            resource_required: vec![Resource(1, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 1000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let fan_dance_iii: AttackSkill = AttackSkill {
            id: 1507,
            name: "Fan Dance III".to_string(),
            player_id,
            potency: 200,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            resource_required: vec![ResourceRequirements::UseBuff(threefold_fan_dance.id)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 1000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let fan_dance_iv: AttackSkill = AttackSkill {
            id: 1508,
            name: "Fan Dance IV".to_string(),
            player_id,
            potency: 420,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            resource_required: vec![ResourceRequirements::UseBuff(fourfold_fan_dance.id)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 1000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let reverse_cascade: AttackSkill = AttackSkill {
            id: 1509,
            name: "Reverse Cascade".to_string(),
            player_id,
            potency: 280,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![(
                FfxivEvent::IncreasePlayerResource(player_id, 1, 1, 0),
                PROC_PERCENT,
            )],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![ResourceRequirements::UseBuff(silken_symmetry.id)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let fountainfall: AttackSkill = AttackSkill {
            id: 1510,
            name: "Fountainfall".to_string(),
            player_id,
            potency: 340,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![(
                FfxivEvent::IncreasePlayerResource(player_id, 1, 1, 0),
                PROC_PERCENT,
            )],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![ResourceRequirements::UseBuff(silken_flow.id)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let saber_dance: AttackSkill = AttackSkill {
            id: 1511,
            name: "Saber Dance".to_string(),
            player_id,
            potency: 520,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![Resource(0, 50)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let starfall_dance: AttackSkill = AttackSkill {
            id: 1512,
            name: "Starfall Dance".to_string(),
            player_id,
            potency: 600,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![ResourceRequirements::UseBuff(flourishing_starfall.id)],
            resource_created: Default::default(),
            is_guaranteed_crit: true,
            is_guaranteed_direct_hit: true,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let reverse_cascade_flourish: AttackSkill = AttackSkill {
            id: 1513,
            name: "Reverse Cascade Flourish".to_string(),
            player_id,
            potency: 280,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![(
                FfxivEvent::IncreasePlayerResource(player_id, 1, 1, 0),
                PROC_PERCENT,
            )],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![ResourceRequirements::UseBuff(flourishing_symmetry.id)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let fountainfall_flourish: AttackSkill = AttackSkill {
            id: 1514,
            name: "Fountainfall Flourish".to_string(),
            player_id,
            potency: 340,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![(
                FfxivEvent::IncreasePlayerResource(player_id, 1, 1, 0),
                PROC_PERCENT,
            )],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![ResourceRequirements::UseBuff(flourishing_flow.id)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let tillana: AttackSkill = AttackSkill {
            id: 1515,
            name: "Tillana".to_string(),
            player_id,
            potency: 600,
            trait_percent: 120,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    standard_step_buff.clone(),
                    60000,
                    60000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    standard_step_proc_buff.clone(),
                    60000,
                    60000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    partner_player_id,
                    standard_step_buff.clone(),
                    60000,
                    60000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    partner_player_id,
                    standard_step_proc_buff.clone(),
                    60000,
                    60000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            resource_required: vec![ResourceRequirements::UseBuff(flourishing_finish.id)],
            resource_created: HashMap::from([(0, 50)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };
        let last_dance: AttackSkill = AttackSkill {
            id: 1516,
            name: "Last Dance".to_string(),
            player_id,
            potency: 520,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![ResourceRequirements::UseBuff(last_dance_ready.id)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let finishing_move: AttackSkill = AttackSkill {
            id: 1517,
            name: "Finishing Move".to_string(),
            player_id,
            potency: 850,
            trait_percent: 120,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                last_dance_ready.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![ResourceRequirements::UseBuff(finishing_move_ready.id)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: Some(standard_step.get_id()),
            use_type: UseType::UseOnTarget,
        };
        let dance_of_the_dawn: AttackSkill = AttackSkill {
            id: 1518,
            name: "Dance of the Dawn".to_string(),
            player_id,
            potency: 1000,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![
                ResourceRequirements::UseBuff(dance_of_the_dawn_ready.id),
                Resource(0, 50),
            ],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let standard_step_opener: AttackSkill = AttackSkill {
            id: 1519,
            name: "Standard Step".to_string(),
            player_id,
            potency: 850,
            trait_percent: 120,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    standard_step_buff.clone(),
                    60000,
                    60000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    standard_step_proc_buff.clone(),
                    60000,
                    60000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    partner_player_id,
                    standard_step_buff.clone(),
                    60000,
                    60000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    partner_player_id,
                    standard_step_proc_buff.clone(),
                    60000,
                    60000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    last_dance_ready.clone(),
                    30000,
                    30000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1500,
            charging_time_millisecond: 14000,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: Some(standard_step.get_id()),
            use_type: UseType::NoTarget,
        };
        let potion_skill = PotionSkill::new(player_id);

        DancerDatabase {
            cascade,
            fountain,
            standard_step,
            technical_step,
            devilment,
            flourish,
            fan_dance1: fan_dance_i,
            fan_dance3: fan_dance_iii,
            fan_dance4: fan_dance_iv,
            reverse_cascade,
            fountainfall,
            saber_dance,
            starfall_dance,
            reverse_cascade_flourish,
            fountainfall_flourish,
            tillana,
            last_dance,
            finishing_move,
            dance_of_the_dawn,
            standard_opener: standard_step_opener,

            technical_step_buff,

            potion: potion_skill.potion,
        }
    }
}

pub(crate) fn make_dancer_skill_list(
    player_id: PlayerIdType,
    partner_player_id: PlayerIdType,
) -> SkillTable<AttackSkill> {
    let db = DancerDatabase::new(player_id, partner_player_id);

    let dancer_skill_list: Vec<AttackSkill> = vec![
        db.cascade,
        db.fountain,
        db.standard_step,
        db.technical_step,
        db.devilment,
        db.flourish,
        db.fan_dance1,
        db.fan_dance3,
        db.fan_dance4,
        db.reverse_cascade,
        db.fountainfall,
        db.saber_dance,
        db.starfall_dance,
        db.reverse_cascade_flourish,
        db.fountainfall_flourish,
        db.tillana,
        db.last_dance,
        db.finishing_move,
        db.dance_of_the_dawn,
        db.standard_opener,
        db.potion,
    ];

    make_skill_table(dancer_skill_list)
}
