use crate::event::ffxiv_event::FfxivEvent;
use crate::id_entity::IdEntity;
use crate::rotation::job_priorities::priority_table::{Opener, SkillPrerequisite};
use crate::rotation::job_priorities::SkillTable;
use crate::rotation::SkillPriorityInfo;
use crate::skill::attack_skill::AttackSkill;
use crate::skill::job_abilities::make_skill_table;
use crate::skill::{ResourceRequirements, ResourceTable};
use crate::status::buff_status::BuffStatus;
use crate::status::debuff_status::DebuffStatus;
use crate::status::status_info::StatusInfo;
use crate::IdType;

struct NinjaDatabase {
    huton: AttackSkill,
    raiton: AttackSkill,
    raiju: AttackSkill,
    hyosho: AttackSkill,
    suiton: AttackSkill,
    spinning_edge: AttackSkill,
    gust_slash: AttackSkill,
    aeolian_edge: AttackSkill,
    armor_crush: AttackSkill,
    mug: AttackSkill,
    trick_attack: AttackSkill,
    kassatsu: AttackSkill,
    bhavacakra: AttackSkill,
    tenchijin: AttackSkill,
    fuma_tenchijin: AttackSkill,
    raiton_tenchijin: AttackSkill,
    suiton_tenchijin: AttackSkill,
    bunshin: AttackSkill,
    dream: AttackSkill,
    phantom_kamaitachi: AttackSkill,
    meisui: AttackSkill,
    bhavacakra_meisui: AttackSkill,
    bunshin_stack: AttackSkill,
    mudra: AttackSkill,

    huton_status: BuffStatus,
    raijuready: BuffStatus,
    suiton_status: BuffStatus,
    mug_status: DebuffStatus,
    trick_attack_status: DebuffStatus,
    kassatsu_status: BuffStatus,
    tenchijin_status: BuffStatus,
    bunshin_status: BuffStatus,
    meisui_status: BuffStatus,
    bunshin_clone_status: BuffStatus,
}

impl NinjaDatabase {
    fn new() -> Self {
        let HUTON_STATUS: BuffStatus = {
            BuffStatus {
                id: 1000,
                name: String::from("Huton"),
                owner_id: 0,
                duration_left_millisecond: 0,
                status_info: StatusInfo::SpeedPercent(15),
                duration_millisecond: 60000,
                is_raidwide: false,
                stacks: 1,
            }
        };
        let RAIJUREADY: BuffStatus = BuffStatus {
            id: 1001,
            name: String::from("Raiju Ready"),
            owner_id: 0,
            duration_left_millisecond: 0,
            status_info: StatusInfo::None,
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
        };
        let SUITON_STATUS: BuffStatus = BuffStatus {
            id: 1002,
            name: String::from("Suiton"),
            owner_id: 0,
            duration_left_millisecond: 0,
            status_info: StatusInfo::None,
            duration_millisecond: 20000,
            is_raidwide: false,
            stacks: 1,
        };
        let MUG_STATUS: DebuffStatus = DebuffStatus {
            id: 1003,
            name: String::from("Mug"),
            owner_id: 0,
            potency: None,
            duration_left_millisecond: 0,
            status_info: StatusInfo::DamagePercent(5),
            duration_millisecond: 20000,
            is_raidwide: true,
            stacks: 1,
            snapshotted_buffs: None,
            snapshotted_debuffs: None,
        };
        let TRICK_ATTACK_STATUS: DebuffStatus = DebuffStatus {
            id: 1004,
            name: String::from("Trick Attack"),
            owner_id: 0,
            potency: None,
            duration_left_millisecond: 0,
            status_info: StatusInfo::DamagePercent(10),
            duration_millisecond: 15000,
            is_raidwide: false,
            stacks: 1,
            snapshotted_buffs: None,
            snapshotted_debuffs: None,
        };
        let KASSATSU_STATUS: BuffStatus = BuffStatus {
            id: 1005,
            name: String::from("Kassatsu"),
            owner_id: 0,
            duration_left_millisecond: 0,
            status_info: StatusInfo::None,
            duration_millisecond: 15000,
            is_raidwide: false,
            stacks: 1,
        };
        let TENCHIJIN_STATUS: BuffStatus = BuffStatus {
            id: 1006,
            name: String::from("Ten Chi Jin"),
            owner_id: 0,
            duration_left_millisecond: 0,
            status_info: StatusInfo::None,
            duration_millisecond: 6000,
            is_raidwide: false,
            stacks: 1,
        };
        let BUNSHIN_STATUS: BuffStatus = BuffStatus {
            id: 1007,
            name: String::from("Bunshin"),
            owner_id: 0,
            duration_left_millisecond: 0,
            status_info: StatusInfo::None,
            duration_millisecond: 45000,
            is_raidwide: false,
            stacks: 1,
        };
        let MEISUI_STATUS: BuffStatus = BuffStatus {
            id: 1008,
            name: String::from("Meisui"),
            owner_id: 0,
            duration_left_millisecond: 0,
            status_info: StatusInfo::None,
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
        };
        let BUNSHIN_CLONE_STATUS: BuffStatus = BuffStatus {
            id: 1009,
            name: String::from("Bunshin Clone"),
            owner_id: 0,
            duration_left_millisecond: 0,
            status_info: StatusInfo::None,
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 5,
        };
        let HUTON: AttackSkill = AttackSkill {
            id: 1000,
            name: String::from("Huton"),
            player_id: 0,
            potency: 0,
            trait_multiplier: 1.0,
            buff_events: vec![FfxivEvent::ApplyBuff(
                0,
                0,
                HUTON_STATUS.clone(),
                60000,
                60000,
                0,
            )],
            debuff_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1500,
            charging_time_millisecond: 1500,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
        };
        let RAITON: AttackSkill = AttackSkill {
            id: 1001,
            name: String::from("Raiton"),
            player_id: 0,
            potency: 650,
            trait_multiplier: 1.0,
            buff_events: vec![FfxivEvent::ApplyBuffStack(
                0,
                0,
                RAIJUREADY.clone(),
                30000,
                true,
                0,
            )],
            debuff_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1500,
            charging_time_millisecond: 1000,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(1023),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let RAIJU: AttackSkill = AttackSkill {
            id: 1002,
            name: String::from("Fleeting Raiju"),
            player_id: 0,
            potency: 560,
            trait_multiplier: 1.0,
            buff_events: vec![],
            debuff_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![ResourceRequirements::UseBuff(1001)],
            resource_created: ResourceTable::from([(0, 5)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
        };
        let HYOSHO: AttackSkill = AttackSkill {
            id: 1003,
            name: String::from("Hyosho Ranryu"),
            player_id: 0,
            potency: 1300,
            trait_multiplier: 1.3,
            buff_events: vec![],
            debuff_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1500,
            charging_time_millisecond: 1000,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![ResourceRequirements::UseBuff(1005)],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let SUITON: AttackSkill = AttackSkill {
            id: 1004,
            name: String::from("Suiton"),
            player_id: 0,
            potency: 500,
            trait_multiplier: 1.0,
            buff_events: vec![FfxivEvent::ApplyBuff(
                0,
                0,
                SUITON_STATUS.clone(),
                20000,
                20000,
                0,
            )],
            debuff_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1500,
            charging_time_millisecond: 1500,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(1023),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let SPINNING_EDGE: AttackSkill = AttackSkill {
            id: 1005,
            name: String::from("Spinning Edge"),
            player_id: 0,
            potency: 220,
            trait_multiplier: 1.0,
            buff_events: vec![],
            debuff_events: vec![],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: ResourceTable::from([(0, 5)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
        };
        let GUST_SLASH: AttackSkill = AttackSkill {
            id: 1006,
            name: String::from("Gust Slash"),
            player_id: 0,
            potency: 320,
            trait_multiplier: 1.0,
            buff_events: vec![],
            debuff_events: vec![],
            combo: Some(2),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: ResourceTable::from([(0, 5)]),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let AEOLIAN_EDGE: AttackSkill = AttackSkill {
            id: 1007,
            name: String::from("Aeolian Edge"),
            player_id: 0,
            potency: 440,
            trait_multiplier: 1.0,
            buff_events: vec![],
            debuff_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: ResourceTable::from([(0, 15)]),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let ARMOR_CRUSH: AttackSkill = AttackSkill {
            id: 1008,
            name: String::from("Armor Crush"),
            player_id: 0,
            potency: 420,
            trait_multiplier: 1.0,
            buff_events: vec![FfxivEvent::ApplyBuff(
                0,
                0,
                HUTON_STATUS.clone(),
                30000,
                60000,
                0,
            )],
            debuff_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: ResourceTable::from([(0, 15)]),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let MUG: AttackSkill = AttackSkill {
            id: 1009,
            name: String::from("Mug"),
            player_id: 0,
            potency: 150,
            trait_multiplier: 1.0,
            buff_events: vec![],
            debuff_events: vec![FfxivEvent::ApplyDebuff(
                0,
                MUG_STATUS.clone(),
                20000,
                20000,
                0,
            )],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 120000,
            resource_required: vec![],
            resource_created: ResourceTable::from([(0, 40)]),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let TRICK_ATTACK: AttackSkill = AttackSkill {
            id: 1010,
            name: String::from("Trick Attack"),
            player_id: 0,
            potency: 400,
            trait_multiplier: 1.0,
            buff_events: vec![],
            debuff_events: vec![FfxivEvent::ApplyDebuff(
                0,
                TRICK_ATTACK_STATUS.clone(),
                15000,
                15000,
                0,
            )],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 60000,
            resource_required: vec![ResourceRequirements::UseBuff(1002)],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let KASSATSU: AttackSkill = AttackSkill {
            id: 1011,
            name: String::from("Kassatsu"),
            player_id: 0,
            potency: 0,
            trait_multiplier: 1.0,
            buff_events: vec![FfxivEvent::ApplyBuff(
                0,
                0,
                KASSATSU_STATUS.clone(),
                15000,
                15000,
                0,
            )],
            debuff_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let BHAVACAKRA: AttackSkill = AttackSkill {
            id: 1012,
            name: String::from("Bhavakacra"),
            player_id: 0,
            potency: 350,
            trait_multiplier: 1.0,
            buff_events: vec![],
            debuff_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![ResourceRequirements::Resource(0, 50)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
        };
        let TENCHIJIN: AttackSkill = AttackSkill {
            id: 1013,
            name: String::from("Ten Chi Jin"),
            player_id: 0,
            potency: 0,
            trait_multiplier: 1.0,
            buff_events: vec![FfxivEvent::ApplyBuff(
                0,
                0,
                TENCHIJIN_STATUS.clone(),
                6000,
                6000,
                0,
            )],
            debuff_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 120000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let FUMA_TENCHIJIN: AttackSkill = AttackSkill {
            id: 1014,
            name: String::from("Fuma Shuriken-TCJ"),
            player_id: 0,
            potency: 450,
            trait_multiplier: 1.0,
            buff_events: vec![],
            debuff_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1000,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![ResourceRequirements::UseBuff(1006)],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let RAITON_TENCHIJIN: AttackSkill = AttackSkill {
            id: 1015,
            name: String::from("Raiton-TCJ"),
            player_id: 0,
            potency: 560,
            trait_multiplier: 1.0,
            buff_events: vec![],
            debuff_events: vec![],
            combo: Some(4),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1000,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let SUITON_TENCHIJIN: AttackSkill = AttackSkill {
            id: 1016,
            name: String::from("Suiton-TCJ"),
            player_id: 0,
            potency: 500,
            trait_multiplier: 1.0,
            buff_events: vec![],
            debuff_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1000,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let BUNSHIN: AttackSkill = AttackSkill {
            id: 1017,
            name: String::from("Bunshin"),
            player_id: 0,
            potency: 0,
            trait_multiplier: 1.0,
            buff_events: vec![FfxivEvent::ApplyBuff(
                0,
                0,
                BUNSHIN_STATUS.clone(),
                45000,
                45000,
                0,
            )],
            debuff_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 90000,
            resource_required: vec![ResourceRequirements::Resource(0, 50)],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let DREAM: AttackSkill = AttackSkill {
            id: 1018,
            name: String::from("Dream Within a Dream"),
            player_id: 0,
            potency: 450,
            trait_multiplier: 1.0,
            buff_events: vec![],
            debuff_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let PHANTOM_KAMAITACHI: AttackSkill = AttackSkill {
            id: 1019,
            name: String::from("Phantom Kamaitachi"),
            player_id: 0,
            potency: 600,
            trait_multiplier: 1.0,
            buff_events: vec![],
            debuff_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![ResourceRequirements::UseBuff(1007)],
            resource_created: ResourceTable::from([(0, 10)]),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let MEISUI: AttackSkill = AttackSkill {
            id: 1020,
            name: String::from("Meisui"),
            player_id: 0,
            potency: 0,
            trait_multiplier: 1.0,
            buff_events: vec![FfxivEvent::ApplyBuff(
                0,
                0,
                MEISUI_STATUS.clone(),
                30000,
                30000,
                0,
            )],
            debuff_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![ResourceRequirements::UseBuff(1002)],
            resource_created: ResourceTable::from([(0, 50)]),
            current_cooldown_millisecond: 120000,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let BHAVACAKRA_MEISUI: AttackSkill = AttackSkill {
            id: 1021,
            name: String::from("Bhavakacra-Meisui"),
            player_id: 0,
            potency: 500,
            trait_multiplier: 1.0,
            buff_events: vec![],
            debuff_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![
                ResourceRequirements::Resource(0, 50),
                ResourceRequirements::UseBuff(1008),
            ],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let BUNSHIN_STACK: AttackSkill = AttackSkill {
            id: 1022,
            name: String::from("Bunshin-Stack"),
            player_id: 0,
            potency: 150,
            trait_multiplier: 1.0,
            buff_events: vec![],
            debuff_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![ResourceRequirements::UseBuff(BUNSHIN_CLONE_STATUS.id)],
            resource_created: ResourceTable::from([(0, 5)]),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let MUDRA: AttackSkill = AttackSkill {
            id: 1023,
            name: String::from("Mudra"),
            player_id: 0,
            potency: 0,
            trait_multiplier: 1.0,
            buff_events: vec![],
            debuff_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 20000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 2,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };

        Self {
            huton: HUTON,
            raiton: RAITON,
            raiju: RAIJU,
            hyosho: HYOSHO,
            suiton: SUITON,
            spinning_edge: SPINNING_EDGE,
            gust_slash: GUST_SLASH,
            aeolian_edge: AEOLIAN_EDGE,
            armor_crush: ARMOR_CRUSH,
            mug: MUG,
            trick_attack: TRICK_ATTACK,
            kassatsu: KASSATSU,
            bhavacakra: BHAVACAKRA,
            tenchijin: TENCHIJIN,
            fuma_tenchijin: FUMA_TENCHIJIN,
            raiton_tenchijin: RAITON_TENCHIJIN,
            suiton_tenchijin: SUITON_TENCHIJIN,
            bunshin: BUNSHIN,
            dream: DREAM,
            phantom_kamaitachi: PHANTOM_KAMAITACHI,
            meisui: MEISUI,
            bhavacakra_meisui: BHAVACAKRA_MEISUI,
            bunshin_stack: BUNSHIN_STACK,
            mudra: MUDRA,
            huton_status: HUTON_STATUS,
            raijuready: RAIJUREADY,
            suiton_status: SUITON_STATUS,
            mug_status: MUG_STATUS,
            trick_attack_status: TRICK_ATTACK_STATUS,
            kassatsu_status: KASSATSU_STATUS,
            tenchijin_status: TENCHIJIN_STATUS,
            bunshin_status: BUNSHIN_STATUS,
            meisui_status: MEISUI_STATUS,
            bunshin_clone_status: BUNSHIN_CLONE_STATUS,
        }
    }
}

pub(crate) fn make_ninja_gcd_table() -> Vec<SkillPriorityInfo> {
    let db = NinjaDatabase::new();

    let ninja_gcd_priority_table: Vec<SkillPriorityInfo> = vec![
        SkillPriorityInfo {
            skill_id: db.fuma_tenchijin.get_id(),
            prerequisite: Some(SkillPrerequisite::HasBufforDebuff(1006)),
        },
        SkillPriorityInfo {
            skill_id: db.raiton_tenchijin.get_id(),
            prerequisite: Some(SkillPrerequisite::Combo(Some(3))),
        },
        SkillPriorityInfo {
            skill_id: db.suiton_tenchijin.get_id(),
            prerequisite: Some(SkillPrerequisite::Combo(Some(4))),
        },
        SkillPriorityInfo {
            skill_id: db.suiton.get_id(),
            prerequisite: Some(SkillPrerequisite::And(
                Box::new(SkillPrerequisite::RelatedSkillCooldownLessThan(1010, 17000)),
                Box::new(SkillPrerequisite::Not(Box::new(
                    SkillPrerequisite::HasBufforDebuff(1002),
                ))),
            )),
        },
        SkillPriorityInfo {
            skill_id: db.armor_crush.get_id(),
            prerequisite: Some(SkillPrerequisite::And(
                Box::new(SkillPrerequisite::BufforDebuffLessThan(1000, 8000)),
                Box::new(SkillPrerequisite::Combo(Some(2))),
            )),
        },
        SkillPriorityInfo {
            skill_id: db.phantom_kamaitachi.get_id(),
            prerequisite: Some(SkillPrerequisite::BufforDebuffLessThan(1007, 3000)),
        },
        SkillPriorityInfo {
            skill_id: db.hyosho.get_id(),
            prerequisite: Some(SkillPrerequisite::And(
                Box::new(SkillPrerequisite::HasBufforDebuff(1004)),
                Box::new(SkillPrerequisite::HasBufforDebuff(1005)),
            )),
        },
        SkillPriorityInfo {
            skill_id: db.raiton.get_id(),
            prerequisite: Some(SkillPrerequisite::HasStacks(1023, 2)),
        },
        SkillPriorityInfo {
            skill_id: db.aeolian_edge.get_id(),
            prerequisite: Some(SkillPrerequisite::And(
                Box::new(SkillPrerequisite::HasBufforDebuff(1004)),
                Box::new(SkillPrerequisite::And(
                    Box::new(SkillPrerequisite::Combo(Some(2))),
                    Box::new(SkillPrerequisite::And(
                        Box::new(SkillPrerequisite::HasResource2(1)),
                        Box::new(SkillPrerequisite::Not(Box::new(
                            SkillPrerequisite::HasBufforDebuff(1001),
                        ))),
                    )),
                )),
            )),
        },
        SkillPriorityInfo {
            skill_id: db.phantom_kamaitachi.get_id(),
            prerequisite: Some(SkillPrerequisite::And(
                Box::new(SkillPrerequisite::MillisecondsBeforeBurst(0)),
                Box::new(SkillPrerequisite::HasBufforDebuff(1007)),
            )),
        },
        SkillPriorityInfo {
            skill_id: db.raiju.get_id(),
            prerequisite: Some(SkillPrerequisite::HasBufforDebuff(1001)),
        },
        SkillPriorityInfo {
            skill_id: db.raiton.get_id(),
            prerequisite: Some(SkillPrerequisite::Or(
                Box::new(SkillPrerequisite::HasBufforDebuff(1004)),
                Box::new(SkillPrerequisite::HasBufforDebuff(1003)),
            )),
        },
        SkillPriorityInfo {
            skill_id: db.armor_crush.get_id(),
            prerequisite: Some(SkillPrerequisite::And(
                Box::new(SkillPrerequisite::Not(Box::new(
                    SkillPrerequisite::MillisecondsBeforeBurst(0),
                ))),
                Box::new(SkillPrerequisite::And(
                    Box::new(SkillPrerequisite::BufforDebuffLessThan(1000, 30000)),
                    Box::new(SkillPrerequisite::Combo(Some(2))),
                )),
            )),
        },
        SkillPriorityInfo {
            skill_id: db.aeolian_edge.get_id(),
            prerequisite: Some(SkillPrerequisite::Combo(Some(2))),
        },
        SkillPriorityInfo {
            skill_id: db.gust_slash.get_id(),
            prerequisite: Some(SkillPrerequisite::Combo(Some(1))),
        },
        SkillPriorityInfo {
            skill_id: db.spinning_edge.get_id(),
            prerequisite: None,
        },
    ];

    ninja_gcd_priority_table
}

pub(crate) fn make_ninja_ogcd_table() -> Vec<SkillPriorityInfo> {
    let db = NinjaDatabase::new();

    // TODO: calculate future ninki
    let ninja_ogcd_table: Vec<SkillPriorityInfo> = vec![
        SkillPriorityInfo {
            skill_id: db.bunshin.get_id(),
            prerequisite: Some(SkillPrerequisite::HasResource1(50)),
        },
        SkillPriorityInfo {
            skill_id: db.bhavacakra_meisui.get_id(),
            prerequisite: Some(SkillPrerequisite::Or(
                Box::new(SkillPrerequisite::HasBufforDebuff(1008)),
                Box::new(SkillPrerequisite::And(
                    Box::new(SkillPrerequisite::MillisecondsBeforeBurst(0)),
                    Box::new(SkillPrerequisite::HasResource1(50)),
                )),
            )),
        },
        SkillPriorityInfo {
            skill_id: db.bhavacakra.get_id(),
            prerequisite: Some(SkillPrerequisite::HasResource1(80)),
        },
        SkillPriorityInfo {
            skill_id: db.mug.get_id(),
            prerequisite: None,
        },
        SkillPriorityInfo {
            skill_id: db.trick_attack.get_id(),
            prerequisite: Some(SkillPrerequisite::HasBufforDebuff(1002)),
        },
        SkillPriorityInfo {
            skill_id: db.kassatsu.get_id(),
            prerequisite: None,
        },
        SkillPriorityInfo {
            skill_id: db.dream.get_id(),
            prerequisite: None,
        },
        SkillPriorityInfo {
            skill_id: db.tenchijin.get_id(),
            prerequisite: None,
        },
    ];

    ninja_ogcd_table
}

pub(crate) fn make_ninja_opener() -> Vec<Opener> {
    let db = NinjaDatabase::new();

    let ninja_opener: Vec<Opener> = vec![
        Opener::GcdOpener(db.suiton.get_id()),
        Opener::OgcdOpener((Some(db.kassatsu.get_id()), None)),
        Opener::GcdOpener(db.spinning_edge.get_id()),
        // TODO: Potion
        Opener::OgcdOpener((None, None)),
        Opener::GcdOpener(db.gust_slash.get_id()),
        Opener::OgcdOpener((Some(db.mug.get_id()), Some(db.bunshin.get_id()))),
        Opener::GcdOpener(db.phantom_kamaitachi.get_id()),
        Opener::OgcdOpener((Some(db.trick_attack.get_id()), Some(db.dream.get_id()))),
        Opener::GcdOpener(db.hyosho.get_id()),
        Opener::OgcdOpener((Some(db.tenchijin.get_id()), None)),
        Opener::GcdOpener(db.fuma_tenchijin.get_id()),
        Opener::OgcdOpener((None, None)),
        Opener::GcdOpener(db.raiton_tenchijin.get_id()),
        Opener::OgcdOpener((None, None)),
        Opener::GcdOpener(db.suiton_tenchijin.get_id()),
        Opener::OgcdOpener((Some(db.meisui.get_id()), None)),
        Opener::GcdOpener(db.raiton.get_id()),
        Opener::OgcdOpener((Some(db.bhavacakra_meisui.get_id()), None)),
        Opener::GcdOpener(db.raiju.get_id()),
        Opener::OgcdOpener((None, None)),
        Opener::GcdOpener(db.raiju.get_id()),
        Opener::OgcdOpener((None, None)),
        Opener::GcdOpener(db.aeolian_edge.get_id()),
        Opener::OgcdOpener((Some(db.bhavacakra.get_id()), None)),
        Opener::GcdOpener(db.raiju.get_id()),
    ];

    ninja_opener
}

pub(crate) fn make_ninja_skill_list(player_id: IdType) -> SkillTable<AttackSkill> {
    let db = NinjaDatabase::new();

    let ninja_skill_list: Vec<AttackSkill> = vec![
        db.huton.clone(),
        db.raiton.clone(),
        db.raiju.clone(),
        db.hyosho.clone(),
        db.suiton.clone(),
        db.spinning_edge.clone(),
        db.gust_slash.clone(),
        db.aeolian_edge.clone(),
        db.armor_crush.clone(),
        db.mug.clone(),
        db.trick_attack.clone(),
        db.mug.clone(),
        db.kassatsu.clone(),
        db.bhavacakra.clone(),
        db.tenchijin.clone(),
        db.fuma_tenchijin.clone(),
        db.raiton_tenchijin.clone(),
        db.suiton_tenchijin.clone(),
        db.bunshin.clone(),
        db.dream.clone(),
        db.phantom_kamaitachi.clone(),
        db.meisui.clone(),
        db.bhavacakra_meisui.clone(),
        db.bunshin_stack.clone(),
    ];

    make_skill_table(player_id, ninja_skill_list)
}

#[inline]
pub(crate) fn bunshin_trigger_gcd_ids() -> Vec<IdType> {
    let db = NinjaDatabase::new();

    vec![
        db.aeolian_edge.id,
        db.gust_slash.id,
        db.spinning_edge.id,
        db.armor_crush.id,
    ]
}

#[inline]
pub(crate) fn bunshin_clone_id() -> IdType {
    let db = NinjaDatabase::new();

    db.bunshin_status.id
}

#[inline]
pub(crate) fn bunshin_stack_id() -> IdType {
    let db = NinjaDatabase::new();
    db.bunshin_stack.id
}

pub(crate) fn get_huton_status(player_id: IdType) -> BuffStatus {
    let db = NinjaDatabase::new();
    let mut huton = db.huton_status.clone();
    huton.owner_id = player_id;
    huton.duration_left_millisecond = 55000;

    huton
}
