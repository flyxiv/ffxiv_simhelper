use crate::id_entity::IdEntity;
use crate::rotation::job_priorities::job_abilities::{make_opener, make_skill_table};
use crate::rotation::job_priorities::SkillTable;
use crate::rotation::priority_table::PriorityResult::True;
use crate::rotation::priority_table::SkillPrerequisite;
use crate::rotation::SkillPriorityInfo;
use crate::skill::attack_skill::AttackSkill;
use crate::skill::ResourceRequirements;
use crate::status::buff_status::BuffStatus;
use crate::status::status_apply::{ApplyInfo, StatusApply};
use crate::status::status_event::StatusApplyType;
use crate::status::status_info::StatusInfo;
use crate::IdType;
use lazy_static::lazy_static;

lazy_static! {
    static ref LIFE_SURGE_STATUS: BuffStatus = {
        BuffStatus {
            id: 800,
            name: String::from("Life Surge"),
            owner_id: 0,
            duration_left_millisecond: 0,
            status_info: StatusInfo::None,
            duration_millisecond: 5000,
            is_raidwide: false,
        }
    };
    static ref DISEMBOWEL_STATUS: BuffStatus = {
        BuffStatus {
            id: 801,
            name: String::from("Disembowel"),
            owner_id: 0,
            duration_left_millisecond: 0,
            status_info: StatusInfo::DamagePercent(10),
            duration_millisecond: 30000,
            is_raidwide: false,
        }
    };
    static ref LANCE_MASTERY: BuffStatus = {
        BuffStatus {
            id: 802,
            name: String::from("Lance Mastery"),
            owner_id: 0,
            duration_left_millisecond: 0,
            status_info: StatusInfo::None,
            duration_millisecond: 3000,
            is_raidwide: false,
        }
    };
    static ref DRACONIAN_FIRE: BuffStatus = {
        BuffStatus {
            id: 803,
            name: String::from("Draconian Fire"),
            owner_id: 0,
            duration_left_millisecond: 0,
            status_info: StatusInfo::None,
            duration_millisecond: 30000,
            is_raidwide: false,
        }
    };
    static ref LANCE_CHARGE_STATUS: BuffStatus = {
        BuffStatus {
            id: 804,
            name: String::from("Lance Charge"),
            owner_id: 0,
            duration_left_millisecond: 0,
            status_info: StatusInfo::DamagePercent(10),
            duration_millisecond: 20000,
            is_raidwide: false,
        }
    };
    static ref DIVE_READY: BuffStatus = {
        BuffStatus {
            id: 805,
            name: String::from("Dive Ready"),
            owner_id: 0,
            duration_left_millisecond: 0,
            status_info: StatusInfo::None,
            duration_millisecond: 15000,
            is_raidwide: false,
        }
    };
    static ref DRAGON_SIGHT_STATUS: BuffStatus = {
        BuffStatus {
            id: 806,
            name: String::from("Dragon Sight"),
            owner_id: 0,
            duration_left_millisecond: 0,
            status_info: StatusInfo::DamagePercent(10),
            duration_millisecond: 20000,
            is_raidwide: false,
        }
    };
    static ref BATTLE_LITANY_STATUS: BuffStatus = {
        BuffStatus {
            id: 807,
            name: String::from("Battle Litany"),
            owner_id: 0,
            duration_left_millisecond: 0,
            status_info: StatusInfo::CritHitRatePercent(10),
            duration_millisecond: 15000,
            is_raidwide: true,
        }
    };
    static ref LIFE_OF_THE_DRAGON: BuffStatus = {
        BuffStatus {
            id: 808,
            name: String::from("Life of the Dragon"),
            owner_id: 0,
            duration_left_millisecond: 0,
            status_info: StatusInfo::None,
            duration_millisecond: 30000,
            is_raidwide: false,
        }
    };

    static ref LIFE_SURGE: AttackSkill = AttackSkill {
        id: 800,
        name: String::from("Life Surge"),
        player_id: 0,
        potency: 0,
        trait_multiplier: 1.0,
        buff: Some(StatusApply::new(LIFE_SURGE_STATUS.clone(), 0, StatusApplyType::SelfBuff)),
        debuff: None,
        combo: None,
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 0,
        charging_time_millisecond: 0,
        is_speed_buffed: false,
        cooldown_millisecond: 0,
        resource_required: vec![],
        resource1_created: 0,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: None,
    };
    static ref TRUE_THRUST: AttackSkill = AttackSkill {
        id: 801,
        name: String::from("True Thrust"),
        player_id: 0,
        potency: 230,
        trait_multiplier: 1.0,
        buff: None,
        debuff: None,
        combo: Some(1),
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 2500,
        charging_time_millisecond: 0,
        is_speed_buffed: true,
        cooldown_millisecond: 0,
        resource_required: vec![],
        resource1_created: 0,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: None,
    };
    static ref RAIDEN_THRUST: AttackSkill = AttackSkill {
        id: 802,
        name: String::from("Raiden Thrust"),
        player_id: 0,
        potency: 280,
        trait_multiplier: 1.0,
        buff: None,
        debuff: None,
        combo: Some(1),
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 2500,
        charging_time_millisecond: 0,
        is_speed_buffed: true,
        cooldown_millisecond: 0,
        resource_required: vec![ResourceRequirements::UseStatus(803)],
        resource1_created: 0,
        resource2_created: 1,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: None,
    };
    static ref VORPAL_THRUST: AttackSkill = AttackSkill {
        id: 803,
        name: String::from("Vorpal Thrust"),
        player_id: 0,
        potency: 280,
        trait_multiplier: 1.0,
        buff: None,
        debuff: None,
        combo: Some(2),
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 2500,
        charging_time_millisecond: 0,
        is_speed_buffed: true,
        cooldown_millisecond: 0,
        resource_required: vec![],
        resource1_created: 0,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: None,
    };
    static ref DISEMBOWEL: AttackSkill = AttackSkill {
        id: 804,
        name: String::from("Disembowel"),
        player_id: 0,
        potency: 250,
        trait_multiplier: 1.0,
        buff: Some(StatusApply::new(DISEMBOWEL_STATUS.clone(), 0, StatusApplyType::SelfBuff)),
        debuff: None,
        combo: Some(3),
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 2500,
        charging_time_millisecond: 0,
        is_speed_buffed: true,
        cooldown_millisecond: 0,
        resource_required: vec![],
        resource1_created: 0,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: None,
    };
    static ref HEAVENS_THRUST: AttackSkill = AttackSkill {
        id: 805,
        name: String::from("Heaven's Thrust"),
        player_id: 0,
        potency: 480,
        trait_multiplier: 1.0,
        buff: None
        debuff: None,
        combo: Some(4),
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 2500,
        charging_time_millisecond: 0,
        is_speed_buffed: true,
        cooldown_millisecond: 0,
        resource_required: vec![],
        resource1_created: 0,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: None,
    };
    static ref CHAOTIC_SPRING: AttackSkill = AttackSkill {
        id: 806,
        name: String::from("Chaotic Spring"),
        player_id: 0,
        potency: 660,
        trait_multiplier: 1.0,
        buff: None
        debuff: None,
        combo: Some(5),
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 2500,
        charging_time_millisecond: 0,
        is_speed_buffed: true,
        cooldown_millisecond: 0,
        resource_required: vec![],
        resource1_created: 0,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: None,
    };
    static ref FANG_AND_CLAW: AttackSkill = AttackSkill {
        id: 807,
        name: String::from("Fang and Claw"),
        player_id: 0,
        potency: 300,
        trait_multiplier: 1.0,
        buff: Some(StatusApply::new(LANCE_MASTERY.clone(), 0, StatusApplyType::SelfBuff)),
        debuff: None,
        combo: Some(4),
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 2500,
        charging_time_millisecond: 0,
        is_speed_buffed: true,
        cooldown_millisecond: 0,
        resource_required: vec![],
        resource1_created: 0,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: None,
    };
    static ref WHEELING_THRUST: AttackSkill = AttackSkill {
        id: 808,
        name: String::from("Wheeling Thrust"),
        player_id: 0,
        potency: 300,
        trait_multiplier: 1.0,
        buff: Some(StatusApply::new(LANCE_MASTERY.clone(), 0, StatusApplyType::SelfBuff)),
        debuff: None,
        combo: Some(5),
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 2500,
        charging_time_millisecond: 0,
        is_speed_buffed: true,
        cooldown_millisecond: 0,
        resource_required: vec![],
        resource1_created: 0,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: None,
    };
    static ref FANG_AND_CLAW_PLUS: AttackSkill = AttackSkill {
        id: 809,
        name: String::from("Fang and Claw+"),
        player_id: 0,
        potency: 400,
        trait_multiplier: 1.0,
        buff: Some(StatusApply::new(DRACONIAN_FIRE.clone(), 0, StatusApplyType::SelfBuff)),
        debuff: None,
        combo: Some(4),
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 2500,
        charging_time_millisecond: 0,
        is_speed_buffed: true,
        cooldown_millisecond: 0,
        resource_required: vec![ResourceRequirements::UseStatus(802)],
        resource1_created: 0,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: None,
    };
    static ref WHEELING_THRUST_PLUS: AttackSkill = AttackSkill {
        id: 810,
        name: String::from("Wheeling Thrust+"),
        player_id: 0,
        potency: 400,
        trait_multiplier: 1.0,
        buff: Some(StatusApply::new(DRACONIAN_FIRE.clone(), 0, StatusApplyType::SelfBuff)),
        debuff: None,
        combo: Some(5),
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 2500,
        charging_time_millisecond: 0,
        is_speed_buffed: true,
        cooldown_millisecond: 0,
        resource_required: vec![ResourceRequirements::UseStatus(802)],
        resource1_created: 0,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: None,
    };
    static ref LANCE_CHARGE: AttackSkill = AttackSkill {
        id: 811,
        name: String::from("Lance Charge"),
        player_id: 0,
        potency: 0,
        trait_multiplier: 1.0,
        buff: Some(StatusApply::new(LANCE_CHARGE_STATUS.clone(), 0, StatusApplyType::SelfBuff)),
        debuff: None,
        combo: None,
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 0,
        charging_time_millisecond: 0,
        is_speed_buffed: false,
        cooldown_millisecond: 0,
        resource_required: vec![],
        resource1_created: 0,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: None,
    };
    static ref HEAVENS_THRUST_SURGE: AttackSkill = AttackSkill {
        id: 812,
        name: String::from("Heaven's Thrust + Surge"),
        player_id: 0,
        potency: 480,
        trait_multiplier: 1.0,
        buff: None
        debuff: None,
        combo: Some(4),
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 2500,
        charging_time_millisecond: 0,
        is_speed_buffed: true,
        cooldown_millisecond: 0,
        resource_required: vec![ResourceRequirements::UseStatus(800)],
        resource1_created: 0,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: None,
    };
    static ref FANG_AND_CLAW_PLUS_SURGE: AttackSkill = AttackSkill {
        id: 813,
        name: String::from("Fang and Claw+ + Surge"),
        player_id: 0,
        potency: 400,
        trait_multiplier: 1.0,
        buff: Some(StatusApply::new(DRACONIAN_FIRE.clone(), 0, StatusApplyType::SelfBuff)),
        debuff: None,
        combo: Some(4),
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 2500,
        charging_time_millisecond: 0,
        is_speed_buffed: true,
        cooldown_millisecond: 0,
        resource_required: vec![ResourceRequirements::UseStatus(800), ResourceRequirements::UseStatus(800)],
        resource1_created: 0,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: None,
    };
    static ref WHEELING_THRUST_PLUS_SURGE: AttackSkill = AttackSkill {
        id: 814,
        name: String::from("Wheeling Thrust+ + Surge"),
        player_id: 0,
        potency: 400,
        trait_multiplier: 1.0,
        buff: Some(StatusApply::new(DRACONIAN_FIRE.clone(), 0, StatusApplyType::SelfBuff)),
        debuff: None,
        combo: Some(5),
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 2500,
        charging_time_millisecond: 0,
        is_speed_buffed: true,
        cooldown_millisecond: 0,
        resource_required: vec![ResourceRequirements::UseStatus(800), ResourceRequirements::UseStatus(800)],
        resource1_created: 0,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: None,
    };
    static ref HIGH_JUMP: AttackSkill = AttackSkill {
        id: 815,
        name: String::from("High Jump"),
        player_id: 0,
        potency: 400,
        trait_multiplier: 1.0,
        buff: Some(StatusApply::new(DIVE_READY.clone(), 0, StatusApplyType::SelfBuff)),
        debuff: None,
        combo: None,
        delay_millisecond: Some(10000),
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 0,
        charging_time_millisecond: 0,
        is_speed_buffed: false,
        cooldown_millisecond: 30000,
        resource_required: vec![],
        resource1_created: 0,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: None,
    };
    static ref MIRAGE_DIVE: AttackSkill = AttackSkill {
        id: 816,
        name: String::from("Mirage Dive"),
        player_id: 0,
        potency: 200,
        trait_multiplier: 1.0,
        buff: None,
        debuff: None,
        combo: None,
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 0,
        charging_time_millisecond: 0,
        is_speed_buffed: false,
        cooldown_millisecond: 0,
        resource_required: vec![ResourceRequirements::UseStatus(805)],
        resource1_created: 1,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: None,
    };
    static ref DRAGON_SIGHT: AttackSkill = AttackSkill {
        id: 817,
        name: String::from("Dragon Sight"),
        player_id: 0,
        potency: 0,
        trait_multiplier: 1.0,
        buff: Some(StatusApply::new(DRAGON_SIGHT_STATUS.clone(), 1, StatusApplyType::ConnectHalfBuff(0))),
        debuff: None,
        combo: None,
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 0,
        charging_time_millisecond: 0,
        is_speed_buffed: false,
        cooldown_millisecond: 120000,
        resource_required: vec![],
        resource1_created: 0,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: None,
    };
    static ref SPINESHATTER_DIVE: AttackSkill = AttackSkill {
        id: 818,
        name: String::from("Spineshatter Dive"),
        player_id: 0,
        potency: 250,
        trait_multiplier: 1.0,
        buff: None,
        debuff: None,
        combo: None,
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 0,
        charging_time_millisecond: 0,
        is_speed_buffed: false,
        cooldown_millisecond: 60000,
        resource_required: vec![],
        resource1_created: 0,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 2,
        stack_skill_id: None,
    };
    static ref DRAGONFIRE_DIVE: AttackSkill = AttackSkill {
        id: 819,
        name: String::from("Dragonfire Dive"),
        player_id: 0,
        potency: 300,
        trait_multiplier: 1.0,
        buff: None,
        debuff: None,
        combo: None,
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 0,
        charging_time_millisecond: 0,
        is_speed_buffed: false,
        cooldown_millisecond: 120000,
        resource_required: vec![],
        resource1_created: 0,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: None,
    };
    static ref BATTLE_LITANY: AttackSkill = AttackSkill {
        id: 820,
        name: String::from("Battle Litany"),
        player_id: 0,
        potency: 0,
        trait_multiplier: 1.0,
        buff: Some(StatusApply::new(BATTLE_LITANY_STATUS.clone(), 1, StatusApplyType::RaidBuff)),
        debuff: None,
        combo: None,
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 0,
        charging_time_millisecond: 0,
        is_speed_buffed: false,
        cooldown_millisecond: 120000,
        resource_required: vec![],
        resource1_created: 0,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: None,
    };
    static ref GEIRSKOGUL: AttackSkill = AttackSkill {
        id: 821,
        name: String::from("Geirskogul"),
        player_id: 0,
        potency: 260,
        trait_multiplier: 1.0,
        buff: None,
        debuff: None,
        combo: None,
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 0,
        charging_time_millisecond: 0,
        is_speed_buffed: false,
        cooldown_millisecond: 30000,
        resource_required: vec![],
        resource1_created: 0,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: None,
    };
    static ref GEIRSKOGUL_PLUS: AttackSkill = AttackSkill {
        id: 822,
        name: String::from("Geirskogul+"),
        player_id: 0,
        potency: 260,
        trait_multiplier: 1.0,
        buff: Some(StatusApply::new(LIFE_OF_THE_DRAGON.clone(), 0, StatusApplyType::SelfBuff)),
        debuff: None,
        combo: None,
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 0,
        charging_time_millisecond: 0,
        is_speed_buffed: false,
        cooldown_millisecond: 30000,
        resource_required: vec![],
        resource1_created: 0,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: Some(821),
    };
    static ref NASTROND: AttackSkill = AttackSkill {
        id: 823,
        name: String::from("Nastrond"),
        player_id: 0,
        potency: 360,
        trait_multiplier: 1.0,
        buff: None,
        debuff: None,
        combo: None,
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 0,
        charging_time_millisecond: 0,
        is_speed_buffed: false,
        cooldown_millisecond: 10000,
        resource_required: vec![ResourceRequirements::CheckStatus(808)],
        resource1_created: 0,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: None,
    };
    static ref STARDIVER: AttackSkill = AttackSkill {
        id: 824,
        name: String::from("Stardiver"),
        player_id: 0,
        potency: 620,
        trait_multiplier: 1.0,
        buff: None,
        debuff: None,
        combo: None,
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 0,
        charging_time_millisecond: 0,
        is_speed_buffed: false,
        cooldown_millisecond: 30000,
        resource_required: vec![ResourceRequirements::CheckStatus(808)],
        resource1_created: 0,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: None,
    };
    static ref WYRMWIND_THRUST: AttackSkill = AttackSkill {
        id: 825,
        name: String::from("Wyrmwind Thrust"),
        player_id: 0,
        potency: 420,
        trait_multiplier: 1.0,
        buff: None,
        debuff: None,
        combo: None,
        delay_millisecond: None,
        casting_time_millisecond: 0,
        gcd_cooldown_millisecond: 0,
        charging_time_millisecond: 0,
        is_speed_buffed: false,
        cooldown_millisecond: 30000,
        resource_required: vec![ResourceRequirements::StackResource2(2)],
        resource1_created: 0,
        resource2_created: 0,
        current_cooldown_millisecond: 0,
        stacks: 1,
        stack_skill_id: None,
    };
}

pub(crate) fn make_dragoon_gcd_table() -> Vec<SkillPriorityInfo> {
    vec![
        SkillPriorityInfo {
            skill_id: HEAVENS_THRUST_SURGE.get_id(),
            prerequisite: Some(SkillPrerequisite::And(
                Box::new(SkillPrerequisite::HasBufforDebuff(800)),
                Box::new(SkillPrerequisite::Combo(Some(2))),
            )),
        },
        SkillPriorityInfo {
            skill_id: WHEELING_THRUST_PLUS_SURGE.get_id(),
            prerequisite: Some(SkillPrerequisite::And(
                Box::new(SkillPrerequisite::HasBufforDebuff(802)),
                Box::new(SkillPrerequisite::And(
                    Box::new(SkillPrerequisite::Combo(Some(5))),
                    Box::new(SkillPrerequisite::HasBufforDebuff(800)),
                )),
            )),
        },
        SkillPriorityInfo {
            skill_id: FANG_AND_CLAW_PLUS_SURGE.get_id(),
            prerequisite: Some(SkillPrerequisite::And(
                Box::new(SkillPrerequisite::HasBufforDebuff(802)),
                Box::new(SkillPrerequisite::And(
                    Box::new(SkillPrerequisite::Combo(Some(4))),
                    Box::new(SkillPrerequisite::HasBufforDebuff(800)),
                )),
            )),
        },
        SkillPriorityInfo {
            skill_id: WHEELING_THRUST_PLUS.get_id(),
            prerequisite: Some(SkillPrerequisite::And(
                Box::new(SkillPrerequisite::HasBufforDebuff(802)),
                Box::new(SkillPrerequisite::Combo(Some(5))),
            )),
        },
        SkillPriorityInfo {
            skill_id: FANG_AND_CLAW_PLUS.get_id(),
            prerequisite: Some(SkillPrerequisite::And(
                Box::new(SkillPrerequisite::HasBufforDebuff(802)),
                Box::new(SkillPrerequisite::Combo(Some(4))),
            )),
        },
        SkillPriorityInfo {
            skill_id: WHEELING_THRUST.get_id(),
            prerequisite: Some(SkillPrerequisite::Combo(Some(5))),
        },
        SkillPriorityInfo {
            skill_id: FANG_AND_CLAW.get_id(),
            prerequisite: Some(SkillPrerequisite::Combo(Some(4))),
        },
        SkillPriorityInfo {
            skill_id: CHAOTIC_SPRING.get_id(),
            prerequisite: Some(SkillPrerequisite::Combo(Some(3))),
        },
        SkillPriorityInfo {
            skill_id: DISEMBOWEL.get_id(),
            prerequisite: Some(SkillPrerequisite::And(
                Box::new(SkillPrerequisite::Combo(Some(1))),
                Box::new(SkillPrerequisite::BufforDebuffLessThan(801, 10000)),
            )),
        },
        SkillPriorityInfo {
            skill_id: HEAVENS_THRUST.get_id(),
            prerequisite: Some(SkillPrerequisite::Combo(Some(2))),
        },
        SkillPriorityInfo {
            skill_id: VORPAL_THRUST.get_id(),
            prerequisite: Some(SkillPrerequisite::Combo(Some(1))),
        },
        SkillPriorityInfo {
            skill_id: RAIDEN_THRUST.get_id(),
            prerequisite: Some(SkillPrerequisite::HasBufforDebuff(DRACONIAN_FIRE.get_id())),
        },
        SkillPriorityInfo {
            skill_id: TRUE_THRUST.get_id(),
            prerequisite: None,
        },
    ]
}

pub(crate) fn make_dragoon_ogcd_table() -> Vec<SkillPriorityInfo> {
    vec![
        SkillPriorityInfo {
            skill_id: NASTROND.get_id(),
            prerequisite: Some(SkillPrerequisite::BufforDebuffLessThan(
                BATTLE_LITANY.get_id(),
                12000,
            )),
        },
        SkillPriorityInfo {
            skill_id: STARDIVER.get_id(),
            prerequisite: Some(SkillPrerequisite::BufforDebuffLessThan(
                BATTLE_LITANY.get_id(),
                12000,
            )),
        },
        SkillPriorityInfo {
            skill_id: WYRMWIND_THRUST.get_id(),
            prerequisite: Some(SkillPrerequisite::HasBufforDebuff(DRACONIAN_FIRE.get_id())),
        },
        SkillPriorityInfo {
            skill_id: BATTLE_LITANY.get_id(),
            prerequisite: None,
        },
        SkillPriorityInfo {
            skill_id: DRAGON_SIGHT.get_id(),
            prerequisite: None,
        },
        SkillPriorityInfo {
            skill_id: LANCE_CHARGE.get_id(),
            prerequisite: None,
        },
        SkillPriorityInfo {
            skill_id: MIRAGE_DIVE.get_id(),
            prerequisite: Some(SkillPrerequisite::Or(
                Box::new(SkillPrerequisite::And(
                    Box::new(SkillPrerequisite::Not(Box::new(
                        SkillPrerequisite::HasResource1(2),
                    ))),
                    Box::new(SkillPrerequisite::RelatedSkillCooldownLessThan(
                        LANCE_CHARGE.get_id(),
                        20000,
                    )),
                )),
                Box::new(SkillPrerequisite::BufforDebuffLessThan(
                    DIVE_READY.get_id(),
                    3000,
                )),
            )),
        },
        SkillPriorityInfo {
            skill_id: GEIRSKOGUL_PLUS.get_id(),
            prerequisite: Some(SkillPrerequisite::HasResource1(2)),
        },
        SkillPriorityInfo {
            skill_id: HIGH_JUMP.get_id(),
            prerequisite: None,
        },
        SkillPriorityInfo {
            skill_id: LIFE_SURGE.get_id(),
            prerequisite: Some(SkillPrerequisite::And(
                Box::new(SkillPrerequisite::MillisecondsBeforeBurst(0)),
                Box::new(SkillPrerequisite::Or(
                    Box::new(SkillPrerequisite::Combo(Some(2))),
                    Box::new(SkillPrerequisite::HasBufforDebuff(LANCE_MASTERY.id)),
                )),
            )),
        },
        SkillPriorityInfo {
            skill_id: SPINESHATTER_DIVE.get_id(),
            prerequisite: Some(SkillPrerequisite::RelatedSkillCooldownLessThan(
                SPINESHATTER_DIVE.get_id(),
                3000,
            )),
        },
        SkillPriorityInfo {
            skill_id: WYRMWIND_THRUST.get_id(),
            prerequisite: Some(SkillPrerequisite::HasBufforDebuff(LANCE_CHARGE.get_id())),
        },
        SkillPriorityInfo {
            skill_id: DRAGONFIRE_DIVE.get_id(),
            prerequisite: None,
        },
        SkillPriorityInfo {
            skill_id: STARDIVER.get_id(),
            prerequisite: None,
        },
        SkillPriorityInfo {
            skill_id: NASTROND.get_id(),
            prerequisite: None,
        },
        SkillPriorityInfo {
            skill_id: LIFE_SURGE.get_id(),
            prerequisite: Some(SkillPrerequisite::And(
                Box::new(SkillPrerequisite::RelatedSkillCooldownLessThan(
                    LIFE_SURGE.get_id(),
                    20000,
                )),
                Box::new(SkillPrerequisite::Combo(Some(2))),
            )),
        },
    ]
}

pub(crate) fn make_dragoon_opener(player_id: IdType) -> Vec<Option<AttackSkill>> {
    let mut dragoon_opener: Vec<Option<AttackSkill>> = vec![
        Some(TRUE_THRUST.clone()),
        None,
        None,
        Some(DISEMBOWEL.clone()),
        Some(LANCE_CHARGE.clone()),
        Some(DRAGON_SIGHT.clone()),
        Some(CHAOTIC_SPRING.clone()),
        Some(BATTLE_LITANY.clone()),
        Some(HIGH_JUMP.clone()),
        Some(WHEELING_THRUST.clone()),
        Some(GEIRSKOGUL.clone()),
        Some(LIFE_SURGE.clone()),
        Some(FANG_AND_CLAW_PLUS_SURGE.clone()),
        Some(SPINESHATTER_DIVE.clone()),
        Some(DRAGONFIRE_DIVE.clone()),
        Some(RAIDEN_THRUST.clone()),
        Some(SPINESHATTER_DIVE.clone()),
        Some(MIRAGE_DIVE.clone()),
        Some(VORPAL_THRUST.clone()),
        None,
        Some(LIFE_SURGE.clone()),
        Some(HEAVENS_THRUST.clone()),
    ];

    make_opener(player_id, dragoon_opener)
}

pub(crate) fn make_dragoon_skill_list(player_id: IdType) -> SkillTable<AttackSkill> {
    let mut dragoon_skill_list: Vec<AttackSkill> = vec![
        LIFE_SURGE.clone(),
        TRUE_THRUST.clone(),
        RAIDEN_THRUST.clone(),
        VORPAL_THRUST.clone(),
        DISEMBOWEL.clone(),
        HEAVENS_THRUST.clone(),
        CHAOTIC_SPRING.clone(),
        FANG_AND_CLAW.clone(),
        WHEELING_THRUST.clone(),
        FANG_AND_CLAW_PLUS.clone(),
        WHEELING_THRUST_PLUS.clone(),
        LANCE_CHARGE.clone(),
        HEAVENS_THRUST_SURGE.clone(),
        FANG_AND_CLAW_PLUS_SURGE.clone(),
        WHEELING_THRUST_PLUS_SURGE.clone(),
        HIGH_JUMP.clone(),
        MIRAGE_DIVE.clone(),
        DRAGON_SIGHT.clone(),
        SPINESHATTER_DIVE.clone(),
        DRAGONFIRE_DIVE.clone(),
        BATTLE_LITANY.clone(),
        GEIRSKOGUL.clone(),
        GEIRSKOGUL_PLUS.clone(),
        NASTROND.clone(),
        STARDIVER.clone(),
        WYRMWIND_THRUST.clone(),
    ];

    make_skill_table(player_id, dragoon_skill_list)
}

pub(crate) fn get_dragoon_crit_skill_ids() -> Vec<IdType> {
    vec![
        FANG_AND_CLAW_PLUS_SURGE.get_id(),
        WHEELING_THRUST_PLUS_SURGE.get_id(),
        HEAVENS_THRUST_SURGE.get_id(),
    ]
}
