use crate::event::ffxiv_event::FfxivEvent::{ApplyBuff, ApplyDebuff};
use crate::id_entity::IdEntity;
use crate::jobs_skill_data::PotionSkill;
use crate::rotation::SkillTable;
use crate::skill::attack_skill::AttackSkill;
use crate::skill::damage_category::DamageCategory;
use crate::skill::make_skill_table;
use crate::skill::use_type::UseType;
use crate::skill::ResourceRequirements::{Resource, UseBuff};
use crate::status::buff_status::BuffStatus;
use crate::status::debuff_status::DebuffStatus;
use crate::status::status_info::StatusInfo;
use crate::types::PlayerIdType;
use std::collections::HashMap;

pub(crate) struct SamuraiDatabase {
    pub(crate) gyofu: AttackSkill,
    pub(crate) jinpu: AttackSkill,
    pub(crate) gekko: AttackSkill,
    pub(crate) shifu: AttackSkill,
    pub(crate) kasha: AttackSkill,
    pub(crate) yukikaze: AttackSkill,
    pub(crate) hissatsu_shinten: AttackSkill,
    pub(crate) hissatsu_senei: AttackSkill,
    pub(crate) meikyo_shisui: AttackSkill,
    pub(crate) gekko_meikyo: AttackSkill,
    pub(crate) kasha_meikyo: AttackSkill,
    pub(crate) yuki_meikyo: AttackSkill,
    pub(crate) ikishoten: AttackSkill,
    pub(crate) hagakure: AttackSkill,
    pub(crate) kaeshi_tendo_setsugekka: AttackSkill,
    pub(crate) ogi_namikiri: AttackSkill,
    pub(crate) kaeshi_namikiri: AttackSkill,
    pub(crate) higanbana: AttackSkill,
    pub(crate) midare_setsugekka: AttackSkill,
    pub(crate) shoha: AttackSkill,
    pub(crate) higanbana_two: AttackSkill,
    pub(crate) higanbana_three: AttackSkill,
    pub(crate) zanshin: AttackSkill,
    pub(crate) tendo_setsugekka: AttackSkill,
    pub(crate) kaeshi_setsugekka: AttackSkill,

    pub(crate) higanbana_dot: DebuffStatus,
    pub(crate) meikyo_shisui_buff: BuffStatus,

    pub(crate) potion: AttackSkill,
}

impl SamuraiDatabase {
    pub(crate) fn new(player_id: PlayerIdType) -> Self {
        let meikyo_shisui_buff: BuffStatus = BuffStatus {
            id: 1100,
            name: String::from("Meikyo Shisui"),
            stacks: 3,
            max_stacks: 3,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 15000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let tendo_setsugekka_used: BuffStatus = BuffStatus {
            id: 1101,
            name: String::from("Tendo Setsugekka Used"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let ogi_namikiri_ready: BuffStatus = BuffStatus {
            id: 1102,
            name: String::from("Ogi Namikiri Ready"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let fugetsu: BuffStatus = BuffStatus {
            id: 1103,
            name: String::from("Fugetsu"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(13)],
            duration_millisecond: 40000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let fuka: BuffStatus = BuffStatus {
            id: 1104,
            name: String::from("Fuka"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::SpeedPercent(13)],
            duration_millisecond: 40000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let higanbana_dot: DebuffStatus = DebuffStatus {
            id: 1105,
            name: String::from("Higanbana"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            damage_skill_id: Some(1119),
            potency: Some(50),
            trait_percent: Some(100),
            damage_category: Some(DamageCategory::PhysicalDot),
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 60000,
            is_raidwide: false,
            snapshotted_infos: Default::default(),
        };

        let ogi_namikiri_used: BuffStatus = BuffStatus {
            id: 1106,
            name: String::from("Ogi Namikiri Used"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 3000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let zanshin_ready: BuffStatus = BuffStatus {
            id: 1108,
            name: String::from("Zanshin Ready"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };

        let tendo: BuffStatus = BuffStatus {
            id: 1109,
            name: String::from("Tendo"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let midare_used: BuffStatus = BuffStatus {
            id: 1107,
            name: String::from("Midare Used"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };

        let gyofu: AttackSkill = AttackSkill {
            id: 1100,
            name: String::from("Gyofu"),
            player_id,
            potency: 240,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(2),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 5)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let jinpu: AttackSkill = AttackSkill {
            id: 1101,
            name: String::from("Jinpu"),
            player_id,
            potency: 300,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                fugetsu.clone(),
                40000,
                40000,
                0,
            )],
            proc_events: vec![],
            combo: Some(3),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 5)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let gekko: AttackSkill = AttackSkill {
            id: 1102,
            name: String::from("Gekko"),
            player_id,
            potency: 420,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 10), (2, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };
        let shifu: AttackSkill = AttackSkill {
            id: 1103,
            name: String::from("Shifu"),
            player_id,
            potency: 300,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                fuka.clone(),
                40000,
                40000,
                0,
            )],
            proc_events: vec![],
            combo: Some(4),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 5)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let kasha: AttackSkill = AttackSkill {
            id: 1104,
            name: String::from("Kasha"),
            player_id,
            potency: 420,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 10), (3, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let yukikaze: AttackSkill = AttackSkill {
            id: 1105,
            name: String::from("Yukikaze"),
            player_id,
            potency: 340,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 15), (4, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let hissatsu_shinten: AttackSkill = AttackSkill {
            id: 1106,
            name: String::from("Hissatsu: Shinten"),
            player_id,
            potency: 250,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(0, 25)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let hissatsu_senei: AttackSkill = AttackSkill {
            id: 1107,
            name: String::from("Hissatsu: Senei"),
            player_id,
            potency: 860,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 60000,
            resource_required: vec![Resource(0, 25)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let meikyo_shisui: AttackSkill = AttackSkill {
            id: 1108,
            name: String::from("Meikyo Shisui"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    meikyo_shisui_buff.clone(),
                    20000,
                    20000,
                    0,
                ),
                ApplyBuff(player_id, player_id, tendo.clone(), 30000, 30000, 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 55000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 2,
            max_stacks: 2,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let kaeshi_tendo_setsugekka: AttackSkill = AttackSkill {
            id: 1109,
            name: String::from("Kaeshi Tendo Setsugekka"),
            player_id,
            potency: 1020,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(tendo_setsugekka_used.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: true,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let gekko_meikyo: AttackSkill = AttackSkill {
            id: 1110,
            name: String::from("Gekko"),
            player_id,
            potency: 420,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                fugetsu.clone(),
                40000,
                40000,
                0,
            )],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(meikyo_shisui_buff.get_id())],
            resource_created: HashMap::from([(0, 10), (2, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let kasha_meikyo: AttackSkill = AttackSkill {
            id: 1111,
            name: String::from("Kasha"),
            player_id,
            potency: 420,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                fuka.clone(),
                40000,
                40000,
                0,
            )],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(meikyo_shisui_buff.get_id())],
            resource_created: HashMap::from([(0, 10), (3, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let yuki_meikyo: AttackSkill = AttackSkill {
            id: 1112,
            name: String::from("Yukikaze"),
            player_id,
            potency: 340,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 30000,
            resource_required: vec![UseBuff(meikyo_shisui_buff.get_id())],
            resource_created: HashMap::from([(0, 15), (4, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let ikishoten: AttackSkill = AttackSkill {
            id: 1113,
            name: String::from("Ikishoten"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    ogi_namikiri_ready.clone(),
                    30000,
                    30000,
                    0,
                ),
                ApplyBuff(player_id, player_id, zanshin_ready.clone(), 30000, 30000, 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 120000,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 50)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let hagakure: AttackSkill = AttackSkill {
            id: 1114,
            name: String::from("Hagakure"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 10000,
            resource_required: vec![Resource(4, 1)],
            resource_created: HashMap::from([(0, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let midare_setsugekka: AttackSkill = AttackSkill {
            id: 1115,
            name: String::from("Midare Setsugekka"),
            player_id,
            potency: 700,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                midare_used.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 1000,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(2, 1), Resource(3, 1), Resource(4, 1)],
            resource_created: HashMap::from([(1, 1)]),
            is_guaranteed_crit: true,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let ogi_namikiri: AttackSkill = AttackSkill {
            id: 1116,
            name: String::from("Ogi Namikiri"),
            player_id,
            potency: 900,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                ogi_namikiri_used.clone(),
                3000,
                3000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 1000,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(ogi_namikiri_ready.get_id())],
            resource_created: HashMap::from([(1, 1)]),
            is_guaranteed_crit: true,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        let kaeshi_namikiri: AttackSkill = AttackSkill {
            id: 1117,
            name: String::from("Kaeshi: Namikiri"),
            player_id,
            potency: 900,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(ogi_namikiri_used.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: true,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        let higanbana_one: AttackSkill = AttackSkill {
            id: 1118,
            name: String::from("Higanbana"),
            player_id,
            potency: 200,
            trait_percent: 100,
            additional_skill_events: vec![ApplyDebuff(
                player_id,
                higanbana_dot.clone(),
                60000,
                60000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 1000,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(2, 1)],
            resource_created: HashMap::from([(1, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        let higanbana_two: AttackSkill = AttackSkill {
            id: 1119,
            name: String::from("Higanbana"),
            player_id,
            potency: 200,
            trait_percent: 100,
            additional_skill_events: vec![ApplyDebuff(
                player_id,
                higanbana_dot.clone(),
                60000,
                60000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 1000,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(3, 1)],
            resource_created: HashMap::from([(1, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let higanbana_three: AttackSkill = AttackSkill {
            id: 1120,
            name: String::from("Higanbana"),
            player_id,
            potency: 200,
            trait_percent: 100,
            additional_skill_events: vec![ApplyDebuff(
                player_id,
                higanbana_dot.clone(),
                60000,
                60000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 1000,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(4, 1)],
            resource_created: HashMap::from([(1, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        let shoha: AttackSkill = AttackSkill {
            id: 1121,
            name: String::from("Shoha"),
            player_id,
            potency: 640,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(1, 3)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let zanshin: AttackSkill = AttackSkill {
            id: 1122,
            name: String::from("Zanshin"),
            player_id,
            potency: 900,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(0, 50), UseBuff(zanshin_ready.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        let tendo_setsugekka: AttackSkill = AttackSkill {
            id: 1123,
            name: String::from("Tendo Setsugekka"),
            player_id,
            potency: 1020,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                tendo_setsugekka_used.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 1000,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![
                UseBuff(tendo.id),
                Resource(2, 1),
                Resource(3, 1),
                Resource(4, 1),
            ],
            resource_created: HashMap::from([(1, 1)]),
            is_guaranteed_crit: true,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let kaeshi_setsugekka: AttackSkill = AttackSkill {
            id: 1124,
            name: String::from("Kaeshi Setsugekka"),
            player_id,
            potency: 700,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(midare_used.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: true,
            current_cooldown_millisecond: 0,
            stacks: 1,
            max_stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        let potion_skill = PotionSkill::new(player_id);

        SamuraiDatabase {
            gyofu,
            jinpu,
            gekko,
            shifu,
            kasha,
            yukikaze,
            hissatsu_shinten,
            hissatsu_senei,
            meikyo_shisui,
            gekko_meikyo,
            kasha_meikyo,
            yuki_meikyo,
            ikishoten,
            hagakure,
            kaeshi_tendo_setsugekka,
            ogi_namikiri,
            kaeshi_namikiri,
            higanbana: higanbana_one,
            midare_setsugekka,
            shoha,
            higanbana_two,
            higanbana_three,
            zanshin,
            tendo_setsugekka,
            kaeshi_setsugekka,

            higanbana_dot,
            meikyo_shisui_buff,

            potion: potion_skill.potion,
        }
    }
}

pub(crate) fn make_samurai_skill_list(player_id: PlayerIdType) -> SkillTable<AttackSkill> {
    let db = SamuraiDatabase::new(player_id);

    let samurai_skill_list: Vec<AttackSkill> = vec![
        db.gyofu,
        db.jinpu,
        db.gekko,
        db.shifu,
        db.kasha,
        db.yukikaze,
        db.hissatsu_shinten,
        db.hissatsu_senei,
        db.meikyo_shisui,
        db.gekko_meikyo,
        db.kasha_meikyo,
        db.yuki_meikyo,
        db.ikishoten,
        db.hagakure,
        db.kaeshi_tendo_setsugekka,
        db.ogi_namikiri,
        db.kaeshi_namikiri,
        db.higanbana,
        db.midare_setsugekka,
        db.shoha,
        db.higanbana_two,
        db.higanbana_three,
        db.zanshin,
        db.tendo_setsugekka,
        db.kaeshi_setsugekka,
        db.potion,
    ];

    make_skill_table(samurai_skill_list)
}
