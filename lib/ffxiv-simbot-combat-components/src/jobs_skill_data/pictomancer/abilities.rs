use crate::event::ffxiv_event::FfxivEvent::{ApplyBuff, ApplyRaidBuff};
use crate::id_entity::IdEntity;
use crate::jobs_skill_data::pictomancer::combat_resources::HARD_GCD_STACK_ID;
use crate::jobs_skill_data::PotionSkill;
use crate::rotation::SkillTable;
use crate::skill::attack_skill::AttackSkill;
use crate::skill::make_skill_table;
use crate::skill::use_type::UseType;
use crate::skill::ResourceRequirements::{Resource, UseBuff};
use crate::status::buff_status::BuffStatus;
use crate::status::status_info::StatusInfo;
use crate::types::PlayerIdType;
use std::collections::HashMap;

pub(crate) struct PictomancerDatabase {
    pub(crate) fire_in_red: AttackSkill,
    pub(crate) aero_in_green: AttackSkill,
    pub(crate) water_in_blue: AttackSkill,
    pub(crate) living_muse: AttackSkill,
    pub(crate) creature_shot: AttackSkill,
    pub(crate) mog_of_the_ages: AttackSkill,
    pub(crate) pom_motif: AttackSkill,
    pub(crate) pom_muse: AttackSkill,
    pub(crate) winged_motif: AttackSkill,
    pub(crate) winged_muse: AttackSkill,
    pub(crate) hammer_motif: AttackSkill,
    pub(crate) subtractive_pallete: AttackSkill,
    pub(crate) striking_muse: AttackSkill,
    pub(crate) blizzard_in_cyan: AttackSkill,
    pub(crate) stone_in_yellow: AttackSkill,
    pub(crate) thunder_in_magenta: AttackSkill,
    pub(crate) starry_sky_motif: AttackSkill,
    pub(crate) starry_muse: AttackSkill,
    pub(crate) holy_in_white: AttackSkill,
    pub(crate) hammer_stamp: AttackSkill,
    pub(crate) hammer_brush: AttackSkill,
    pub(crate) polishing_hammer: AttackSkill,
    pub(crate) comet_in_black: AttackSkill,
    pub(crate) rainbow_drip: AttackSkill,
    pub(crate) rainbow_drip_proc: AttackSkill,
    pub(crate) claw_motif: AttackSkill,
    pub(crate) maw_motif: AttackSkill,
    pub(crate) clawed_muse: AttackSkill,
    pub(crate) fanged_muse: AttackSkill,
    pub(crate) retribution_of_the_madeem: AttackSkill,
    pub(crate) star_prism: AttackSkill,
    pub(crate) subtractive_pallete_proc: AttackSkill,
    pub(crate) comet_in_black_hyperphantasia: AttackSkill,
    pub(crate) blizzard_in_cyan_hyperphantasia: AttackSkill,
    pub(crate) stone_in_yellow_hyperphantasia: AttackSkill,
    pub(crate) thunder_in_magenta_hyperphantasia: AttackSkill,

    pub(crate) potion: AttackSkill,
}
impl PictomancerDatabase {
    pub(crate) fn new(player_id: PlayerIdType) -> Self {
        let starry_muse_buff: BuffStatus = {
            BuffStatus {
                id: 2000,
                name: String::from("Starry Muse"),
                owner_id: player_id,
                duration_left_millisecond: 0,
                status_info: vec![StatusInfo::DamagePercent(5)],
                duration_millisecond: 20000,
                is_raidwide: true,
                stacks: 1,
                max_stacks: 1,
                trigger_proc_event_on_gcd: vec![],
            }
        };
        let subtractive_spectrum: BuffStatus = BuffStatus {
            id: 2001,
            name: String::from("Subtractive Spectrum"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let hyperphantasia: BuffStatus = BuffStatus {
            id: 2002,
            name: String::from("Hyperphantasia"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 5,
            max_stacks: 5,
            trigger_proc_event_on_gcd: vec![],
        };
        let starstruck: BuffStatus = BuffStatus {
            id: 2003,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 30000,
            is_raidwide: false,
            name: "Starstruck".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };

        let fire_in_red: AttackSkill = AttackSkill {
            id: 2000,
            name: "Fire in Red".to_string(),
            player_id,
            potency: 440,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(2),
            delay_millisecond: None,
            casting_time_millisecond: 1500,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let aero_in_green: AttackSkill = AttackSkill {
            id: 2001,
            name: "Aero in Green".to_string(),
            player_id,
            potency: 480,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(3),
            delay_millisecond: None,
            casting_time_millisecond: 1500,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let water_in_blue: AttackSkill = AttackSkill {
            id: 2002,
            name: "Water in Blue".to_string(),
            player_id,
            potency: 520,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 1500,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 25)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let living_muse: AttackSkill = AttackSkill {
            id: 2003,
            name: "Living Muse".to_string(),
            player_id,
            potency: 1100,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![Resource(14, 1)],
            resource_created: HashMap::from([(3, 1), (15, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 40000,
            current_cooldown_millisecond: 0,
            stacks: 3,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let creature_shot: AttackSkill = AttackSkill {
            id: 2004,
            name: "Creature Shot".to_string(),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 30000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let mog_of_the_ages: AttackSkill = AttackSkill {
            id: 2005,
            name: "Mog of the Ages".to_string(),
            player_id,
            potency: 1300,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![Resource(3, 2)],
            resource_created: HashMap::from([(11, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(creature_shot.get_id()),
            use_type: UseType::UseOnTarget,
        };

        let pom_motif: AttackSkill = AttackSkill {
            id: 2006,
            name: "Pom Motif".to_string(),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 2500,
            gcd_cooldown_millisecond: 4000,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            resource_required: vec![],
            resource_created: HashMap::from([(14, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let pom_muse: AttackSkill = AttackSkill {
            id: 2007,
            name: "Pom Muse".to_string(),
            player_id,
            potency: 1100,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![Resource(15, 1)],
            resource_created: HashMap::from([(3, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(living_muse.get_id()),
            use_type: UseType::UseOnTarget,
        };

        let winged_motif: AttackSkill = AttackSkill {
            id: 2008,
            name: "Winged Motif".to_string(),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 2500,
            gcd_cooldown_millisecond: 4000,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            resource_required: vec![],
            resource_created: HashMap::from([(14, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let winged_muse: AttackSkill = AttackSkill {
            id: 2009,
            name: "Winged Muse".to_string(),
            player_id,
            potency: 1100,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![Resource(4, 1), Resource(15, 1)],
            resource_created: HashMap::from([(3, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(living_muse.get_id()),
            use_type: UseType::UseOnTarget,
        };

        let hammer_motif: AttackSkill = AttackSkill {
            id: 2010,
            name: "Hammer Motif".to_string(),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 2500,
            gcd_cooldown_millisecond: 4000,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            resource_required: vec![],
            resource_created: HashMap::from([(12, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let subtractive_pallete: AttackSkill = AttackSkill {
            id: 2011,
            name: "Subtractive Pallete".to_string(),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![Resource(0, 50)],
            resource_created: HashMap::from([(8, 3), (7, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let striking_muse: AttackSkill = AttackSkill {
            id: 2012,
            name: "Striking Muse".to_string(),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![Resource(12, 1)],
            resource_created: HashMap::from([(1, 3)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 60000,
            current_cooldown_millisecond: 0,
            stacks: 2,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let blizzard_in_cyan: AttackSkill = AttackSkill {
            id: 2013,
            name: "Blizzard In Cyan".to_string(),
            player_id,
            potency: 800,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(2),
            delay_millisecond: None,
            casting_time_millisecond: 2500,
            gcd_cooldown_millisecond: 3300,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![Resource(HARD_GCD_STACK_ID, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let stone_in_yellow: AttackSkill = AttackSkill {
            id: 2014,
            name: "Stone in Yellow".to_string(),
            player_id,
            potency: 840,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(3),
            delay_millisecond: None,
            casting_time_millisecond: 2500,
            gcd_cooldown_millisecond: 3300,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![Resource(HARD_GCD_STACK_ID, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let thunder_in_magenta: AttackSkill = AttackSkill {
            id: 2015,
            name: "Thunder in Magenta".to_string(),
            player_id,
            potency: 880,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 2500,
            gcd_cooldown_millisecond: 3300,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            resource_required: vec![Resource(HARD_GCD_STACK_ID, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let starry_sky_motif: AttackSkill = AttackSkill {
            id: 2016,
            name: "Starry Sky Motif".to_string(),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 4000,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            resource_required: vec![],
            resource_created: HashMap::from([(2, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };
        let starry_muse: AttackSkill = AttackSkill {
            id: 2017,
            name: "Starry Muse".to_string(),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![
                ApplyRaidBuff(player_id, starry_muse_buff.clone(), 20000, 20000, 500),
                ApplyBuff(player_id, player_id, starstruck.clone(), 30000, 30000, 0),
                ApplyBuff(
                    player_id,
                    player_id,
                    hyperphantasia.clone(),
                    30000,
                    30000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    subtractive_spectrum.clone(),
                    30000,
                    30000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            resource_required: vec![Resource(2, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 120000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };

        let holy_in_white: AttackSkill = AttackSkill {
            id: 2018,
            name: "Holy in White".to_string(),
            player_id,
            potency: 520,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let hammer_stamp: AttackSkill = AttackSkill {
            id: 2019,
            name: "Hammer Stamp".to_string(),
            player_id,
            potency: 560,
            trait_percent: 156,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![Resource(1, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: true,
            is_guaranteed_direct_hit: true,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let hammer_brush: AttackSkill = AttackSkill {
            id: 2020,
            name: "Hammer Brush".to_string(),
            player_id,
            potency: 620,
            trait_percent: 156,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![Resource(1, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: true,
            is_guaranteed_direct_hit: true,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let polishing_hammer: AttackSkill = AttackSkill {
            id: 2021,
            name: "Polishing Hammer".to_string(),
            player_id,
            potency: 680,
            trait_percent: 156,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![Resource(1, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: true,
            is_guaranteed_direct_hit: true,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let comet_in_black: AttackSkill = AttackSkill {
            id: 2022,
            name: "Comet in Black".to_string(),
            player_id,
            potency: 880,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 3300,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![Resource(7, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let rainbow_drip: AttackSkill = AttackSkill {
            id: 2023,
            name: "Rainbow Drip".to_string(),
            player_id,
            potency: 1000,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 3500,
            gcd_cooldown_millisecond: 6000,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let rainbow_drip_proc: AttackSkill = AttackSkill {
            id: 2024,
            name: "Rainbow Drip".to_string(),
            player_id,
            potency: 1000,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![Resource(13, 5)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let claw_motif: AttackSkill = AttackSkill {
            id: 2025,
            name: "Claw Motif".to_string(),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 2500,
            gcd_cooldown_millisecond: 4000,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            resource_required: vec![],
            resource_created: HashMap::from([(14, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let clawed_muse: AttackSkill = AttackSkill {
            id: 2026,
            name: "Clawed Muse".to_string(),
            player_id,
            potency: 1100,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            resource_required: vec![Resource(5, 1), Resource(15, 1)],
            resource_created: HashMap::from([(3, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(living_muse.get_id()),
            use_type: UseType::UseOnTarget,
        };

        let maw_motif: AttackSkill = AttackSkill {
            id: 2027,
            name: "Maw Motif".to_string(),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 2500,
            gcd_cooldown_millisecond: 4000,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            resource_required: vec![],
            resource_created: HashMap::from([(14, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let fanged_muse: AttackSkill = AttackSkill {
            id: 2026,
            name: "Fanged Muse".to_string(),
            player_id,
            potency: 1100,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            resource_required: vec![Resource(6, 1), Resource(15, 1)],
            resource_created: HashMap::from([(3, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(living_muse.get_id()),
            use_type: UseType::UseOnTarget,
        };
        let retribution_of_the_madeem: AttackSkill = AttackSkill {
            id: 2029,
            name: "Retribution of the Madeem".to_string(),
            player_id,
            potency: 1400,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            resource_required: vec![Resource(11, 1), Resource(3, 2), Resource(15, 4)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(creature_shot.get_id()),
            use_type: UseType::UseOnTarget,
        };

        let star_prism: AttackSkill = AttackSkill {
            id: 2030,
            name: "Star Prism".to_string(),
            player_id,
            potency: 1400,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1875,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![
                UseBuff(starstruck.get_id()),
                UseBuff(hyperphantasia.get_id()),
            ],
            resource_created: HashMap::from([(13, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let subtractive_pallete_proc: AttackSkill = AttackSkill {
            id: 2031,
            name: "Subtractive Pallete".to_string(),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![UseBuff(subtractive_spectrum.get_id())],
            resource_created: HashMap::from([(8, 3), (7, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let comet_in_black_hyperphantasia: AttackSkill = AttackSkill {
            id: 2032,
            name: "Comet in Black".to_string(),
            player_id,
            potency: 880,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2475,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![Resource(7, 1), UseBuff(hyperphantasia.get_id())],
            resource_created: HashMap::from([(13, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let blizzard_in_cyan_hyperphantasia: AttackSkill = AttackSkill {
            id: 2033,
            name: "Blizzard in Cyan".to_string(),
            player_id,
            potency: 800,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(2),
            delay_millisecond: None,
            casting_time_millisecond: 1340,
            gcd_cooldown_millisecond: 2475,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![Resource(8, 1), UseBuff(hyperphantasia.get_id())],
            resource_created: HashMap::from([(13, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let stone_in_yellow_hyperphantasia: AttackSkill = AttackSkill {
            id: 2034,
            name: "Stone in Yellow".to_string(),
            player_id,
            potency: 840,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(3),
            delay_millisecond: None,
            casting_time_millisecond: 1340,
            gcd_cooldown_millisecond: 2475,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![Resource(8, 1), UseBuff(hyperphantasia.get_id())],
            resource_created: HashMap::from([(13, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let thunder_in_magenta_hyperphantasia: AttackSkill = AttackSkill {
            id: 2035,
            name: "Thunder in Magenta".to_string(),
            player_id,
            potency: 880,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 1340,
            gcd_cooldown_millisecond: 2475,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![Resource(8, 1), UseBuff(hyperphantasia.get_id())],
            resource_created: HashMap::from([(13, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let potion_skills = PotionSkill::new(player_id);

        PictomancerDatabase {
            fire_in_red,
            aero_in_green,
            water_in_blue,
            living_muse,
            creature_shot,
            mog_of_the_ages,
            pom_motif,
            pom_muse,
            winged_motif,
            winged_muse,
            hammer_motif,
            subtractive_pallete,
            striking_muse,
            blizzard_in_cyan,
            stone_in_yellow,
            thunder_in_magenta,
            starry_sky_motif,
            starry_muse,
            holy_in_white,
            hammer_stamp,
            hammer_brush,
            polishing_hammer,
            comet_in_black,
            rainbow_drip,
            rainbow_drip_proc,
            claw_motif,
            clawed_muse,
            maw_motif,
            fanged_muse,
            retribution_of_the_madeem,
            star_prism,
            subtractive_pallete_proc,
            comet_in_black_hyperphantasia,
            blizzard_in_cyan_hyperphantasia,
            stone_in_yellow_hyperphantasia,
            thunder_in_magenta_hyperphantasia,

            potion: potion_skills.potion,
        }
    }
}

pub(crate) fn make_pictomancer_skill_list(player_id: PlayerIdType) -> SkillTable<AttackSkill> {
    let db = PictomancerDatabase::new(player_id);

    let blackmage_skill_list: Vec<AttackSkill> = vec![
        db.fire_in_red,
        db.aero_in_green,
        db.water_in_blue,
        db.living_muse,
        db.creature_shot,
        db.mog_of_the_ages,
        db.pom_motif,
        db.pom_muse,
        db.winged_motif,
        db.winged_muse,
        db.hammer_motif,
        db.subtractive_pallete,
        db.striking_muse,
        db.blizzard_in_cyan,
        db.stone_in_yellow,
        db.thunder_in_magenta,
        db.starry_sky_motif,
        db.starry_muse,
        db.holy_in_white,
        db.hammer_stamp,
        db.hammer_brush,
        db.polishing_hammer,
        db.comet_in_black,
        db.rainbow_drip,
        db.rainbow_drip_proc,
        db.claw_motif,
        db.clawed_muse,
        db.maw_motif,
        db.fanged_muse,
        db.retribution_of_the_madeem,
        db.star_prism,
        db.subtractive_pallete_proc,
        db.comet_in_black_hyperphantasia,
        db.blizzard_in_cyan_hyperphantasia,
        db.stone_in_yellow_hyperphantasia,
        db.thunder_in_magenta_hyperphantasia,
        db.potion,
    ];

    make_skill_table(blackmage_skill_list)
}
