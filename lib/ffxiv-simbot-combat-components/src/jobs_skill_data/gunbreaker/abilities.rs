use crate::event::ffxiv_event::FfxivEvent::{ApplyBuff, ApplyDebuff};
use crate::id_entity::IdEntity;
use crate::jobs_skill_data::PotionSkill;
use crate::rotation::SkillTable;
use crate::skill::attack_skill::AttackSkill;
use crate::skill::damage_category::DamageCategory;
use crate::skill::make_skill_table;
use crate::skill::use_type::UseType;
use crate::skill::ResourceRequirements::{Resource, UseBuff};
use crate::status::buff_status::BuffStatus;
use crate::status::debuff_status::DebuffStatus;
use crate::status::status_info::StatusInfo;
use crate::types::IdType;
use std::collections::HashMap;

pub(crate) struct GunbreakerDatabase {
    pub(crate) keen_edge: AttackSkill,
    pub(crate) brutal_shell: AttackSkill,
    pub(crate) solid_barrel: AttackSkill,
    pub(crate) sonic_break: AttackSkill,
    pub(crate) bow_shock: AttackSkill,
    pub(crate) no_mercy: AttackSkill,
    pub(crate) rough_divide: AttackSkill,
    pub(crate) gnashing_fang: AttackSkill,
    pub(crate) savage_claw: AttackSkill,
    pub(crate) wicked_talon: AttackSkill,
    pub(crate) jugular_rip: AttackSkill,
    pub(crate) abdomen_tear: AttackSkill,
    pub(crate) eye_gouge: AttackSkill,
    pub(crate) blasting_zone: AttackSkill,
    pub(crate) double_down: AttackSkill,
    pub(crate) bloodfest: AttackSkill,
    pub(crate) burst_strike: AttackSkill,
    pub(crate) hypervelocity: AttackSkill,
    pub(crate) reign_of_beasts: AttackSkill,
    pub(crate) noble_blood: AttackSkill,
    pub(crate) lion_heart: AttackSkill,

    pub(crate) no_mercy_buff: BuffStatus,
    pub(crate) ready_to_blast: BuffStatus,
    pub(crate) sonic_break_dot: DebuffStatus,
    pub(crate) bow_shock_dot: DebuffStatus,
    pub(crate) ready_to_rip: BuffStatus,
    pub(crate) ready_to_tear: BuffStatus,
    pub(crate) ready_to_gouge: BuffStatus,
    pub(crate) savage_next: BuffStatus,
    pub(crate) wicked_next: BuffStatus,
    pub(crate) ready_to_break: BuffStatus,
    pub(crate) ready_to_reign: BuffStatus,

    pub(crate) potion: AttackSkill,
    pub(crate) potion_buff: BuffStatus,
}

impl GunbreakerDatabase {
    pub(crate) fn new(player_id: IdType) -> Self {
        let NO_MERCY_BUFF: BuffStatus = BuffStatus {
            id: 300,
            name: String::from("No Mercy"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(20)],
            duration_millisecond: 20000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let READY_TO_BLAST: BuffStatus = BuffStatus {
            id: 301,
            name: String::from("Ready to Blast"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 10000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let SONIC_BREAK_DOT: DebuffStatus = DebuffStatus {
            id: 302,
            name: String::from("Sonic Break"),
            snapshotted_buffs: Default::default(),
            owner_id: player_id,
            potency: Some(60),
            trait_percent: Some(100),
            damage_category: Some(DamageCategory::PhysicalDot),
            damage_skill_id: Some(303),
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            snapshotted_debuffs: Default::default(),
        };
        let BOW_SHOCK_DOT: DebuffStatus = DebuffStatus {
            id: 303,
            name: String::from("Bow Shock"),
            snapshotted_buffs: Default::default(),
            owner_id: player_id,
            potency: Some(60),
            trait_percent: Some(100),
            damage_category: Some(DamageCategory::PhysicalDot),
            damage_skill_id: Some(304),
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 15000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            snapshotted_debuffs: Default::default(),
        };
        let READY_TO_RIP: BuffStatus = BuffStatus {
            id: 304,
            name: String::from("Ready to Rip"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 10000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let READY_TO_TEAR: BuffStatus = BuffStatus {
            id: 305,
            name: String::from("Ready to Tear"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 10000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let READY_TO_GOUGE: BuffStatus = BuffStatus {
            id: 306,
            name: String::from("Ready to Gouge"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 10000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let SAVAGE_NEXT: BuffStatus = BuffStatus {
            id: 307,
            name: String::from("Savage Next"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let WICKED_NEXT: BuffStatus = BuffStatus {
            id: 308,
            name: String::from("Wicked Next"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let READY_TO_BREAK: BuffStatus = BuffStatus {
            id: 309,
            name: String::from("Ready to Break"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let READY_TO_REIGN: BuffStatus = BuffStatus {
            id: 310,
            name: String::from("Ready to Reign"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };

        let KEEN_EDGE: AttackSkill = AttackSkill {
            id: 300,
            name: String::from("Keen Edge"),
            player_id,
            potency: 300,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(2),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let BRUTAL_SHELL: AttackSkill = AttackSkill {
            id: 301,
            name: String::from("Brutal Shell"),
            player_id,
            potency: 380,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(3),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let SOLID_BARREL: AttackSkill = AttackSkill {
            id: 302,
            name: String::from("Solid Barrel"),
            player_id,
            potency: 460,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let SONIC_BREAK: AttackSkill = AttackSkill {
            id: 303,
            name: String::from("Sonic Break"),
            player_id,
            potency: 300,
            trait_percent: 100,
            additional_skill_events: vec![ApplyDebuff(
                player_id,
                SONIC_BREAK_DOT.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(READY_TO_BREAK.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let BOW_SHOCK: AttackSkill = AttackSkill {
            id: 304,
            name: String::from("Bow Shock"),
            player_id,
            potency: 150,
            trait_percent: 100,
            additional_skill_events: vec![ApplyDebuff(
                player_id,
                BOW_SHOCK_DOT.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };
        let NO_MERCY: AttackSkill = AttackSkill {
            id: 305,
            name: String::from("No Mercy"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![
                ApplyBuff(player_id, player_id, NO_MERCY_BUFF.clone(), 20000, 20000, 0),
                ApplyBuff(
                    player_id,
                    player_id,
                    READY_TO_BREAK.clone(),
                    30000,
                    30000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };
        let ROUGH_DIVIDE: AttackSkill = AttackSkill {
            id: 306,
            name: String::from("Rough Divide"),
            player_id,
            potency: 150,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 30000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 2,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let GNASHING_FANG: AttackSkill = AttackSkill {
            id: 307,
            name: String::from("Gnashing Fang"),
            player_id,
            potency: 500,
            trait_percent: 100,
            additional_skill_events: vec![
                ApplyBuff(player_id, player_id, READY_TO_RIP.clone(), 10000, 10000, 0),
                ApplyBuff(player_id, player_id, SAVAGE_NEXT.clone(), 30000, 30000, 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 30000,
            resource_required: vec![Resource(0, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let SAVAGE_CLAW: AttackSkill = AttackSkill {
            id: 308,
            name: String::from("Savage Claw"),
            player_id,
            potency: 560,
            trait_percent: 100,
            additional_skill_events: vec![
                ApplyBuff(player_id, player_id, READY_TO_TEAR.clone(), 10000, 10000, 0),
                ApplyBuff(player_id, player_id, WICKED_NEXT.clone(), 30000, 30000, 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(SAVAGE_NEXT.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let WICKED_TALON: AttackSkill = AttackSkill {
            id: 309,
            name: String::from("Wicked Talon"),
            player_id,
            potency: 620,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                READY_TO_GOUGE.clone(),
                10000,
                10000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(WICKED_NEXT.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let JUGULAR_RIP: AttackSkill = AttackSkill {
            id: 310,
            name: String::from("Jugular Rip"),
            player_id,
            potency: 200,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(READY_TO_RIP.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let ABDOMENT_TEAR: AttackSkill = AttackSkill {
            id: 311,
            name: String::from("Abdomen Tear"),
            player_id,
            potency: 240,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(READY_TO_TEAR.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let EYE_GOUGE: AttackSkill = AttackSkill {
            id: 312,
            name: String::from("Eye Gouge"),
            player_id,
            potency: 280,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(READY_TO_GOUGE.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let BLASTING_ZONE: AttackSkill = AttackSkill {
            id: 313,
            name: String::from("Blasting Zone"),
            player_id,
            potency: 800,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 30000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let DOUBLE_DOWN: AttackSkill = AttackSkill {
            id: 314,
            name: String::from("Double Down"),
            player_id,
            potency: 1200,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 60000,
            resource_required: vec![Resource(0, 2)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };

        let BLOODFEST: AttackSkill = AttackSkill {
            id: 315,
            name: String::from("Bloodfest"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                READY_TO_REIGN.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 120000,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 3)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let BURST_STRIKE: AttackSkill = AttackSkill {
            id: 316,
            name: String::from("Burst Strike"),
            player_id,
            potency: 460,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                READY_TO_BLAST.clone(),
                10000,
                10000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let HYPERVELOCITY: AttackSkill = AttackSkill {
            id: 317,
            name: String::from("Hypervelocity"),
            player_id,
            potency: 220,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(READY_TO_BLAST.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let REIGN_OF_BEASTS: AttackSkill = AttackSkill {
            id: 318,
            name: String::from("Reign of Beasts"),
            player_id,
            potency: 800,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(READY_TO_REIGN.get_id())],
            resource_created: HashMap::from([(1, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let NOBLE_BLOOD: AttackSkill = AttackSkill {
            id: 319,
            name: String::from("Noble Blood"),
            player_id,
            potency: 1000,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(1, 1)],
            resource_created: HashMap::from([(2, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let LION_HEART: AttackSkill = AttackSkill {
            id: 320,
            name: String::from("Lion Heart"),
            player_id,
            potency: 1200,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(2, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        let potion_skill = PotionSkill::new(player_id);

        GunbreakerDatabase {
            keen_edge: KEEN_EDGE,
            brutal_shell: BRUTAL_SHELL,
            solid_barrel: SOLID_BARREL,
            sonic_break: SONIC_BREAK,
            bow_shock: BOW_SHOCK,
            no_mercy: NO_MERCY,
            rough_divide: ROUGH_DIVIDE,
            gnashing_fang: GNASHING_FANG,
            savage_claw: SAVAGE_CLAW,
            wicked_talon: WICKED_TALON,
            jugular_rip: JUGULAR_RIP,
            abdomen_tear: ABDOMENT_TEAR,
            eye_gouge: EYE_GOUGE,
            blasting_zone: BLASTING_ZONE,
            double_down: DOUBLE_DOWN,
            bloodfest: BLOODFEST,
            burst_strike: BURST_STRIKE,
            hypervelocity: HYPERVELOCITY,

            reign_of_beasts: REIGN_OF_BEASTS,
            noble_blood: NOBLE_BLOOD,
            lion_heart: LION_HEART,
            no_mercy_buff: NO_MERCY_BUFF,
            ready_to_blast: READY_TO_BLAST,
            sonic_break_dot: SONIC_BREAK_DOT,
            bow_shock_dot: BOW_SHOCK_DOT,
            ready_to_rip: READY_TO_RIP,
            ready_to_tear: READY_TO_TEAR,
            ready_to_gouge: READY_TO_GOUGE,
            savage_next: SAVAGE_NEXT,
            wicked_next: WICKED_NEXT,
            ready_to_break: READY_TO_BREAK,
            ready_to_reign: READY_TO_REIGN,

            potion: potion_skill.potion,
            potion_buff: potion_skill.potion_buff,
        }
    }
}

pub(crate) fn make_gunbreaker_skill_list(player_id: IdType) -> SkillTable<AttackSkill> {
    let db = GunbreakerDatabase::new(player_id);

    let gunbreaker_skill_list: Vec<AttackSkill> = vec![
        db.keen_edge,
        db.brutal_shell,
        db.solid_barrel,
        db.sonic_break,
        db.bow_shock,
        db.no_mercy,
        db.rough_divide,
        db.gnashing_fang,
        db.savage_claw,
        db.wicked_talon,
        db.jugular_rip,
        db.abdomen_tear,
        db.eye_gouge,
        db.blasting_zone,
        db.double_down,
        db.bloodfest,
        db.burst_strike,
        db.hypervelocity,
        db.reign_of_beasts,
        db.noble_blood,
        db.lion_heart,
        db.potion,
    ];

    make_skill_table(gunbreaker_skill_list)
}
