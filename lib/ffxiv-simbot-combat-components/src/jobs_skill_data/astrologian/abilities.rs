use crate::event::ffxiv_event::FfxivEvent::{ApplyBuff, ApplyDebuff};
use crate::id_entity::IdEntity;
use crate::jobs_skill_data::PotionSkill;
use crate::rotation::SkillTable;
use crate::skill::attack_skill::AttackSkill;
use crate::skill::damage_category::DamageCategory;
use crate::skill::use_type::UseType;
use crate::skill::ResourceRequirements::{CheckStatus, UseBuff};
use crate::skill::{make_skill_table, ResourceRequirements};
use crate::status::buff_status::BuffStatus;
use crate::status::debuff_status::DebuffStatus;
use crate::status::status_info::StatusInfo;
use crate::types::IdType;
use std::collections::HashMap;

pub(crate) struct AstrologianDatabase {
    pub(crate) fall_malefic: AttackSkill,
    pub(crate) combust_iii: AttackSkill,
    pub(crate) earthly_star: AttackSkill,
    pub(crate) astral_draw: AttackSkill,
    pub(crate) umbral_draw: AttackSkill,
    pub(crate) the_balance: AttackSkill,
    pub(crate) the_spear: AttackSkill,
    pub(crate) divination: AttackSkill,
    pub(crate) lightspeed: AttackSkill,
    pub(crate) lord_of_crowns: AttackSkill,
    pub(crate) fall_malefic_lightspeed: AttackSkill,
    pub(crate) draw: AttackSkill,
    pub(crate) oracle: AttackSkill,

    pub(crate) divination_buff: BuffStatus,
    pub(crate) the_balance_buff: BuffStatus,
    pub(crate) the_spear_buff: BuffStatus,
    pub(crate) lightspeed_buff: BuffStatus,
    pub(crate) lord_of_crowns_buff: BuffStatus,
    pub(crate) combust_iii_dot: DebuffStatus,
    pub(crate) the_balance_ready: BuffStatus,
    pub(crate) the_spear_ready: BuffStatus,
    pub(crate) divining: BuffStatus,

    pub(crate) potion: AttackSkill,
    pub(crate) potion_buff: BuffStatus,
}

impl AstrologianDatabase {
    pub(crate) fn new(player_id: IdType) -> Self {
        let DIVINATION_BUFF: BuffStatus = BuffStatus {
            id: 500,
            name: String::from("Divination"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(6)],
            duration_millisecond: 20000,
            is_raidwide: true,
            trigger_proc_event_on_gcd: vec![],
        };
        let THE_BALANCE_BUFF: BuffStatus = BuffStatus {
            id: 501,
            name: String::from("The Balance"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(6)],
            duration_millisecond: 15000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let THE_SPEAR_BUFF: BuffStatus = BuffStatus {
            id: 502,
            name: String::from("The Spear"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(6)],
            duration_millisecond: 15000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let LIGHTSPEED_BUFF: BuffStatus = BuffStatus {
            id: 503,
            name: String::from("Lightspeed"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 15000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let LORD_OF_CROWNS_BUFF: BuffStatus = BuffStatus {
            id: 504,
            name: String::from("Lord of Crowns"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 240000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let COMBUST_III_DOT: DebuffStatus = DebuffStatus {
            id: 505,
            name: String::from("Combust III"),
            snapshotted_buffs: Default::default(),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            damage_skill_id: Some(501),
            potency: Some(70),
            trait_percent: Some(130),
            damage_category: Some(DamageCategory::MagicalDot),
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 30000,
            is_raidwide: false,
            snapshotted_debuffs: Default::default(),
        };
        let THE_BALANCE_READY: BuffStatus = BuffStatus {
            id: 506,
            name: String::from("The Balance Ready"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 240000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let THE_SPEAR_READY: BuffStatus = BuffStatus {
            id: 507,
            name: String::from("The Spear Ready"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 240000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let DIVINING: BuffStatus = BuffStatus {
            id: 508,
            name: String::from("Divining"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };

        let FALL_MALEFIC: AttackSkill = AttackSkill {
            id: 500,
            name: String::from("Fall Malefic"),
            player_id,
            potency: 270,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 1000,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let COMBUST_III: AttackSkill = AttackSkill {
            id: 501,
            name: String::from("Combust III"),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![ApplyDebuff(
                player_id,
                COMBUST_III_DOT.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let EARTHLY_STAR: AttackSkill = AttackSkill {
            id: 502,
            name: String::from("Earthly Star"),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let ASTRAL_DRAW: AttackSkill = AttackSkill {
            id: 503,
            name: String::from("Astral Draw"),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    THE_BALANCE_READY.clone(),
                    240000,
                    240000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    LORD_OF_CROWNS_BUFF.clone(),
                    240000,
                    240000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 55000,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(512),
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };
        let UMBRAL_DRAW: AttackSkill = AttackSkill {
            id: 504,
            name: String::from("Umbral Draw"),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                THE_SPEAR_READY.clone(),
                240000,
                240000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 55000,
            resource_required: vec![ResourceRequirements::Resource(0, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(512),
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };
        let THE_BALANCE: AttackSkill = AttackSkill {
            id: 505,
            name: String::from("The Balance"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                THE_BALANCE_BUFF.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(THE_BALANCE_READY.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnPartyMember,
        };
        let THE_SPEAR: AttackSkill = AttackSkill {
            id: 506,
            name: String::from("The Spear"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                THE_SPEAR_BUFF.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(THE_SPEAR_READY.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnPartyMember,
        };
        let DIVINATION: AttackSkill = AttackSkill {
            id: 507,
            name: String::from("Divination"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    DIVINATION_BUFF.clone(),
                    20000,
                    20000,
                    0,
                ),
                ApplyBuff(player_id, player_id, DIVINING.clone(), 30000, 30000, 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 120000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let LIGHTSPEED: AttackSkill = AttackSkill {
            id: 508,
            name: String::from("Lightspeed"),
            player_id,
            potency: 0,
            trait_percent: 0,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                LIGHTSPEED_BUFF.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 90000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };
        let LORD_OF_CROWNS: AttackSkill = AttackSkill {
            id: 510,
            name: String::from("Lord of Crowns"),
            player_id,
            potency: 250,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(LORD_OF_CROWNS_BUFF.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };
        let FALL_MALEFIC_LIGHTSPEED: AttackSkill = AttackSkill {
            id: 511,
            name: String::from("Fall Malefic"),
            player_id,
            potency: 250,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![CheckStatus(LIGHTSPEED_BUFF.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let DRAW: AttackSkill = AttackSkill {
            id: 512,
            name: String::from("Draw"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 55000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };

        let ORACLE: AttackSkill = AttackSkill {
            id: 513,
            name: String::from("Oracle"),
            player_id,
            potency: 800,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(DIVINING.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        let potion_skill = PotionSkill::new(player_id);

        AstrologianDatabase {
            fall_malefic: FALL_MALEFIC,
            combust_iii: COMBUST_III,
            earthly_star: EARTHLY_STAR,
            astral_draw: ASTRAL_DRAW,
            umbral_draw: UMBRAL_DRAW,
            the_balance: THE_BALANCE,
            the_spear: THE_SPEAR,
            divination: DIVINATION,
            lightspeed: LIGHTSPEED,
            lord_of_crowns: LORD_OF_CROWNS,
            fall_malefic_lightspeed: FALL_MALEFIC_LIGHTSPEED,
            draw: DRAW,
            oracle: ORACLE,

            divination_buff: DIVINATION_BUFF,
            the_balance_buff: THE_BALANCE_BUFF,
            the_spear_buff: THE_SPEAR_BUFF,
            lightspeed_buff: LIGHTSPEED_BUFF,
            lord_of_crowns_buff: LORD_OF_CROWNS_BUFF,
            the_spear_ready: THE_SPEAR_READY,
            the_balance_ready: THE_BALANCE_READY,
            divining: DIVINING,

            combust_iii_dot: COMBUST_III_DOT,

            potion: potion_skill.potion,
            potion_buff: potion_skill.potion_buff,
        }
    }
}

pub(crate) fn make_astrologian_skill_list(player_id: IdType) -> SkillTable<AttackSkill> {
    let db = AstrologianDatabase::new(player_id);

    let astrologian_skill_list: Vec<AttackSkill> = vec![
        db.fall_malefic,
        db.combust_iii,
        db.earthly_star,
        db.astral_draw,
        db.umbral_draw,
        db.the_balance,
        db.the_spear,
        db.divination,
        db.lightspeed,
        db.lord_of_crowns,
        db.fall_malefic_lightspeed,
        db.draw,
        db.oracle,
        db.potion,
    ];

    make_skill_table(astrologian_skill_list)
}
