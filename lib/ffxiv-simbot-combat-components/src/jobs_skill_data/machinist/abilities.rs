use crate::event::ffxiv_event::FfxivEvent;
use crate::event::ffxiv_event::FfxivEvent::{ApplyBuff, ReduceSkillCooldown};
use crate::id_entity::IdEntity;
use crate::jobs_skill_data::PotionSkill;
use crate::rotation::SkillTable;
use crate::skill::attack_skill::AttackSkill;
use crate::skill::use_type::UseType;
use crate::skill::ResourceRequirements::{CheckStatus, UseBuff};
use crate::skill::{make_skill_table, ResourceRequirements, ResourceTable};
use crate::status::buff_status::BuffStatus;
use crate::status::status_info::StatusInfo;
use crate::types::IdType;
use std::collections::HashMap;

pub(crate) struct MachinistDatabase {
    pub(crate) heated_split_shot: AttackSkill,
    pub(crate) heated_slug_shot: AttackSkill,
    pub(crate) heated_clean_shot: AttackSkill,
    pub(crate) drill: AttackSkill,
    pub(crate) air_anchor: AttackSkill,
    pub(crate) chainsaw: AttackSkill,
    pub(crate) reassemble: AttackSkill,
    pub(crate) double_check: AttackSkill,
    pub(crate) checkmate: AttackSkill,
    pub(crate) blazing_shot: AttackSkill,
    pub(crate) wildfire: AttackSkill,
    pub(crate) hypercharge: AttackSkill,
    pub(crate) barrel_stabilizer: AttackSkill,
    pub(crate) automaton_queen: AttackSkill,
    pub(crate) drill_reassemble: AttackSkill,
    pub(crate) air_anchor_reassemble: AttackSkill,
    pub(crate) chainsaw_reassemble: AttackSkill,
    pub(crate) excavator: AttackSkill,
    pub(crate) full_metal_field: AttackSkill,
    pub(crate) excavator_reassemble: AttackSkill,
    pub(crate) hypercharge_hypercharged: AttackSkill,

    pub(crate) reassemble_buff: BuffStatus,
    pub(crate) hypercharge_buff: BuffStatus,
    pub(crate) excavator_ready: BuffStatus,
    pub(crate) full_metal_machinist: BuffStatus,
    pub(crate) hypercharged: BuffStatus,

    pub(crate) potion: AttackSkill,
    pub(crate) potion_buff: BuffStatus,
}

impl MachinistDatabase {
    pub(crate) fn new(player_id: IdType) -> Self {
        let REASSEMBLE_BUFF: BuffStatus = {
            BuffStatus {
                id: 1400,
                name: String::from("Reassemble"),
                owner_id: player_id,
                duration_left_millisecond: 0,
                status_info: vec![StatusInfo::None],
                duration_millisecond: 5000,
                is_raidwide: false,
                stacks: 1,
                max_stacks: 1,
                trigger_proc_event_on_gcd: vec![],
            }
        };
        let HYPERCHARGE_BUFF: BuffStatus = BuffStatus {
            id: 1401,
            name: String::from("Hypercharge"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 10000,
            is_raidwide: false,
            stacks: 5,
            max_stacks: 5,
            trigger_proc_event_on_gcd: vec![],
        };
        let EXCAVATOR_READY: BuffStatus = BuffStatus {
            id: 1402,
            name: String::from("Excavator Ready"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let FULL_METAL_MACHINIST: BuffStatus = BuffStatus {
            id: 1403,
            name: String::from("Full Metal Field"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let HYPERCHARGED: BuffStatus = BuffStatus {
            id: 1404,
            name: String::from("Hypercharged"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };

        let HEATED_SPLIT_SHOT: AttackSkill = AttackSkill {
            id: 1400,
            name: String::from("Heated Split Shot"),
            player_id,
            use_type: UseType::UseOnTarget,
            potency: 220,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(2),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
        };
        let HEATED_SLUG_SHOT: AttackSkill = AttackSkill {
            id: 1401,
            name: String::from("Heated Slug Shot"),
            player_id,
            potency: 320,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(3),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 5)]),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let HEATED_CLEAN_SHOT: AttackSkill = AttackSkill {
            id: 1402,
            name: String::from("Heated Clean Shot"),
            player_id,
            potency: 400,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: ResourceTable::from([(0, 5), (1, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
        };
        let DRILL: AttackSkill = AttackSkill {
            id: 1403,
            name: String::from("Drill"),
            player_id,
            potency: 600,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 20000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 2,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let AIR_ANCHOR: AttackSkill = AttackSkill {
            id: 1404,
            name: String::from("Air Anchor"),
            player_id,
            potency: 600,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 40000,
            resource_required: vec![],
            resource_created: HashMap::from([(1, 2)]),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let CHAIN_SAW: AttackSkill = AttackSkill {
            id: 1405,
            name: String::from("Chain Saw"),
            player_id,
            potency: 600,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                EXCAVATOR_READY.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: ResourceTable::from([(1, 2)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
        };
        let REASSEMBLE: AttackSkill = AttackSkill {
            id: 1406,
            name: String::from("Reassemble"),
            player_id,
            potency: 0,
            use_type: UseType::NoTarget,
            trait_percent: 120,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                REASSEMBLE_BUFF.clone(),
                5000,
                5000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 55000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 2,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let DOUBLE_CHECK: AttackSkill = AttackSkill {
            id: 1407,
            name: String::from("Double Check"),
            player_id,
            potency: 160,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 30000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 3,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let CHECKMATE: AttackSkill = AttackSkill {
            id: 1408,
            name: String::from("Checkmate"),
            player_id,
            potency: 160,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 30000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 3,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let BLAZING_SHOT: AttackSkill = AttackSkill {
            id: 1409,
            name: String::from("Blazing Shot"),
            player_id,
            potency: 220,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![
                ReduceSkillCooldown(player_id, DOUBLE_CHECK.get_id(), 15000, 0),
                ReduceSkillCooldown(player_id, CHECKMATE.get_id(), 15000, 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(HYPERCHARGE_BUFF.get_id())],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let WILDFIRE: AttackSkill = AttackSkill {
            id: 1410,
            name: String::from("Wildfire"),
            player_id,
            potency: 0,
            use_type: UseType::UseOnTarget,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 120000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let HYPERCHARGE: AttackSkill = AttackSkill {
            id: 1411,
            name: String::from("Hypercharge"),
            player_id,
            potency: 0,
            use_type: UseType::NoTarget,
            trait_percent: 120,
            additional_skill_events: vec![FfxivEvent::ApplyBuff(
                player_id,
                player_id,
                HYPERCHARGE_BUFF.clone(),
                10000,
                10000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 10000,
            resource_required: vec![ResourceRequirements::Resource(0, 50)],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let BARREL_STABILIZER: AttackSkill = AttackSkill {
            id: 1412,
            name: String::from("Barrel Stabilizer"),
            player_id,
            potency: 0,
            use_type: UseType::NoTarget,
            trait_percent: 120,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    FULL_METAL_MACHINIST.clone(),
                    30000,
                    30000,
                    0,
                ),
                ApplyBuff(player_id, player_id, HYPERCHARGED.clone(), 30000, 30000, 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 120000,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 50)]),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let AUTOMATON_QUEEN: AttackSkill = AttackSkill {
            id: 1413,
            name: String::from("Automaton Queen"),
            player_id,
            potency: 0,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 15000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
        };
        let DRILL_REASSEMBLE: crate::skill::attack_skill::AttackSkill = AttackSkill {
            id: 1414,
            name: String::from("Drill"),
            player_id,
            potency: 600,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 20000,
            resource_required: vec![UseBuff(REASSEMBLE_BUFF.get_id())],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(DRILL.get_id()),
            is_guaranteed_crit: true,
            is_guaranteed_direct_hit: true,
        };
        let AIR_ANCHOR_REASSEMBLE: AttackSkill = AttackSkill {
            id: 1415,
            name: String::from("Air Anchor"),
            player_id,
            potency: 600,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 40000,
            resource_required: vec![],
            resource_created: HashMap::from([(1, 2)]),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(AIR_ANCHOR.get_id()),
            is_guaranteed_crit: true,
            is_guaranteed_direct_hit: true,
        };
        let CHAIN_SAW_REASSEMBLE: AttackSkill = AttackSkill {
            id: 1416,
            name: String::from("Chain Saw"),
            player_id,
            potency: 600,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                EXCAVATOR_READY.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: ResourceTable::from([(1, 2)]),
            is_guaranteed_crit: true,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(CHAIN_SAW.get_id()),
            is_guaranteed_direct_hit: true,
        };
        let EXCAVATOR: AttackSkill = AttackSkill {
            id: 1417,
            name: String::from("Excavator"),
            player_id,
            potency: 600,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(EXCAVATOR_READY.get_id())],
            resource_created: HashMap::from([(1, 2)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
        };
        let FULL_METAL_FIELD: AttackSkill = AttackSkill {
            id: 1418,
            name: String::from("Full Metal Field"),
            player_id,
            potency: 900,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(FULL_METAL_MACHINIST.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: true,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: true,
        };
        let EXCAVATOR_REASSEMBLE: AttackSkill = AttackSkill {
            id: 1419,
            name: String::from("Excavator"),
            player_id,
            potency: 600,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![
                UseBuff(REASSEMBLE_BUFF.get_id()),
                UseBuff(EXCAVATOR_READY.get_id()),
            ],
            resource_created: HashMap::from([(1, 2)]),
            is_guaranteed_crit: true,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: true,
        };
        let HYPERCHARGE_HYPERCHARGED: AttackSkill = AttackSkill {
            id: 1420,
            name: String::from("Hypercharge"),
            player_id,
            potency: 0,
            use_type: UseType::NoTarget,
            trait_percent: 120,
            additional_skill_events: vec![FfxivEvent::ApplyBuff(
                player_id,
                player_id,
                HYPERCHARGE_BUFF.clone(),
                10000,
                10000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 10000,
            resource_required: vec![ResourceRequirements::UseBuff(HYPERCHARGED.id)],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };

        let potion_skill = PotionSkill::new(player_id);

        Self {
            heated_split_shot: HEATED_SPLIT_SHOT,
            heated_slug_shot: HEATED_SLUG_SHOT,
            heated_clean_shot: HEATED_CLEAN_SHOT,
            drill: DRILL,
            air_anchor: AIR_ANCHOR,
            chainsaw: CHAIN_SAW,
            reassemble: REASSEMBLE,
            double_check: DOUBLE_CHECK,
            checkmate: CHECKMATE,
            blazing_shot: BLAZING_SHOT,
            wildfire: WILDFIRE,
            hypercharge: HYPERCHARGE,
            barrel_stabilizer: BARREL_STABILIZER,
            automaton_queen: AUTOMATON_QUEEN,
            drill_reassemble: DRILL_REASSEMBLE,
            air_anchor_reassemble: AIR_ANCHOR_REASSEMBLE,
            chainsaw_reassemble: CHAIN_SAW_REASSEMBLE,
            excavator: EXCAVATOR,
            full_metal_field: FULL_METAL_FIELD,
            excavator_reassemble: EXCAVATOR_REASSEMBLE,
            hypercharge_hypercharged: HYPERCHARGE_HYPERCHARGED,

            reassemble_buff: REASSEMBLE_BUFF,
            hypercharge_buff: HYPERCHARGE_BUFF,
            excavator_ready: EXCAVATOR_READY,
            full_metal_machinist: FULL_METAL_MACHINIST,
            hypercharged: HYPERCHARGED,

            potion: potion_skill.potion,
            potion_buff: potion_skill.potion_buff,
        }
    }
}

pub(crate) fn make_machinist_skill_list(player_id: IdType) -> SkillTable<AttackSkill> {
    let db = MachinistDatabase::new(player_id);

    let machinist_skill_list: Vec<AttackSkill> = vec![
        db.heated_split_shot.clone(),
        db.heated_slug_shot.clone(),
        db.heated_clean_shot.clone(),
        db.drill.clone(),
        db.air_anchor.clone(),
        db.chainsaw.clone(),
        db.reassemble.clone(),
        db.double_check.clone(),
        db.checkmate.clone(),
        db.blazing_shot.clone(),
        db.wildfire.clone(),
        db.hypercharge.clone(),
        db.barrel_stabilizer.clone(),
        db.automaton_queen.clone(),
        db.drill_reassemble.clone(),
        db.air_anchor_reassemble.clone(),
        db.chainsaw_reassemble.clone(),
        db.excavator.clone(),
        db.full_metal_field.clone(),
        db.excavator_reassemble.clone(),
        db.hypercharge_hypercharged.clone(),
        db.potion.clone(),
    ];

    make_skill_table(machinist_skill_list)
}
