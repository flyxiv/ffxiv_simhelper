use crate::event::ffxiv_event::FfxivEvent;
use crate::event::ffxiv_event::FfxivEvent::ApplyBuff;
use crate::id_entity::IdEntity;
use crate::rotation::SkillTable;
use crate::skill::attack_skill::AttackSkill;
use crate::skill::use_type::UseType;
use crate::skill::ResourceRequirements::UseBuff;
use crate::skill::{make_skill_table, ResourceRequirements};
use crate::status::buff_status::BuffStatus;
use crate::status::status_info::StatusInfo;
use crate::IdType;
use std::collections::HashMap;

pub(crate) struct WarriorDatabase {
    pub(crate) heavy_swing: AttackSkill,
    pub(crate) maim: AttackSkill,
    pub(crate) storms_eye: AttackSkill,
    pub(crate) infuriate: AttackSkill,
    pub(crate) fell_cleave: AttackSkill,
    pub(crate) onslaught: AttackSkill,
    pub(crate) upheaval: AttackSkill,
    pub(crate) inner_release: AttackSkill,
    pub(crate) primal_rend: AttackSkill,
    pub(crate) storms_path: AttackSkill,
    pub(crate) inner_chaos: AttackSkill,
    pub(crate) fell_cleave_inner: AttackSkill,

    pub(crate) surging_tempest: BuffStatus,
    pub(crate) nascent_chaos: BuffStatus,
    pub(crate) inner_release_stack: BuffStatus,
    pub(crate) primal_rend_ready: BuffStatus,
}

impl WarriorDatabase {
    pub(crate) fn new(player_id: IdType) -> Self {
        let SURGING_TEMPEST: BuffStatus = BuffStatus {
            id: 100,
            name: String::from("Surging Tempest"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(10)],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let NASCENT_CHAOS: BuffStatus = BuffStatus {
            id: 101,
            name: String::from("Nascent Chaos"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let INNER_RELEASE_STACK: BuffStatus = BuffStatus {
            id: 102,
            name: String::from("Inner Release"),
            stacks: 3,
            max_stacks: 3,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let PRIMAL_REND_READY: BuffStatus = BuffStatus {
            id: 103,
            name: String::from("Primal Rend Ready"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 15000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };

        let HEAVY_SWING: AttackSkill = AttackSkill {
            id: 100,
            name: String::from("Heavy Swing"),
            player_id,
            potency: 200,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(2),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };
        let MAIM: AttackSkill = AttackSkill {
            id: 101,
            name: String::from("Maim"),
            player_id,
            potency: 300,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(3),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let STORMS_EYE: AttackSkill = AttackSkill {
            id: 102,
            name: String::from("Storm's Eye"),
            player_id,
            potency: 440,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                SURGING_TEMPEST.clone(),
                30000,
                60000,
                0,
            )],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 10)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let INFURIATE: AttackSkill = AttackSkill {
            id: 103,
            name: String::from("Infuriate"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                NASCENT_CHAOS.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 30000,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 50)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 2,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let FELL_CLEAVE: AttackSkill = AttackSkill {
            id: 104,
            name: String::from("Fell Cleave"),
            player_id,
            potency: 520,
            trait_percent: 100,
            additional_skill_events: vec![FfxivEvent::ReduceSkillCooldown(
                player_id,
                INFURIATE.get_id(),
                5000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![ResourceRequirements::Resource(0, 50)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let ONSLAUGHT: AttackSkill = AttackSkill {
            id: 105,
            name: String::from("Onslaught"),
            player_id,
            potency: 150,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 20000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 3,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let UPHEAVAL: AttackSkill = AttackSkill {
            id: 106,
            name: String::from("Upheaval"),
            player_id,
            potency: 400,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 30000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let INNER_RELEASE: AttackSkill = AttackSkill {
            id: 107,
            name: String::from("Inner Release"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    INNER_RELEASE_STACK.clone(),
                    30000,
                    30000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    PRIMAL_REND_READY.clone(),
                    30000,
                    30000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    SURGING_TEMPEST.clone(),
                    10000,
                    60000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };
        let PRIMAL_REND: AttackSkill = AttackSkill {
            id: 108,
            name: String::from("Primal Rend"),
            player_id,
            potency: 700,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(PRIMAL_REND_READY.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: true,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: true,
            use_type: UseType::UseOnTarget,
        };
        let STORMS_PATH: AttackSkill = AttackSkill {
            id: 109,
            name: String::from("Storm's Path"),
            player_id,
            potency: 440,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 20)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let INNER_CHAOS: AttackSkill = AttackSkill {
            id: 110,
            name: String::from("Inner Chaos"),
            player_id,
            potency: 660,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![
                ResourceRequirements::Resource(0, 50),
                UseBuff(NASCENT_CHAOS.get_id()),
            ],
            resource_created: Default::default(),
            is_guaranteed_crit: true,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: true,
            use_type: UseType::UseOnTarget,
        };
        let FELL_CLEAVE_INNER: AttackSkill = AttackSkill {
            id: 111,
            name: String::from("Fell Cleave"),
            player_id,
            potency: 520,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(INNER_RELEASE_STACK.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: true,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: true,
            use_type: UseType::UseOnTarget,
        };

        WarriorDatabase {
            heavy_swing: HEAVY_SWING,
            maim: MAIM,
            storms_eye: STORMS_EYE,
            infuriate: INFURIATE,
            fell_cleave: FELL_CLEAVE,
            onslaught: ONSLAUGHT,
            upheaval: UPHEAVAL,
            inner_release: INNER_RELEASE,
            primal_rend: PRIMAL_REND,
            storms_path: STORMS_PATH,
            inner_chaos: INNER_CHAOS,
            fell_cleave_inner: FELL_CLEAVE_INNER,

            surging_tempest: SURGING_TEMPEST,
            nascent_chaos: NASCENT_CHAOS,

            inner_release_stack: INNER_RELEASE_STACK,
            primal_rend_ready: PRIMAL_REND_READY,
        }
    }
}

pub(crate) fn make_warrior_skill_list(player_id: IdType) -> SkillTable<AttackSkill> {
    let db = WarriorDatabase::new(player_id);

    let warrior_skill_list: Vec<AttackSkill> = vec![
        db.heavy_swing,
        db.maim,
        db.storms_eye,
        db.infuriate,
        db.fell_cleave,
        db.onslaught,
        db.upheaval,
        db.inner_release,
        db.primal_rend,
        db.storms_path,
        db.inner_chaos,
        db.fell_cleave_inner,
    ];

    make_skill_table(warrior_skill_list)
}
