use crate::event::ffxiv_event::FfxivEvent;
use crate::event::ffxiv_event::FfxivEvent::{ApplyBuff, RefreshBuff};
use crate::event::ffxiv_player_internal_event::FfxivPlayerInternalEvent::RemoveBuff;
use crate::id_entity::IdEntity;
use crate::jobs_skill_data::{CasterGlobalSkill, PotionSkill};
use crate::rotation::SkillTable;
use crate::skill::attack_skill::AttackSkill;
use crate::skill::damage_category::DamageCategory::MagicalDot;
use crate::skill::use_type::UseType;
use crate::skill::ResourceRequirements::{Resource, UseBuff};
use crate::skill::{make_skill_table, ResourceRequirements};
use crate::status::buff_status::BuffStatus;
use crate::status::debuff_status::DebuffStatus;
use crate::status::status_info::StatusInfo;
use crate::types::IdType;
use std::collections::HashMap;

pub(crate) struct BlackmageDatabase {
    pub(crate) transpose_ice_to_fire: AttackSkill,
    pub(crate) high_thunder: AttackSkill,
    pub(crate) transpose_fire_to_ice: AttackSkill,
    pub(crate) fire4: AttackSkill,
    pub(crate) fire4_triplecast: AttackSkill,
    pub(crate) fire3_ice: AttackSkill,
    pub(crate) fire3_f1: AttackSkill,
    pub(crate) despair: AttackSkill,
    pub(crate) despair_triplecast: AttackSkill,
    pub(crate) xenoglossy: AttackSkill,
    pub(crate) paradox: AttackSkill,
    pub(crate) blizzard3: AttackSkill,
    pub(crate) blizzard4: AttackSkill,
    pub(crate) triplecast: AttackSkill,
    pub(crate) leylines: AttackSkill,
    pub(crate) manafont: AttackSkill,
    pub(crate) amplifier: AttackSkill,
    pub(crate) fire3_opener: AttackSkill,
    pub(crate) blizzard3_opener: AttackSkill,
    pub(crate) flare_star: AttackSkill,
    pub(crate) swiftcast: AttackSkill,
    pub(crate) blizzard3_transpose_swift: AttackSkill,
    pub(crate) flare_star_triplecast: AttackSkill,
    pub(crate) blizzard3_transpose_triplecast: AttackSkill,
    pub(crate) fire_iii_proc: AttackSkill,

    pub(crate) triplecast_buff: BuffStatus,
    pub(crate) high_thunder_dot: DebuffStatus,
    pub(crate) thunderhead: BuffStatus,
    pub(crate) swiftcast_buff: BuffStatus,
    pub(crate) leylines_buff: BuffStatus,
    pub(crate) astral_fire3: BuffStatus,
    pub(crate) umbral_ice1: BuffStatus,
    pub(crate) astral_fire1: BuffStatus,
    pub(crate) firestarter: BuffStatus,

    pub(crate) potion: AttackSkill,
    pub(crate) potion_buff: BuffStatus,
}
impl BlackmageDatabase {
    pub(crate) fn new(player_id: IdType) -> Self {
        let caster_skills = CasterGlobalSkill::new(player_id);

        let TRIPLECAST_BUFF: BuffStatus = {
            BuffStatus {
                id: 1700,
                name: String::from("Triplecast"),
                owner_id: player_id,
                duration_left_millisecond: 0,
                status_info: vec![StatusInfo::None],
                duration_millisecond: 15000,
                is_raidwide: false,
                stacks: 3,
                max_stacks: 3,
                trigger_proc_event_on_gcd: vec![],
            }
        };
        let HIGH_THUNDER_DOT: DebuffStatus = DebuffStatus {
            id: 1701,
            name: String::from("High Thunder"),
            owner_id: player_id,
            potency: Some(60),
            trait_percent: Some(130),
            damage_category: Some(MagicalDot),
            damage_skill_id: Some(1701),
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            snapshotted_buffs: Default::default(),
            snapshotted_debuffs: Default::default(),
            max_stacks: 1,
        };
        let THUNDERHEAD: BuffStatus = BuffStatus {
            id: 1702,
            name: String::from("Thunderhead"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let LEYLINES_BUFF: BuffStatus = BuffStatus {
            id: 1703,
            name: String::from("Ley Lines"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::SpeedPercent(15)],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let ASTRAL_FIRE_I: BuffStatus = BuffStatus {
            id: 1704,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 15000,
            is_raidwide: false,
            name: "Astral Fire I".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let UMBRAL_ICE_I: BuffStatus = BuffStatus {
            id: 1705,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 15000,
            is_raidwide: false,
            name: "Umbral Ice 1".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let ASTRAL_FIRE_III: BuffStatus = BuffStatus {
            id: 1706,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 15000,
            is_raidwide: false,
            name: "Astral Fire III".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let FIRESTARTER: BuffStatus = BuffStatus {
            id: 1708,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 30000,
            is_raidwide: false,
            name: "Firestarter".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };

        let TRANSPOSE_ICE_TO_FIRE: AttackSkill = AttackSkill {
            id: 1700,
            name: "Transpose".to_string(),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![
                ApplyBuff(player_id, player_id, ASTRAL_FIRE_I.clone(), 15000, 15000, 0),
                ApplyBuff(player_id, player_id, THUNDERHEAD.clone(), 30000, 30000, 0),
            ],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            resource_required: vec![],
            resource_created: HashMap::from([(1, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 5000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };

        let HIGH_THUNDER: AttackSkill = AttackSkill {
            id: 1701,
            name: "High Thunder".to_string(),
            player_id,
            potency: 150,
            trait_percent: 130,
            additional_skill_events: vec![FfxivEvent::ApplyDebuff(
                player_id,
                HIGH_THUNDER_DOT.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![UseBuff(THUNDERHEAD.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let TRANSPOSE_FIRE_TO_ICE: AttackSkill = AttackSkill {
            id: 1702,
            name: "Transpose".to_string(),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![
                ApplyBuff(player_id, player_id, UMBRAL_ICE_I.clone(), 15000, 15000, 0),
                ApplyBuff(player_id, player_id, THUNDERHEAD.clone(), 30000, 30000, 0),
            ],
            proc_events: vec![],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            resource_required: vec![UseBuff(ASTRAL_FIRE_III.get_id()), Resource(4, 1)],
            resource_created: HashMap::from([(1, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 5000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };
        let FIRE_IV: AttackSkill = AttackSkill {
            id: 1703,
            name: "Fire IV".to_string(),
            player_id,
            potency: 320,
            trait_percent: 234,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 2800,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![],
            resource_created: HashMap::from([(2, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let FIRE_IV_TRIPLECAST: AttackSkill = AttackSkill {
            id: 1704,
            name: "Fire IV".to_string(),
            player_id,
            potency: 310,
            trait_percent: 234,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![ResourceRequirements::UseBuff(TRIPLECAST_BUFF.get_id())],
            resource_created: HashMap::from([(2, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(FIRE_IV.get_id()),
            use_type: UseType::UseOnTarget,
        };

        let FIRE_III_ICE: AttackSkill = AttackSkill {
            id: 1705,
            name: "Fire III Ice".to_string(),
            player_id,
            potency: 280,
            trait_percent: 91,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                ASTRAL_FIRE_III.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 850,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![],
            resource_created: HashMap::from([(1, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let FIRE_III_ASTRAL_FIRE_I: AttackSkill = AttackSkill {
            id: 1706,
            name: "Fire III Astral Fire I".to_string(),
            player_id,
            potency: 280,
            trait_percent: 156,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                ASTRAL_FIRE_III.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![
                UseBuff(FIRESTARTER.get_id()),
                UseBuff(ASTRAL_FIRE_I.get_id()),
            ],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(FIRE_III_ICE.get_id()),
            use_type: UseType::UseOnTarget,
        };

        let DESPAIR: AttackSkill = AttackSkill {
            id: 1707,
            name: "Despair".to_string(),
            player_id,
            potency: 350,
            trait_percent: 234,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                ASTRAL_FIRE_III.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 3000,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![ResourceRequirements::Resource(2, 6)],
            resource_created: HashMap::from([(3, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let DESPAIR_TRIPLECAST: AttackSkill = AttackSkill {
            id: 1708,
            name: "Despair".to_string(),
            player_id,
            potency: 340,
            trait_percent: 234,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                ASTRAL_FIRE_III.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![
                UseBuff(TRIPLECAST_BUFF.get_id()),
                ResourceRequirements::Resource(2, 6),
            ],
            resource_created: HashMap::from([(3, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(DESPAIR.get_id()),
            use_type: UseType::UseOnTarget,
        };

        let XENOGLOSSY: AttackSkill = AttackSkill {
            id: 1710,
            name: "Xenoglossy".to_string(),
            player_id,
            potency: 880,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![ResourceRequirements::Resource(0, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let PARADOX: AttackSkill = AttackSkill {
            id: 1711,
            name: "Paradox".to_string(),
            player_id,
            potency: 520,
            trait_percent: 130,
            additional_skill_events: vec![
                FfxivEvent::RefreshBuff(
                    player_id,
                    player_id,
                    ASTRAL_FIRE_III.clone(),
                    15000,
                    15000,
                    0,
                ),
                ApplyBuff(player_id, player_id, FIRESTARTER.clone(), 15000, 15000, 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![ResourceRequirements::Resource(1, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let BLIZZARD_III: AttackSkill = AttackSkill {
            id: 1712,
            name: "Blizzard III".to_string(),
            player_id,
            potency: 280,
            trait_percent: 91,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                THUNDERHEAD.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: Some(2),
            delay_millisecond: None,
            casting_time_millisecond: 850,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![Resource(4, 1), UseBuff(ASTRAL_FIRE_III.get_id())],
            resource_created: HashMap::from([(1, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let BLIZZARD_IV: AttackSkill = AttackSkill {
            id: 1713,
            name: "Blizzard IV".to_string(),
            player_id,
            potency: 320,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(3),
            delay_millisecond: None,
            casting_time_millisecond: 2500,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let TRIPLECAST: AttackSkill = AttackSkill {
            id: 1714,
            name: "Triplecast".to_string(),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                TRIPLECAST_BUFF.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 60000,
            current_cooldown_millisecond: 0,
            stacks: 2,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };

        let LEY_LINES: AttackSkill = AttackSkill {
            id: 1715,
            name: "Ley Lines".to_string(),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                LEYLINES_BUFF.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 120000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };

        let MANAFONT: AttackSkill = AttackSkill {
            id: 1716,
            name: "Manafont".to_string(),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![
                ApplyBuff(player_id, player_id, THUNDERHEAD.clone(), 30000, 30000, 0),
                RefreshBuff(
                    player_id,
                    player_id,
                    ASTRAL_FIRE_III.clone(),
                    15000,
                    15000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            resource_required: vec![Resource(4, 1)],
            resource_created: HashMap::from([(1, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 90000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };
        let AMPLIFIER: AttackSkill = AttackSkill {
            id: 1717,
            name: "Amplifier".to_string(),
            player_id,
            potency: 0,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 120000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };

        let FIRE_III_OPENER: AttackSkill = AttackSkill {
            id: 1718,
            name: "Fire III".to_string(),
            player_id,
            potency: 280,
            trait_percent: 130,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                ASTRAL_FIRE_III.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 3500,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(FIRE_III_ICE.get_id()),
            use_type: UseType::UseOnTarget,
        };

        let BLIZZARD_III_OPENER: AttackSkill = AttackSkill {
            id: 1719,
            name: "Blizzard III".to_string(),
            player_id,
            potency: 280,
            trait_percent: 130,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                THUNDERHEAD.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: Some(2),
            delay_millisecond: None,
            casting_time_millisecond: 3500,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(BLIZZARD_III.get_id()),
            use_type: UseType::UseOnTarget,
        };
        let FLARE_STAR: AttackSkill = AttackSkill {
            id: 1720,
            name: "Flare Star".to_string(),
            player_id,
            potency: 400,
            trait_percent: 234,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 3500,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![Resource(3, 1)],
            resource_created: HashMap::from([(4, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let BLIZZARD_III_TRANSPOSE_SWIFT: AttackSkill = AttackSkill {
            id: 1721,
            name: "Blizzard III".to_string(),
            player_id,
            potency: 280,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(2),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![
                UseBuff(UMBRAL_ICE_I.get_id()),
                UseBuff(caster_skills.swiftcast.get_id()),
            ],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(BLIZZARD_III.get_id()),
            use_type: UseType::UseOnTarget,
        };

        let FLARE_STAR_TRIPLECAST: AttackSkill = AttackSkill {
            id: 1722,
            name: "Flare Star".to_string(),
            player_id,
            potency: 400,
            trait_percent: 234,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![UseBuff(TRIPLECAST_BUFF.get_id()), Resource(3, 1)],
            resource_created: HashMap::from([(4, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(FLARE_STAR.get_id()),
            use_type: UseType::UseOnTarget,
        };

        let BLIZZARD_III_TRANSPOSE_TRIPLECAST: AttackSkill = AttackSkill {
            id: 1723,
            name: "Blizzard III".to_string(),
            player_id,
            potency: 280,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(2),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![
                UseBuff(UMBRAL_ICE_I.get_id()),
                UseBuff(TRIPLECAST_BUFF.get_id()),
            ],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(BLIZZARD_III.get_id()),
            use_type: UseType::UseOnTarget,
        };
        let FIRE_III_PROC: AttackSkill = AttackSkill {
            id: 1724,
            name: "Fire III Proc".to_string(),
            player_id,
            potency: 280,
            trait_percent: 234,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                ASTRAL_FIRE_III.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![UseBuff(FIRESTARTER.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(FIRE_III_ICE.get_id()),
            use_type: UseType::UseOnTarget,
        };

        let potion_skills = PotionSkill::new(player_id);

        BlackmageDatabase {
            transpose_ice_to_fire: TRANSPOSE_ICE_TO_FIRE,
            high_thunder: HIGH_THUNDER,
            transpose_fire_to_ice: TRANSPOSE_FIRE_TO_ICE,
            fire4: FIRE_IV,
            fire4_triplecast: FIRE_IV_TRIPLECAST,
            fire3_ice: FIRE_III_ICE,
            fire3_f1: FIRE_III_ASTRAL_FIRE_I,
            despair: DESPAIR,
            despair_triplecast: DESPAIR_TRIPLECAST,
            xenoglossy: XENOGLOSSY,
            paradox: PARADOX,
            blizzard3: BLIZZARD_III,
            blizzard4: BLIZZARD_IV,
            triplecast: TRIPLECAST,
            leylines: LEY_LINES,
            manafont: MANAFONT,
            fire3_opener: FIRE_III_OPENER,
            amplifier: AMPLIFIER,
            blizzard3_opener: BLIZZARD_III_OPENER,
            flare_star: FLARE_STAR,
            blizzard3_transpose_swift: BLIZZARD_III_TRANSPOSE_SWIFT,
            flare_star_triplecast: FLARE_STAR_TRIPLECAST,
            blizzard3_transpose_triplecast: BLIZZARD_III_TRANSPOSE_TRIPLECAST,
            fire_iii_proc: FIRE_III_PROC,

            swiftcast: caster_skills.swiftcast,

            triplecast_buff: TRIPLECAST_BUFF,
            high_thunder_dot: HIGH_THUNDER_DOT,
            thunderhead: THUNDERHEAD,
            swiftcast_buff: caster_skills.swiftcast_buff,
            leylines_buff: LEYLINES_BUFF,
            astral_fire3: ASTRAL_FIRE_III,
            umbral_ice1: UMBRAL_ICE_I,
            astral_fire1: ASTRAL_FIRE_I,
            firestarter: FIRESTARTER,

            potion: potion_skills.potion,
            potion_buff: potion_skills.potion_buff,
        }
    }
}

pub(crate) fn make_blackmage_skill_list(player_id: IdType) -> SkillTable<AttackSkill> {
    let db = BlackmageDatabase::new(player_id);

    let blackmage_skill_list: Vec<AttackSkill> = vec![
        db.transpose_ice_to_fire,
        db.high_thunder,
        db.transpose_fire_to_ice,
        db.fire4,
        db.fire4_triplecast,
        db.fire3_ice,
        db.fire3_f1,
        db.despair,
        db.despair_triplecast,
        db.xenoglossy,
        db.manafont,
        db.paradox,
        db.blizzard3,
        db.blizzard4,
        db.triplecast,
        db.leylines,
        db.swiftcast,
        db.amplifier,
        db.fire3_opener,
        db.blizzard3_opener,
        db.flare_star,
        db.blizzard3_transpose_swift,
        db.flare_star_triplecast,
        db.blizzard3_transpose_triplecast,
        db.fire_iii_proc,
        db.potion,
    ];

    make_skill_table(blackmage_skill_list)
}
