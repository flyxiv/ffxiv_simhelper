use crate::event::ffxiv_event::FfxivEvent;
use crate::event::ffxiv_event::FfxivEvent::ApplyBuff;
use crate::id_entity::IdEntity;
use crate::jobs_skill_data::CasterGlobalSkill;
use crate::rotation::SkillTable;
use crate::skill::attack_skill::AttackSkill;
use crate::skill::use_type::UseType;
use crate::skill::ResourceRequirements::UseBuff;
use crate::skill::{make_skill_table, ResourceRequirements};
use crate::status::buff_status::BuffStatus;
use crate::status::debuff_status::DebuffStatus;
use crate::status::status_info::StatusInfo;
use crate::IdType;
use std::collections::HashMap;

pub(crate) struct BlackmageDatabase {
    pub(crate) transpose: AttackSkill,
    pub(crate) thunder3: AttackSkill,
    pub(crate) thunder3_procced: AttackSkill,
    pub(crate) fire4: AttackSkill,
    pub(crate) fire4_triplecast: AttackSkill,
    pub(crate) fire3_ice: AttackSkill,
    pub(crate) fire3_f1: AttackSkill,
    pub(crate) despair: AttackSkill,
    pub(crate) despair_triplecast: AttackSkill,
    pub(crate) despair_swiftcast: AttackSkill,
    pub(crate) xenoglossy: AttackSkill,
    pub(crate) paradox: AttackSkill,
    pub(crate) blizzard3: AttackSkill,
    pub(crate) blizzard4: AttackSkill,
    pub(crate) triplecast: AttackSkill,
    pub(crate) leylines: AttackSkill,
    pub(crate) swiftcast: AttackSkill,
    pub(crate) sharpcast: AttackSkill,
    pub(crate) amplifier: AttackSkill,
    pub(crate) fire3_opener: AttackSkill,

    pub(crate) triplecast_buff: BuffStatus,
    pub(crate) thunder3_dot: DebuffStatus,
    pub(crate) swiftcast_buff: BuffStatus,
    pub(crate) sharpcast_buff: BuffStatus,
    pub(crate) leylines_buff: BuffStatus,
    pub(crate) astral_fire3: BuffStatus,
    pub(crate) astral_fire1: BuffStatus,
    pub(crate) thunder3_proc: BuffStatus,
}
impl BlackmageDatabase {
    pub(crate) fn new(player_id: IdType) -> Self {
        let TRIPLECAST_BUFF: BuffStatus = {
            BuffStatus {
                id: 1700,
                name: String::from("Triplecast"),
                owner_id: player_id,
                duration_left_millisecond: 0,
                status_info: vec![StatusInfo::None],
                duration_millisecond: 15000,
                is_raidwide: false,
                stacks: 3,
                max_stacks: 3,
                trigger_proc_event_on_gcd: vec![],
            }
        };
        let THUNDER_III_DOT: DebuffStatus = DebuffStatus {
            id: 1701,
            name: String::from("Thunder III"),
            owner_id: player_id,
            potency: Some(35),
            damage_skill_id: Some(1701),
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            snapshotted_buffs: Default::default(),
            snapshotted_debuffs: Default::default(),
            max_stacks: 1,
        };
        let SHARPCAST_BUFF: BuffStatus = BuffStatus {
            id: 1702,
            name: String::from("Sharpcast"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let LEYLINES_BUFF: BuffStatus = BuffStatus {
            id: 1703,
            name: String::from("Ley Lines"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::SpeedPercent(15)],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let ASTRAL_FIRE_I: BuffStatus = BuffStatus {
            id: 1704,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 15000,
            is_raidwide: false,
            name: "Astral Fire I".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let THUNDER_III_PROC: BuffStatus = BuffStatus {
            id: 1705,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 40000,
            is_raidwide: false,
            name: "Thunder III Proc".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let ASTRAL_FIRE_III: BuffStatus = BuffStatus {
            id: 1706,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 15000,
            is_raidwide: false,
            name: "Astral Fire III".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };

        let TRANSPOSE: AttackSkill = AttackSkill {
            id: 1700,
            name: "Transpose".to_string(),
            player_id,
            potency: 0,
            trait_multiplier: 0.0,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                ASTRAL_FIRE_I.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            resource_required: vec![],
            resource_created: HashMap::from([(1, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 5000,
            current_cooldown_millisecond: 0,
            stacks: 0,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };

        let THUNDER_III: AttackSkill = AttackSkill {
            id: 1701,
            name: "Thunder III".to_string(),
            player_id,
            potency: 50,
            trait_multiplier: 1.0,
            additional_skill_events: vec![
                FfxivEvent::ApplyDebuff(player_id, THUNDER_III_DOT.clone(), 30000, 30000, 0),
                ApplyBuff(
                    player_id,
                    player_id,
                    THUNDER_III_PROC.clone(),
                    40000,
                    40000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 2500,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![UseBuff(SHARPCAST_BUFF.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let THUNDER_III_PROCCED: AttackSkill = AttackSkill {
            id: 1702,
            name: "Thunder III".to_string(),
            player_id,
            potency: 400,
            trait_multiplier: 1.0,
            additional_skill_events: vec![
                FfxivEvent::ApplyDebuff(player_id, THUNDER_III_DOT.clone(), 30000, 30000, 0),
                ApplyBuff(
                    player_id,
                    player_id,
                    THUNDER_III_PROC.clone(),
                    40000,
                    40000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![
                UseBuff(THUNDER_III_PROC.get_id()),
                UseBuff(SHARPCAST_BUFF.get_id()),
            ],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let FIRE_IV: AttackSkill = AttackSkill {
            id: 1703,
            name: "Fire IV".to_string(),
            player_id,
            potency: 300,
            trait_multiplier: 1.8,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 2800,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![],
            resource_created: HashMap::from([(2, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let FIRE_IV_TRIPLECAST: AttackSkill = AttackSkill {
            id: 1704,
            name: "Fire IV".to_string(),
            player_id,
            potency: 300,
            trait_multiplier: 1.8,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![],
            resource_created: HashMap::from([(2, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let FIRE_III_ICE: AttackSkill = AttackSkill {
            id: 1705,
            name: "Fire III Ice".to_string(),
            player_id,
            potency: 260,
            trait_multiplier: 0.7,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                ASTRAL_FIRE_III.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 850,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![],
            resource_created: HashMap::from([(1, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let FIRE_III_ASTRAL_FIRE_I: AttackSkill = AttackSkill {
            id: 1706,
            name: "Fire III Astral Fire I".to_string(),
            player_id,
            potency: 260,
            trait_multiplier: 1.2,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                ASTRAL_FIRE_III.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![UseBuff(ASTRAL_FIRE_I.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let DESPAIR: AttackSkill = AttackSkill {
            id: 1707,
            name: "Despair".to_string(),
            player_id,
            potency: 340,
            trait_multiplier: 1.8,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                ASTRAL_FIRE_III.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 3000,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let DESPAIR_TRIPLECAST: AttackSkill = AttackSkill {
            id: 1708,
            name: "Despair".to_string(),
            player_id,
            potency: 340,
            trait_multiplier: 1.8,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                ASTRAL_FIRE_III.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let DESPAIR_SWIFTCAST: AttackSkill = AttackSkill {
            id: 1709,
            name: "Despair".to_string(),
            player_id,
            potency: 340,
            trait_multiplier: 1.8,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                ASTRAL_FIRE_III.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let XENOGLOSSY: AttackSkill = AttackSkill {
            id: 1710,
            name: "Xenoglossy".to_string(),
            player_id,
            potency: 880,
            trait_multiplier: 1.8,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![ResourceRequirements::Resource(0, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let PARADOX: AttackSkill = AttackSkill {
            id: 1711,
            name: "Paradox".to_string(),
            player_id,
            potency: 500,
            trait_multiplier: 1.0,
            additional_skill_events: vec![FfxivEvent::RefreshBuff(
                player_id,
                player_id,
                ASTRAL_FIRE_III.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 2500,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![ResourceRequirements::Resource(1, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let BLIZZARD_III: AttackSkill = AttackSkill {
            id: 1712,
            name: "Blizzard III".to_string(),
            player_id,
            potency: 260,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(2),
            delay_millisecond: None,
            casting_time_millisecond: 850,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![],
            resource_created: HashMap::from([(1, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let BLIZZARD_IV: AttackSkill = AttackSkill {
            id: 1713,
            name: "Blizzard IV".to_string(),
            player_id,
            potency: 310,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(3),
            delay_millisecond: None,
            casting_time_millisecond: 2500,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let TRIPLECAST: AttackSkill = AttackSkill {
            id: 1714,
            name: "Triplecast".to_string(),
            player_id,
            potency: 0,
            trait_multiplier: 0.0,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                TRIPLECAST_BUFF.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 60000,
            current_cooldown_millisecond: 0,
            stacks: 2,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };

        let LEY_LINES: AttackSkill = AttackSkill {
            id: 1715,
            name: "Ley Lines".to_string(),
            player_id,
            potency: 0,
            trait_multiplier: 0.0,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                LEYLINES_BUFF.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 120000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };

        let SHARPCAST: AttackSkill = AttackSkill {
            id: 1716,
            name: "Sharpcast".to_string(),
            player_id,
            potency: 0,
            trait_multiplier: 0.0,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                SHARPCAST_BUFF.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 30000,
            current_cooldown_millisecond: 0,
            stacks: 2,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };
        let AMPLIFIER: AttackSkill = AttackSkill {
            id: 1717,
            name: "Amplifier".to_string(),
            player_id,
            potency: 0,
            trait_multiplier: 0.0,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 120000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };

        let FIRE_III_OPENER: AttackSkill = AttackSkill {
            id: 1718,
            name: "Fire III".to_string(),
            player_id,
            potency: 260,
            trait_multiplier: 1.0,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                ASTRAL_FIRE_III.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 3500,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let caster_skills = CasterGlobalSkill::new(player_id);

        BlackmageDatabase {
            transpose: TRANSPOSE,
            thunder3: THUNDER_III,
            thunder3_procced: THUNDER_III_PROCCED,
            fire4: FIRE_IV,
            fire4_triplecast: FIRE_IV_TRIPLECAST,
            fire3_ice: FIRE_III_ICE,
            fire3_f1: FIRE_III_ASTRAL_FIRE_I,
            despair: DESPAIR,
            despair_triplecast: DESPAIR_TRIPLECAST,
            despair_swiftcast: DESPAIR_SWIFTCAST,
            xenoglossy: XENOGLOSSY,
            paradox: PARADOX,
            blizzard3: BLIZZARD_III,
            blizzard4: BLIZZARD_IV,
            triplecast: TRIPLECAST,
            leylines: LEY_LINES,
            swiftcast: caster_skills.swiftcast,
            sharpcast: SHARPCAST,
            fire3_opener: FIRE_III_OPENER,
            amplifier: AMPLIFIER,

            triplecast_buff: TRIPLECAST_BUFF,
            thunder3_dot: THUNDER_III_DOT,
            swiftcast_buff: caster_skills.swiftcast_buff,
            sharpcast_buff: SHARPCAST_BUFF,
            leylines_buff: LEYLINES_BUFF,
            astral_fire3: ASTRAL_FIRE_III,
            astral_fire1: ASTRAL_FIRE_I,
            thunder3_proc: THUNDER_III_PROC,
        }
    }
}

pub(crate) fn make_blackmage_skill_list(player_id: IdType) -> SkillTable<AttackSkill> {
    let db = BlackmageDatabase::new(player_id);

    let blackmage_skill_list: Vec<AttackSkill> = vec![
        db.transpose,
        db.thunder3,
        db.thunder3_procced,
        db.fire4,
        db.fire4_triplecast,
        db.fire3_ice,
        db.fire3_f1,
        db.despair,
        db.despair_triplecast,
        db.despair_swiftcast,
        db.xenoglossy,
        db.paradox,
        db.blizzard3,
        db.blizzard4,
        db.triplecast,
        db.leylines,
        db.swiftcast,
        db.sharpcast,
        db.amplifier,
        db.fire3_opener,
    ];

    make_skill_table(blackmage_skill_list)
}
