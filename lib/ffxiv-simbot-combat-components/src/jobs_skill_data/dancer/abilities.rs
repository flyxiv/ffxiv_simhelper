use crate::event::ffxiv_event::FfxivEvent;
use crate::rotation::SkillTable;
use crate::skill::attack_skill::AttackSkill;
use crate::skill::use_type::UseType;
use crate::skill::{make_skill_table, ResourceRequirements};
use crate::status::buff_status::BuffStatus;
use crate::status::status_info::StatusInfo;
use crate::IdType;
use std::collections::HashMap;

pub(crate) struct DancerDatabase {
    pub(crate) cascade: AttackSkill,
    pub(crate) fountain: AttackSkill,
    pub(crate) standard_step: AttackSkill,
    pub(crate) technical_step: AttackSkill,
    pub(crate) devilment: AttackSkill,
    pub(crate) flourish: AttackSkill,
    pub(crate) fan_dance1: AttackSkill,
    pub(crate) fan_dance3: AttackSkill,
    pub(crate) fan_dance4: AttackSkill,
    pub(crate) reverse_cascade: AttackSkill,
    pub(crate) fountainfall: AttackSkill,
    pub(crate) saber_dance: AttackSkill,
    pub(crate) starfall_dance: AttackSkill,
    pub(crate) reverse_cascade_flourish: AttackSkill,
    pub(crate) fountainfall_flourish: AttackSkill,
    pub(crate) tillana: AttackSkill,

    pub(crate) standard_step_buff: BuffStatus,
    pub(crate) standard_step_proc_buff: BuffStatus,
    pub(crate) technical_step_buff: BuffStatus,
    pub(crate) technical_step_proc_buff: BuffStatus,
    pub(crate) devilment_buff: BuffStatus,
    pub(crate) threefold_fan_dance: BuffStatus,
    pub(crate) fourfold_fan_dance: BuffStatus,
    pub(crate) silken_symmetry: BuffStatus,
    pub(crate) silken_flow: BuffStatus,
    pub(crate) starfall_ready: BuffStatus,
    pub(crate) flourishing_finish: BuffStatus,
}

impl DancerDatabase {
    pub(crate) fn new(player_id: IdType, partner_player_id: IdType) -> Self {
        let STANDARD_STEP_BUFF: BuffStatus = BuffStatus {
            id: 1500,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(5)],
            duration_millisecond: 60000,
            is_raidwide: false,
            name: "Standard Step buff".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let STANDARD_STEP_PROC_BUFF: BuffStatus = BuffStatus {
            id: 1501,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 60000,
            is_raidwide: false,
            name: "Standard Buff proc".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![(
                FfxivEvent::IncreasePlayerResource(player_id, 0, 5, 0),
                20,
            )],
        };
        let TECHNICAL_STEP_BUFF: BuffStatus = BuffStatus {
            id: 1502,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(5)],
            duration_millisecond: 20000,
            is_raidwide: true,
            name: "Technical Step buff".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let TECHNICAL_STEP_PROC_BUFF: BuffStatus = BuffStatus {
            id: 1503,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 20000,
            is_raidwide: true,
            name: "Technical Step proc".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![(
                FfxivEvent::IncreasePlayerResource(player_id, 0, 5, 0),
                20,
            )],
        };
        let DEVILMENT_BUFF: BuffStatus = BuffStatus {
            id: 1504,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![
                StatusInfo::CritHitRatePercent(20),
                StatusInfo::DirectHitRatePercent(20),
            ],
            duration_millisecond: 20000,
            is_raidwide: false,
            name: "Devilment Buff".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let THREEFOLD_FAN_DANCE: BuffStatus = BuffStatus {
            id: 1505,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            name: "Threefold Fan Dance".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let FOURFOLD_FAN_DANCE: BuffStatus = BuffStatus {
            id: 1506,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            name: "Fourfold Fan Dance".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let SILKEN_SYMMETRY: BuffStatus = BuffStatus {
            id: 1507,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            name: "Silken Symmetry".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let SILKEN_FLOW: BuffStatus = BuffStatus {
            id: 1508,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            name: "Silken Flow".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let FLOURSHING_STARFALL: BuffStatus = BuffStatus {
            id: 1509,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 20000,
            is_raidwide: false,
            name: "Flourishing Starfall".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let FLOURSHING_SYMMETRY: BuffStatus = BuffStatus {
            id: 1510,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            name: "Flourishing Symmetry".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let FLOURSHING_FLOW: BuffStatus = BuffStatus {
            id: 1511,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            name: "Flourishing Flow".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };

        let FLOURISHING_FINISH: BuffStatus = BuffStatus {
            id: 1512,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            name: "Flourishing Finish".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };

        let CASCADE: AttackSkill = AttackSkill {
            id: 1500,
            name: "Cascade".to_string(),
            player_id,
            potency: 220,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![(
                FfxivEvent::ApplyBuff(
                    player_id,
                    player_id,
                    SILKEN_SYMMETRY.clone(),
                    30000,
                    30000,
                    0,
                ),
                50,
            )],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 5)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let FOUNTAIN: AttackSkill = AttackSkill {
            id: 1501,
            name: "Fountain".to_string(),
            player_id,
            potency: 280,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![(
                FfxivEvent::ApplyBuff(player_id, player_id, SILKEN_FLOW.clone(), 30000, 30000, 0),
                50,
            )],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 5)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let STANDARD_STEP: AttackSkill = AttackSkill {
            id: 1502,
            name: "Standard Step".to_string(),
            player_id,
            potency: 720,
            trait_multiplier: 1.0,
            additional_skill_events: vec![
                FfxivEvent::ApplyBuff(
                    player_id,
                    player_id,
                    STANDARD_STEP_BUFF.clone(),
                    60000,
                    60000,
                    0,
                ),
                FfxivEvent::ApplyBuff(
                    player_id,
                    player_id,
                    STANDARD_STEP_PROC_BUFF.clone(),
                    60000,
                    60000,
                    0,
                ),
                FfxivEvent::ApplyBuff(
                    player_id,
                    partner_player_id,
                    STANDARD_STEP_BUFF.clone(),
                    60000,
                    60000,
                    0,
                ),
                FfxivEvent::ApplyBuff(
                    player_id,
                    partner_player_id,
                    STANDARD_STEP_PROC_BUFF.clone(),
                    60000,
                    60000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1500,
            charging_time_millisecond: 3500,
            is_speed_buffed: true,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };

        let TECHNICAL_STEP: AttackSkill = AttackSkill {
            id: 1503,
            name: "Technical Step".to_string(),
            player_id,
            potency: 1200,
            trait_multiplier: 1.0,
            additional_skill_events: vec![
                FfxivEvent::ApplyRaidBuff(player_id, TECHNICAL_STEP_BUFF.clone(), 20000, 20000, 0),
                FfxivEvent::ApplyRaidBuff(
                    player_id,
                    TECHNICAL_STEP_PROC_BUFF.clone(),
                    20000,
                    20000,
                    0,
                ),
                FfxivEvent::ApplyBuff(
                    player_id,
                    player_id,
                    FLOURISHING_FINISH.clone(),
                    30000,
                    30000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1500,
            charging_time_millisecond: 5500,
            is_speed_buffed: true,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 120000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };

        let DEVILMENT: AttackSkill = AttackSkill {
            id: 1504,
            name: "Devilment".to_string(),
            player_id,
            potency: 0,
            trait_multiplier: 1.0,
            additional_skill_events: vec![
                FfxivEvent::ApplyBuff(
                    player_id,
                    player_id,
                    DEVILMENT_BUFF.clone(),
                    20000,
                    20000,
                    0,
                ),
                FfxivEvent::ApplyBuff(
                    player_id,
                    partner_player_id,
                    DEVILMENT_BUFF.clone(),
                    20000,
                    20000,
                    0,
                ),
                FfxivEvent::ApplyBuff(
                    player_id,
                    player_id,
                    FLOURSHING_STARFALL.clone(),
                    20000,
                    20000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 120000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };

        let FLOURISH: AttackSkill = AttackSkill {
            id: 1505,
            name: "Flourish".to_string(),
            player_id,
            potency: 0,
            trait_multiplier: 1.0,
            additional_skill_events: vec![
                FfxivEvent::ApplyBuff(
                    player_id,
                    player_id,
                    THREEFOLD_FAN_DANCE.clone(),
                    30000,
                    30000,
                    0,
                ),
                FfxivEvent::ApplyBuff(
                    player_id,
                    player_id,
                    FOURFOLD_FAN_DANCE.clone(),
                    30000,
                    30000,
                    0,
                ),
                FfxivEvent::ApplyBuff(
                    player_id,
                    player_id,
                    FLOURSHING_FLOW.clone(),
                    30000,
                    30000,
                    0,
                ),
                FfxivEvent::ApplyBuff(
                    player_id,
                    player_id,
                    FLOURSHING_SYMMETRY.clone(),
                    30000,
                    30000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 60000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };

        let FAN_DANCE_I: AttackSkill = AttackSkill {
            id: 1506,
            name: "Fan Dance I".to_string(),
            player_id,
            potency: 150,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![(
                FfxivEvent::ApplyBuff(
                    player_id,
                    player_id,
                    THREEFOLD_FAN_DANCE.clone(),
                    30000,
                    30000,
                    0,
                ),
                50,
            )],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            resource_required: vec![ResourceRequirements::Resource(1, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 1000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let FAN_DANCE_III: AttackSkill = AttackSkill {
            id: 1507,
            name: "Fan Dance III".to_string(),
            player_id,
            potency: 200,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            resource_required: vec![ResourceRequirements::UseBuff(THREEFOLD_FAN_DANCE.id)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 1000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let FAN_DANCE_IV: AttackSkill = AttackSkill {
            id: 1508,
            name: "Fan Dance IV".to_string(),
            player_id,
            potency: 300,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            resource_required: vec![ResourceRequirements::UseBuff(FOURFOLD_FAN_DANCE.id)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 1000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let REVERSE_CASCADE: AttackSkill = AttackSkill {
            id: 1509,
            name: "Reverse Cascade".to_string(),
            player_id,
            potency: 280,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![(FfxivEvent::IncreasePlayerResource(player_id, 1, 1, 0), 50)],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![ResourceRequirements::UseBuff(SILKEN_SYMMETRY.id)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let FOUNTAINFALL: AttackSkill = AttackSkill {
            id: 1510,
            name: "Fountainfall".to_string(),
            player_id,
            potency: 340,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![(FfxivEvent::IncreasePlayerResource(player_id, 1, 1, 0), 50)],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![ResourceRequirements::UseBuff(SILKEN_FLOW.id)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let SABER_DANCE: AttackSkill = AttackSkill {
            id: 1511,
            name: "Saber Dance".to_string(),
            player_id,
            potency: 480,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![ResourceRequirements::Resource(0, 50)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let STARFALL_DANCE: AttackSkill = AttackSkill {
            id: 1512,
            name: "Starfall Dance".to_string(),
            player_id,
            potency: 600,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![ResourceRequirements::UseBuff(FLOURSHING_STARFALL.id)],
            resource_created: Default::default(),
            is_guaranteed_crit: true,
            is_guaranteed_direct_hit: true,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let REVERSE_CASCADE_FLOURISH: AttackSkill = AttackSkill {
            id: 1513,
            name: "Reverse Cascade Flourish".to_string(),
            player_id,
            potency: 280,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![(FfxivEvent::IncreasePlayerResource(player_id, 1, 1, 0), 50)],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![ResourceRequirements::UseBuff(FLOURSHING_SYMMETRY.id)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let FOUNTAINFALL_FLOURISH: AttackSkill = AttackSkill {
            id: 1514,
            name: "Fountainfall Flourish".to_string(),
            player_id,
            potency: 340,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![(FfxivEvent::IncreasePlayerResource(player_id, 1, 1, 0), 50)],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            resource_required: vec![ResourceRequirements::UseBuff(FLOURSHING_FLOW.id)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let TILLANA: AttackSkill = AttackSkill {
            id: 1515,
            name: "Tillana".to_string(),
            player_id,
            potency: 360,
            trait_multiplier: 1.0,
            additional_skill_events: vec![
                FfxivEvent::ApplyBuff(
                    player_id,
                    player_id,
                    STANDARD_STEP_BUFF.clone(),
                    60000,
                    60000,
                    0,
                ),
                FfxivEvent::ApplyBuff(
                    player_id,
                    player_id,
                    STANDARD_STEP_PROC_BUFF.clone(),
                    60000,
                    60000,
                    0,
                ),
                FfxivEvent::ApplyBuff(
                    player_id,
                    partner_player_id,
                    STANDARD_STEP_BUFF.clone(),
                    60000,
                    60000,
                    0,
                ),
                FfxivEvent::ApplyBuff(
                    player_id,
                    partner_player_id,
                    STANDARD_STEP_PROC_BUFF.clone(),
                    60000,
                    60000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1500,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            resource_required: vec![ResourceRequirements::UseBuff(FLOURISHING_FINISH.id)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };

        DancerDatabase {
            cascade: CASCADE,
            fountain: FOUNTAIN,
            standard_step: STANDARD_STEP,
            technical_step: TECHNICAL_STEP,
            devilment: DEVILMENT,
            flourish: FLOURISH,
            fan_dance1: FAN_DANCE_I,
            fan_dance3: FAN_DANCE_III,
            fan_dance4: FAN_DANCE_IV,
            reverse_cascade: REVERSE_CASCADE,
            fountainfall: FOUNTAINFALL,
            saber_dance: SABER_DANCE,
            starfall_dance: STARFALL_DANCE,
            reverse_cascade_flourish: REVERSE_CASCADE_FLOURISH,
            fountainfall_flourish: FOUNTAINFALL_FLOURISH,
            tillana: TILLANA,

            standard_step_buff: STANDARD_STEP_BUFF,
            standard_step_proc_buff: STANDARD_STEP_PROC_BUFF,
            technical_step_buff: TECHNICAL_STEP_BUFF,
            technical_step_proc_buff: TECHNICAL_STEP_PROC_BUFF,
            devilment_buff: DEVILMENT_BUFF,
            threefold_fan_dance: THREEFOLD_FAN_DANCE,
            fourfold_fan_dance: FOURFOLD_FAN_DANCE,
            silken_symmetry: SILKEN_SYMMETRY,
            silken_flow: SILKEN_FLOW,
            starfall_ready: FLOURSHING_STARFALL,
            flourishing_finish: FLOURISHING_FINISH,
        }
    }
}

pub(crate) fn make_dancer_skill_list(
    player_id: IdType,
    partner_player_id: IdType,
) -> SkillTable<AttackSkill> {
    let db = DancerDatabase::new(player_id, partner_player_id);

    let dancer_skill_list: Vec<AttackSkill> = vec![
        db.cascade,
        db.fountain,
        db.standard_step,
        db.technical_step,
        db.devilment,
        db.flourish,
        db.fan_dance1,
        db.fan_dance3,
        db.fan_dance4,
        db.reverse_cascade,
        db.fountainfall,
        db.saber_dance,
        db.starfall_dance,
        db.reverse_cascade_flourish,
        db.fountainfall_flourish,
        db.tillana,
    ];

    make_skill_table(dancer_skill_list)
}
