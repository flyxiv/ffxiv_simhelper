use crate::event::ffxiv_event::FfxivEvent;
use crate::event::ffxiv_event::FfxivEvent::{
    AddTicker, ApplyBuff, ApplyRaidBuff, RemoveRaidBuff, RemoveTargetBuff, RemoveTicker,
};
use crate::event::FfxivEventQueue;
use crate::event_ticker::ffxiv_event_ticker::FfxivEventTicker;
use crate::event_ticker::independent_ticker::IndependentTicker;
use crate::event_ticker::TickerKey;
use crate::id_entity::IdEntity;
use crate::jobs_skill_data::PotionSkill;
use crate::rotation::SkillTable;
use crate::skill::attack_skill::AttackSkill;
use crate::skill::damage_category::DamageCategory::PhysicalDot;
use crate::skill::use_type::UseType;
use crate::skill::{make_skill_table, ResourceRequirements};
use crate::status::buff_status::BuffStatus;
use crate::status::debuff_status::DebuffStatus;
use crate::status::status_info::StatusInfo;
use crate::types::{IdType, PlayerIdType};
use std::cell::RefCell;
use std::collections::HashMap;
use std::rc::Rc;

pub(crate) struct BardDatabase {
    pub(crate) burst_shot: AttackSkill,
    pub(crate) refulgent_arrow: AttackSkill,
    pub(crate) raging_strike: AttackSkill,
    pub(crate) heartbreak_shot: AttackSkill,
    pub(crate) caustic_bite: AttackSkill,
    pub(crate) storm_bite: AttackSkill,
    pub(crate) apex_arrow: AttackSkill,
    pub(crate) side_winder: AttackSkill,
    pub(crate) iron_jaws: AttackSkill,
    pub(crate) empyreal_arrow: AttackSkill,
    pub(crate) pitch_perfect1: AttackSkill,
    pub(crate) battle_voice: AttackSkill,
    pub(crate) wanderers_minuet: AttackSkill,
    pub(crate) mages_ballad: AttackSkill,
    pub(crate) armys_paeon: AttackSkill,
    pub(crate) barrage: AttackSkill,
    pub(crate) blast_arrow: AttackSkill,
    pub(crate) radiant_finale: AttackSkill,
    pub(crate) resonant_arrow: AttackSkill,
    pub(crate) pitch_perfect2: AttackSkill,
    pub(crate) pitch_perfect3: AttackSkill,
    pub(crate) radiant_encore1: AttackSkill,
    pub(crate) radiant_encore3: AttackSkill,
    pub(crate) refulgent_arrow_barrage: AttackSkill,

    pub(crate) caustic_bite_dot: DebuffStatus,
    pub(crate) storm_bite_dot: DebuffStatus,
    pub(crate) wanderers_minuet_raidbuff: BuffStatus,
    pub(crate) wanderers_minuet_status: BuffStatus,
    pub(crate) mages_ballad_raidbuff: BuffStatus,
    pub(crate) mages_ballad_status: BuffStatus,
    pub(crate) armys_paeon_raidbuff: BuffStatus,
    pub(crate) armys_paeon_status: BuffStatus,
    pub(crate) barrage_status: BuffStatus,
    pub(crate) straight_shot_ready: BuffStatus,
    pub(crate) blast_arrow_ready: BuffStatus,
    pub(crate) battle_voice_status: BuffStatus,
    pub(crate) army_muse: BuffStatus,
    pub(crate) raging_strike_status: BuffStatus,
    pub(crate) radiant_finale_status: BuffStatus,
    pub(crate) resonant_arrow_ready: BuffStatus,

    pub(crate) potion: AttackSkill,
    pub(crate) potion_buff: BuffStatus,
}

impl BardDatabase {
    pub(crate) fn new(
        player_id: PlayerIdType,
        ffxiv_event_queue: Rc<RefCell<FfxivEventQueue>>,
    ) -> Self {
        let CAUSTIC_BITE_DOT: DebuffStatus = {
            DebuffStatus {
                id: 1300,
                name: String::from("Caustic Bite Dot"),
                owner_id: player_id,
                damage_skill_id: Some(1304),
                potency: Some(20),
                trait_percent: Some(120),
                damage_category: Some(PhysicalDot),
                duration_left_millisecond: 0,
                status_info: vec![StatusInfo::None],
                duration_millisecond: 45000,
                is_raidwide: false,
                stacks: 1,
                snapshotted_infos: Default::default(),
                max_stacks: 1,
            }
        };
        let STORM_BITE_DOT: DebuffStatus = DebuffStatus {
            id: 1301,
            name: String::from("Storm's Bite Dot"),
            owner_id: player_id,
            potency: Some(25),
            trait_percent: Some(120),
            damage_category: Some(PhysicalDot),
            damage_skill_id: Some(1305),
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 45000,
            is_raidwide: false,
            stacks: 1,
            snapshotted_infos: Default::default(),
            max_stacks: 1,
        };
        let WANDERERS_MINUET_RAIDBUFF: BuffStatus = BuffStatus {
            id: 1302,
            name: String::from("Wanderer's Minuet Raidbuff"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::CritHitRatePercent(2)],
            duration_millisecond: 45000,
            is_raidwide: true,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let WANDERERS_MINUET_STATUS: BuffStatus = BuffStatus {
            id: 1303,
            name: String::from("Wanderer's Minuet Status"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 45000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let MAGES_BALLAD_RAIDBUFF: BuffStatus = BuffStatus {
            id: 1304,
            name: String::from("Mage's Ballad Raidbuff"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(1)],
            duration_millisecond: 45000,
            is_raidwide: true,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let MAGES_BALLAD_STATUS: BuffStatus = BuffStatus {
            id: 1305,
            name: String::from("Mage's Ballad Raidbuff"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 45000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let ARMYS_PAEON_RAIDBUFF: BuffStatus = BuffStatus {
            id: 1306,
            name: String::from("Army's Paeon Raidbuff"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DirectHitRatePercent(3)],
            duration_millisecond: 45000,
            is_raidwide: true,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let ARMYS_PAEON_STATUS: BuffStatus = BuffStatus {
            id: 1307,
            name: String::from("Army's Paeon Status"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::SpeedByStack(vec![4, 8, 12, 16])],
            duration_millisecond: 45000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 4,
            trigger_proc_event_on_gcd: vec![],
        };
        let BARRAGE_STATUS: BuffStatus = BuffStatus {
            id: 1308,
            name: String::from("Barrage Status"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 15000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };

        let RADIANT_FINALE_STATUS: BuffStatus = BuffStatus {
            id: 1309,
            name: String::from("Radiant Finale Status"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(2)],
            duration_millisecond: 20000,
            is_raidwide: true,
            stacks: 1,
            max_stacks: 3,
            trigger_proc_event_on_gcd: vec![],
        };
        let STRAIGHT_SHOT_READY: BuffStatus = BuffStatus {
            id: 1310,
            name: String::from("Straight Shot Ready"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let BLAST_ARROW_READY: BuffStatus = BuffStatus {
            id: 1311,
            name: String::from("Blast Arrow Ready"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 10000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let BATTLE_VOICE_STATUS: BuffStatus = BuffStatus {
            id: 1312,
            name: String::from("Battle Voice"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DirectHitRatePercent(20)],
            duration_millisecond: 20000,
            is_raidwide: true,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let ARMYS_MUSE: BuffStatus = BuffStatus {
            id: 1313,
            name: String::from("Army's Muse"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::SpeedByStack(vec![1, 2, 4, 12])],
            duration_millisecond: 10000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let RAGING_STRIKE_STATUS: BuffStatus = BuffStatus {
            id: 1314,
            name: String::from("Raging Strike"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(15)],
            duration_millisecond: 20000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let RESONANT_ARROW_READY: BuffStatus = BuffStatus {
            id: 1315,
            name: String::from("Resonant Arrow Ready"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };

        let straight_shot_proc = (
            ApplyBuff(
                player_id,
                player_id,
                STRAIGHT_SHOT_READY.clone(),
                30000,
                30000,
                0,
            ),
            35,
        );

        let wanderer_ticker = IndependentTicker::new(
            1300,
            0,
            45000,
            vec![
                FfxivEvent::IncreasePlayerResource(player_id, 1, 1, 0),
                FfxivEvent::IncreasePlayerResource(player_id, 0, 1, 0),
            ],
            ffxiv_event_queue.clone(),
            player_id,
            80,
            false,
        );
        let mage_ticker = IndependentTicker::new(
            1301,
            0,
            45000,
            vec![
                FfxivEvent::ReduceSkillCooldown(player_id, 1303, 7500, 0),
                FfxivEvent::IncreasePlayerResource(player_id, 0, 1, 0),
            ],
            ffxiv_event_queue.clone(),
            player_id,
            80,
            false,
        );
        let army_ticker = IndependentTicker::new(
            1302,
            0,
            45000,
            vec![
                FfxivEvent::ApplyBuffStack(
                    player_id,
                    player_id,
                    ARMYS_PAEON_STATUS.clone(),
                    45000,
                    false,
                    0,
                ),
                FfxivEvent::IncreasePlayerResource(player_id, 0, 1, 0),
                FfxivEvent::IncreasePlayerResource(player_id, 2, 1, 0),
            ],
            ffxiv_event_queue.clone(),
            player_id,
            80,
            false,
        );
        let BURST_SHOT: AttackSkill = AttackSkill {
            id: 1300,
            name: String::from("Burst Shot"),
            player_id,
            potency: 220,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![straight_shot_proc.clone()],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_reduced_by_speed: true,
        };

        let REFULGENT_ARROW: AttackSkill = AttackSkill {
            id: 1301,
            name: String::from("Refulgent Arrow"),
            player_id,
            potency: 280,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![ResourceRequirements::UseBuff(STRAIGHT_SHOT_READY.get_id())],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let RAGING_STRIKE: AttackSkill = AttackSkill {
            id: 1302,
            name: String::from("Raging Strike"),
            player_id,
            potency: 0,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![FfxivEvent::ApplyBuff(
                player_id,
                player_id,
                RAGING_STRIKE_STATUS.clone(),
                20000,
                20000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 120000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
        };
        let HEARTBREAK_SHOT: AttackSkill = AttackSkill {
            id: 1303,
            name: String::from("Heartbreak Shot"),
            player_id,
            potency: 180,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 15000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 3,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let CAUSTIC_BITE: AttackSkill = AttackSkill {
            id: 1304,
            name: String::from("Caustic Bite"),
            player_id,
            potency: 150,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![FfxivEvent::ApplyDebuff(
                player_id,
                CAUSTIC_BITE_DOT.clone(),
                45000,
                45000,
                500,
            )],
            proc_events: vec![straight_shot_proc.clone()],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };

        let STORM_BITE: AttackSkill = AttackSkill {
            id: 1305,
            name: String::from("Storm Bite"),
            player_id,
            potency: 100,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![FfxivEvent::ApplyDebuff(
                player_id,
                STORM_BITE_DOT.clone(),
                45000,
                45000,
                500,
            )],
            proc_events: vec![straight_shot_proc.clone()],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
        };
        // Bard's stack increases by 5 upto 100
        // To make sure the potency per resource unit is integer, we scale this to 1-20.
        let APEX_ARROW: AttackSkill = AttackSkill {
            id: 1306,
            name: String::from("Apex Arrow"),
            player_id,
            potency: 30,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![FfxivEvent::ApplyBuff(
                player_id,
                player_id,
                BLAST_ARROW_READY.clone(),
                10000,
                10000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![ResourceRequirements::UseAllResource(0)],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let SIDE_WINDER: AttackSkill = AttackSkill {
            id: 1307,
            name: String::from("Side Winder"),
            player_id,
            potency: 400,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let IRON_JAWS: AttackSkill = AttackSkill {
            id: 1308,
            name: String::from("Iron Jaws"),
            player_id,
            potency: 100,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![
                FfxivEvent::ApplyDebuff(player_id, CAUSTIC_BITE_DOT.clone(), 45000, 45000, 500),
                FfxivEvent::ApplyDebuff(player_id, STORM_BITE_DOT.clone(), 45000, 45000, 500),
            ],
            proc_events: vec![straight_shot_proc.clone()],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let EMPYREAL_ARROW: AttackSkill = AttackSkill {
            id: 1309,
            name: String::from("Empyreal Arrow"),
            player_id,
            potency: 260,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![
                FfxivEvent::ForceTicker(TickerKey::new(1300, player_id), 0),
                FfxivEvent::ForceTicker(TickerKey::new(1301, player_id), 0),
                FfxivEvent::ForceTicker(TickerKey::new(1302, player_id), 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 15000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let PITCH_PERFECT1: AttackSkill = AttackSkill {
            id: 1310,
            name: String::from("Pitch Perfect1"),
            player_id,
            potency: 100,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![ResourceRequirements::Resource(1, 1)],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let BATTLE_VOICE: AttackSkill = AttackSkill {
            id: 1311,
            name: String::from("Battle Voice"),
            player_id,
            potency: 0,
            use_type: UseType::NoTarget,
            trait_percent: 120,
            additional_skill_events: vec![ApplyRaidBuff(
                player_id,
                BATTLE_VOICE_STATUS.clone(),
                20000,
                20000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 118000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };

        let WANDERERS_MINUET: AttackSkill = AttackSkill {
            id: 1312,
            name: String::from("Wanderer's Minuet"),
            player_id,
            potency: 0,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![
                ApplyRaidBuff(
                    player_id,
                    WANDERERS_MINUET_RAIDBUFF.clone(),
                    45000,
                    45000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    WANDERERS_MINUET_STATUS.clone(),
                    45000,
                    45000,
                    0,
                ),
                AddTicker(FfxivEventTicker::IndependentTicker(wanderer_ticker), 0),
                RemoveTicker(TickerKey::new(1301, player_id), 0),
                RemoveTicker(TickerKey::new(1302, player_id), 0),
                RemoveTargetBuff(player_id, player_id, ARMYS_PAEON_STATUS.id, 0),
                RemoveTargetBuff(player_id, player_id, MAGES_BALLAD_STATUS.id, 0),
                RemoveRaidBuff(player_id, ARMYS_PAEON_RAIDBUFF.id, 0),
                RemoveRaidBuff(player_id, MAGES_BALLAD_RAIDBUFF.id, 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 120000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
        };
        let MAGES_BALLAD: AttackSkill = AttackSkill {
            id: 1313,
            name: String::from("Mage's Ballad"),
            player_id,
            potency: 0,
            use_type: UseType::NoTarget,
            trait_percent: 120,
            additional_skill_events: vec![
                ApplyRaidBuff(player_id, MAGES_BALLAD_RAIDBUFF.clone(), 45000, 45000, 0),
                ApplyBuff(
                    player_id,
                    player_id,
                    MAGES_BALLAD_STATUS.clone(),
                    45000,
                    45000,
                    0,
                ),
                AddTicker(FfxivEventTicker::IndependentTicker(mage_ticker), 0),
                RemoveTicker(TickerKey::new(1300, player_id), 0),
                RemoveTicker(TickerKey::new(1302, player_id), 0),
                RemoveTargetBuff(player_id, player_id, ARMYS_PAEON_STATUS.id, 0),
                RemoveTargetBuff(player_id, player_id, WANDERERS_MINUET_STATUS.id, 0),
                RemoveRaidBuff(player_id, ARMYS_PAEON_RAIDBUFF.id, 0),
                RemoveRaidBuff(player_id, WANDERERS_MINUET_RAIDBUFF.id, 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 120000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let ARMYS_PAEON: AttackSkill = AttackSkill {
            id: 1314,
            name: String::from("Army's Paeon"),
            player_id,
            potency: 0,
            use_type: UseType::NoTarget,
            trait_percent: 120,
            additional_skill_events: vec![
                ApplyRaidBuff(player_id, ARMYS_PAEON_RAIDBUFF.clone(), 45000, 45000, 0),
                ApplyBuff(
                    player_id,
                    player_id,
                    ARMYS_PAEON_STATUS.clone(),
                    45000,
                    45000,
                    0,
                ),
                AddTicker(FfxivEventTicker::IndependentTicker(army_ticker), 0),
                RemoveTicker(TickerKey::new(1300, player_id), 0),
                RemoveTicker(TickerKey::new(1301, player_id), 0),
                RemoveTargetBuff(player_id, player_id, WANDERERS_MINUET_STATUS.id, 0),
                RemoveTargetBuff(player_id, player_id, MAGES_BALLAD_STATUS.id, 0),
                RemoveRaidBuff(player_id, WANDERERS_MINUET_RAIDBUFF.id, 0),
                RemoveRaidBuff(player_id, MAGES_BALLAD_RAIDBUFF.id, 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 120000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let BARRAGE: AttackSkill = AttackSkill {
            id: 1315,
            name: String::from("Barrage"),
            player_id,
            potency: 0,
            use_type: UseType::NoTarget,
            trait_percent: 120,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    BARRAGE_STATUS.clone(),
                    10000,
                    10000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    STRAIGHT_SHOT_READY.clone(),
                    30000,
                    30000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    RESONANT_ARROW_READY.clone(),
                    30000,
                    30000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 120000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let BLAST_ARROW: AttackSkill = AttackSkill {
            id: 1316,
            name: String::from("Blast Arrow"),
            player_id,
            potency: 600,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![ResourceRequirements::UseBuff(BLAST_ARROW_READY.id)],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let RADIANT_FINALE: AttackSkill = AttackSkill {
            id: 1317,
            name: String::from("Radiant Finale"),
            player_id,
            potency: 0,
            use_type: UseType::NoTarget,
            trait_percent: 120,
            additional_skill_events: vec![ApplyRaidBuff(
                player_id,
                RADIANT_FINALE_STATUS.clone(),
                20000,
                20000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 110000,
            resource_required: vec![ResourceRequirements::UseAllResource(3)],
            resource_created: HashMap::from([(4, 1)]),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let RESONANT_ARROW: AttackSkill = AttackSkill {
            id: 1318,
            name: String::from("Resonant Arrow"),
            player_id,
            use_type: UseType::UseOnTarget,
            potency: 600,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![ResourceRequirements::UseBuff(RESONANT_ARROW_READY.id)],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let PITCH_PERFECT2: AttackSkill = AttackSkill {
            id: 1319,
            name: String::from("Pitch Perfect 2"),
            player_id,
            potency: 220,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![ResourceRequirements::Resource(1, 2)],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let PITCH_PERFECT3: AttackSkill = AttackSkill {
            id: 1320,
            name: String::from("Pitch Perfect 2"),
            player_id,
            potency: 360,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![ResourceRequirements::Resource(1, 3)],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let RADIANT_ENCORE1: AttackSkill = AttackSkill {
            id: 1321,
            name: String::from("Radiant Encore"),
            player_id,
            potency: 500,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![ResourceRequirements::Resource(4, 1)],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let RADIANT_ENCORE3: AttackSkill = AttackSkill {
            id: 1322,
            name: String::from("Radiant Encore"),
            player_id,
            potency: 900,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![ResourceRequirements::Resource(4, 3)],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };

        let REFULGENT_ARROW_BARRAGE: AttackSkill = AttackSkill {
            id: 1323,
            name: String::from("Refulgent Arrow"),
            player_id,
            potency: 840,
            use_type: UseType::UseOnTarget,
            trait_percent: 120,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![ResourceRequirements::UseBuff(BARRAGE_STATUS.id)],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };

        let potion_skill = PotionSkill::new(player_id);

        Self {
            burst_shot: BURST_SHOT,
            refulgent_arrow: REFULGENT_ARROW,
            raging_strike: RAGING_STRIKE,
            heartbreak_shot: HEARTBREAK_SHOT,
            caustic_bite: CAUSTIC_BITE,
            storm_bite: STORM_BITE,

            apex_arrow: APEX_ARROW,
            side_winder: SIDE_WINDER,
            iron_jaws: IRON_JAWS,
            empyreal_arrow: EMPYREAL_ARROW,
            pitch_perfect1: PITCH_PERFECT1,
            battle_voice: BATTLE_VOICE,
            wanderers_minuet: WANDERERS_MINUET,
            mages_ballad: MAGES_BALLAD,
            armys_paeon: ARMYS_PAEON,
            barrage: BARRAGE,
            blast_arrow: BLAST_ARROW,
            radiant_finale: RADIANT_FINALE,
            resonant_arrow: RESONANT_ARROW,
            pitch_perfect2: PITCH_PERFECT2,
            pitch_perfect3: PITCH_PERFECT3,
            radiant_encore1: RADIANT_ENCORE1,
            radiant_encore3: RADIANT_ENCORE3,
            refulgent_arrow_barrage: REFULGENT_ARROW_BARRAGE,

            straight_shot_ready: STRAIGHT_SHOT_READY,
            blast_arrow_ready: BLAST_ARROW_READY,
            battle_voice_status: BATTLE_VOICE_STATUS,
            army_muse: ARMYS_MUSE,
            raging_strike_status: RAGING_STRIKE_STATUS,
            caustic_bite_dot: CAUSTIC_BITE_DOT,
            storm_bite_dot: STORM_BITE_DOT,
            wanderers_minuet_raidbuff: WANDERERS_MINUET_RAIDBUFF,
            wanderers_minuet_status: WANDERERS_MINUET_STATUS,
            mages_ballad_raidbuff: MAGES_BALLAD_RAIDBUFF,
            mages_ballad_status: MAGES_BALLAD_STATUS,
            armys_paeon_raidbuff: ARMYS_PAEON_RAIDBUFF,
            armys_paeon_status: ARMYS_PAEON_STATUS,
            barrage_status: BARRAGE_STATUS,
            radiant_finale_status: RADIANT_FINALE_STATUS,
            resonant_arrow_ready: RESONANT_ARROW_READY,

            potion: potion_skill.potion,
            potion_buff: potion_skill.potion_buff,
        }
    }
}

pub(crate) fn make_bard_skill_list(
    player_id: PlayerIdType,
    ffxiv_event_queue: Rc<RefCell<FfxivEventQueue>>,
) -> SkillTable<AttackSkill> {
    let db = BardDatabase::new(player_id, ffxiv_event_queue);

    let bard_skill_list: Vec<AttackSkill> = vec![
        db.burst_shot.clone(),
        db.refulgent_arrow.clone(),
        db.raging_strike.clone(),
        db.heartbreak_shot.clone(),
        db.caustic_bite.clone(),
        db.storm_bite.clone(),
        db.apex_arrow.clone(),
        db.side_winder.clone(),
        db.iron_jaws.clone(),
        db.empyreal_arrow.clone(),
        db.pitch_perfect1.clone(),
        db.battle_voice.clone(),
        db.wanderers_minuet.clone(),
        db.mages_ballad.clone(),
        db.armys_paeon.clone(),
        db.barrage.clone(),
        db.blast_arrow.clone(),
        db.radiant_finale.clone(),
        db.resonant_arrow.clone(),
        db.pitch_perfect2.clone(),
        db.pitch_perfect3.clone(),
        db.radiant_encore1.clone(),
        db.radiant_encore3.clone(),
        db.refulgent_arrow_barrage.clone(),
        db.potion.clone(),
    ];

    make_skill_table(bard_skill_list)
}

pub(crate) fn get_song_skill_ids() -> Vec<IdType> {
    vec![1312, 1313, 1314]
}
