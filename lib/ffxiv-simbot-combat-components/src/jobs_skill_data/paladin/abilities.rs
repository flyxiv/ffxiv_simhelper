use crate::event::ffxiv_event::FfxivEvent;
use crate::event::ffxiv_event::FfxivEvent::{ApplyBuff, ApplyDebuff, ApplyRaidBuff};
use crate::id_entity::IdEntity;
use crate::rotation::SkillTable;
use crate::skill::attack_skill::AttackSkill;
use crate::skill::use_type::UseType;
use crate::skill::ResourceRequirements::UseBuff;
use crate::skill::{make_skill_table, ResourceRequirements};
use crate::status::buff_status::BuffStatus;
use crate::status::debuff_status::DebuffStatus;
use crate::status::status_info::StatusInfo;
use crate::IdType;
use std::collections::HashMap;

pub(crate) struct PaladinDatabase {
    pub(crate) fast_blade: AttackSkill,
    pub(crate) fight_or_flight: AttackSkill,
    pub(crate) riot_blade: AttackSkill,
    pub(crate) requiescat: AttackSkill,
    pub(crate) goring_blade: AttackSkill,
    pub(crate) circle_of_scorn: AttackSkill,
    pub(crate) royal_authority: AttackSkill,
    pub(crate) confiteor: AttackSkill,
    pub(crate) holy_spirit: AttackSkill,
    pub(crate) atonement: AttackSkill,
    pub(crate) explacion: AttackSkill,
    pub(crate) blade_of_faith: AttackSkill,
    pub(crate) blade_of_truth: AttackSkill,
    pub(crate) blade_of_valor: AttackSkill,
    pub(crate) intervene: AttackSkill,
    pub(crate) weak_holy_spirit: AttackSkill,

    pub(crate) requiescat_buff: BuffStatus,
    pub(crate) fight_or_flight_buff: BuffStatus,
    pub(crate) sword_oath: BuffStatus,
    pub(crate) circle_of_scorn_dot: DebuffStatus,
    pub(crate) confiteor_ready: BuffStatus,
    pub(crate) divine_might: BuffStatus,
}

impl PaladinDatabase {
    pub(crate) fn new(player_id: IdType) -> Self {
        let REQUIESCAT_BUFF: BuffStatus = BuffStatus {
            id: 1900,
            name: String::from("Requiescat"),
            stacks: 4,
            max_stacks: 4,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let FIGHT_OR_FLIGHT_BUFF: BuffStatus = BuffStatus {
            id: 1901,
            name: String::from("Fight or Flight"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(25)],
            duration_millisecond: 20000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let SWORD_OATH: BuffStatus = BuffStatus {
            id: 1902,
            name: String::from("Sword Oath"),
            stacks: 3,
            max_stacks: 3,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let CIRCLE_OF_SCORN_DOT: DebuffStatus = DebuffStatus {
            id: 1903,
            name: String::from("Circle of Scorn"),
            snapshotted_buffs: Default::default(),
            owner_id: player_id,
            potency: Some(30),
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 15000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            snapshotted_debuffs: Default::default(),
        };
        let CONFITEOR_READY: BuffStatus = BuffStatus {
            id: 1904,
            name: String::from("Confiteor Ready"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let DIVINE_MIGHT: BuffStatus = BuffStatus {
            id: 1905,
            name: String::from("Divine Might"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };

        let REQUIESCAT: AttackSkill = AttackSkill {
            id: 1900,
            name: String::from("Requiescat"),
            player_id,
            potency: 0,
            trait_multiplier: 1.0,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    REQUIESCAT_BUFF.clone(),
                    30000,
                    30000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    CONFITEOR_READY.clone(),
                    30000,
                    30000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };
        let GORING_BLADE: AttackSkill = AttackSkill {
            id: 1901,
            name: String::from("Goring Blade"),
            player_id,
            potency: 700,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let CIRCLE_OF_SCORN: AttackSkill = AttackSkill {
            id: 1902,
            name: String::from("Circle of Scorn"),
            player_id,
            potency: 140,
            trait_multiplier: 1.0,
            additional_skill_events: vec![ApplyDebuff(
                player_id,
                CIRCLE_OF_SCORN_DOT,
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 30000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };
        let ROYAL_AUTHORITY: AttackSkill = AttackSkill {
            id: 1903,
            name: String::from("Royal Authority"),
            player_id,
            potency: 400,
            trait_multiplier: 1.0,
            additional_skill_events: vec![
                ApplyBuff(player_id, player_id, SWORD_OATH.clone(), 30000, 30000, 0),
                ApplyBuff(player_id, player_id, DIVINE_MIGHT.clone(), 30000, 30000, 0),
            ],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let CONFITEOR: AttackSkill = AttackSkill {
            id: 1904,
            name: String::from("Confiteor"),
            player_id,
            potency: 920,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(4),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(CONFITEOR_READY.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let HOLY_SPIRIT: AttackSkill = AttackSkill {
            id: 1905,
            name: String::from("Holy Spirit"),
            player_id,
            potency: 450,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(DIVINE_MIGHT.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let ATONEMENT: AttackSkill = AttackSkill {
            id: 1906,
            name: String::from("Atonement"),
            player_id,
            potency: 400,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(SWORD_OATH.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let EXPLACION: AttackSkill = AttackSkill {
            id: 1907,
            name: String::from("Explacion"),
            player_id,
            potency: 450,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 30000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let BLADE_OF_FAITH: AttackSkill = AttackSkill {
            id: 1908,
            name: String::from("Blade of Faith"),
            player_id,
            potency: 720,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(5),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let BLADE_OF_TRUTH: AttackSkill = AttackSkill {
            id: 1909,
            name: String::from("Blade of Truth"),
            player_id,
            potency: 820,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(6),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let BLADE_OF_VALOR: AttackSkill = AttackSkill {
            id: 1910,
            name: String::from("Blade of Valor"),
            player_id,
            potency: 920,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let INTERVENE: AttackSkill = AttackSkill {
            id: 1911,
            name: String::from("Intervene"),
            player_id,
            potency: 150,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 30000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 2,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let FIGHT_OR_FLIGHT: AttackSkill = AttackSkill {
            id: 1912,
            name: String::from("Fight or Flight"),
            player_id,
            potency: 0,
            trait_multiplier: 1.0,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                FIGHT_OR_FLIGHT_BUFF.clone(),
                20000,
                20000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };
        let FAST_BLADE: AttackSkill = AttackSkill {
            id: 1913,
            name: String::from("Fast Blade"),
            player_id,
            potency: 200,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(2),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let RIOT_BLADE: AttackSkill = AttackSkill {
            id: 1914,
            name: String::from("Riot Blade"),
            player_id,
            potency: 300,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(3),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        let WEAK_HOLY_SPIRIT: AttackSkill = AttackSkill {
            id: 1915,
            name: String::from("Holy Spirit"),
            player_id,
            potency: 350,
            trait_multiplier: 1.0,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 1000,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        PaladinDatabase {
            fast_blade: FAST_BLADE,
            fight_or_flight: FIGHT_OR_FLIGHT,
            riot_blade: RIOT_BLADE,
            requiescat: REQUIESCAT,
            goring_blade: GORING_BLADE,
            circle_of_scorn: CIRCLE_OF_SCORN,
            royal_authority: ROYAL_AUTHORITY,
            confiteor: CONFITEOR,
            holy_spirit: HOLY_SPIRIT,
            atonement: ATONEMENT,
            explacion: EXPLACION,
            blade_of_faith: BLADE_OF_FAITH,
            blade_of_truth: BLADE_OF_TRUTH,
            blade_of_valor: BLADE_OF_VALOR,
            intervene: INTERVENE,
            weak_holy_spirit: WEAK_HOLY_SPIRIT,

            requiescat_buff: REQUIESCAT_BUFF,
            fight_or_flight_buff: FIGHT_OR_FLIGHT_BUFF,
            sword_oath: SWORD_OATH,
            circle_of_scorn_dot: CIRCLE_OF_SCORN_DOT,
            confiteor_ready: CONFITEOR_READY,
            divine_might: DIVINE_MIGHT,
        }
    }
}

pub(crate) fn make_paladin_skill_list(player_id: IdType) -> SkillTable<AttackSkill> {
    let db = PaladinDatabase::new(player_id);

    let paladin_skill_list: Vec<AttackSkill> = vec![
        db.fast_blade,
        db.fight_or_flight,
        db.riot_blade,
        db.requiescat,
        db.goring_blade,
        db.circle_of_scorn,
        db.royal_authority,
        db.confiteor,
        db.holy_spirit,
        db.atonement,
        db.explacion,
        db.blade_of_faith,
        db.blade_of_truth,
        db.blade_of_valor,
        db.intervene,
        db.weak_holy_spirit,
    ];

    make_skill_table(paladin_skill_list)
}
