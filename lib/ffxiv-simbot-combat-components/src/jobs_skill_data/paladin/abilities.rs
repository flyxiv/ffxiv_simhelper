use crate::event::ffxiv_event::FfxivEvent::{ApplyBuff, ApplyDebuff};
use crate::id_entity::IdEntity;
use crate::jobs_skill_data::PotionSkill;
use crate::rotation::SkillTable;
use crate::skill::attack_skill::AttackSkill;
use crate::skill::damage_category::DamageCategory;
use crate::skill::make_skill_table;
use crate::skill::use_type::UseType;
use crate::skill::ResourceRequirements::{Resource, UseBuff};
use crate::status::buff_status::BuffStatus;
use crate::status::debuff_status::DebuffStatus;
use crate::status::status_info::StatusInfo;
use crate::types::PlayerIdType;
use std::collections::HashMap;

pub(crate) struct PaladinDatabase {
    pub(crate) fast_blade: AttackSkill,
    pub(crate) fight_or_flight: AttackSkill,
    pub(crate) riot_blade: AttackSkill,
    pub(crate) imperator: AttackSkill,
    pub(crate) goring_blade: AttackSkill,
    pub(crate) circle_of_scorn: AttackSkill,
    pub(crate) royal_authority: AttackSkill,
    pub(crate) confiteor: AttackSkill,
    pub(crate) holy_spirit: AttackSkill,
    pub(crate) atonement: AttackSkill,
    pub(crate) explacion: AttackSkill,
    pub(crate) blade_of_faith: AttackSkill,
    pub(crate) blade_of_truth: AttackSkill,
    pub(crate) blade_of_valor: AttackSkill,
    pub(crate) intervene: AttackSkill,
    pub(crate) weak_holy_spirit: AttackSkill,
    pub(crate) supplication: AttackSkill,
    pub(crate) sepulchre: AttackSkill,
    pub(crate) blade_of_honor: AttackSkill,

    pub(crate) fight_or_flight_buff: BuffStatus,
    pub(crate) confiteor_ready: BuffStatus,
    pub(crate) sepulchre_ready: BuffStatus,

    pub(crate) potion: AttackSkill,
}

impl PaladinDatabase {
    pub(crate) fn new(player_id: PlayerIdType) -> Self {
        let requiescat_buff: BuffStatus = BuffStatus {
            id: 1900,
            name: String::from("Requiescat"),
            stacks: 4,
            max_stacks: 4,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let fight_or_flight_buff: BuffStatus = BuffStatus {
            id: 1901,
            name: String::from("Fight or Flight"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(25)],
            duration_millisecond: 20000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let atonement_ready: BuffStatus = BuffStatus {
            id: 1902,
            name: String::from("Atonement Ready"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let circle_of_scorn_dot: DebuffStatus = DebuffStatus {
            id: 1903,
            name: String::from("Circle of Scorn"),
            snapshotted_infos: Default::default(),
            owner_id: player_id,
            potency: Some(30),
            trait_percent: Some(100),
            damage_category: Some(DamageCategory::PhysicalDot),
            damage_skill_id: Some(1902),
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 15000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
        };
        let confiteor_ready: BuffStatus = BuffStatus {
            id: 1904,
            name: String::from("Confiteor Ready"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let divine_might: BuffStatus = BuffStatus {
            id: 1905,
            name: String::from("Divine Might"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let goring_blade_ready: BuffStatus = BuffStatus {
            id: 1906,
            name: String::from("Goring Blade Ready"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let supplication_ready: BuffStatus = BuffStatus {
            id: 1907,
            name: String::from("Supplication Ready"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let sepulchre_ready: BuffStatus = BuffStatus {
            id: 1908,
            name: String::from("Sepulchre Ready"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };

        let imperator: AttackSkill = AttackSkill {
            id: 1900,
            name: String::from("Imperator"),
            player_id,
            potency: 580,
            trait_percent: 100,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    requiescat_buff.clone(),
                    30000,
                    30000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    confiteor_ready.clone(),
                    30000,
                    30000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };
        let goring_blade: AttackSkill = AttackSkill {
            id: 1901,
            name: String::from("Goring Blade"),
            player_id,
            potency: 700,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(goring_blade_ready.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let circle_of_scorn: AttackSkill = AttackSkill {
            id: 1902,
            name: String::from("Circle of Scorn"),
            player_id,
            potency: 140,
            trait_percent: 100,
            additional_skill_events: vec![ApplyDebuff(
                player_id,
                circle_of_scorn_dot.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 30000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };
        let royal_authority: AttackSkill = AttackSkill {
            id: 1903,
            name: String::from("Royal Authority"),
            player_id,
            potency: 460,
            trait_percent: 100,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    atonement_ready.clone(),
                    30000,
                    30000,
                    0,
                ),
                ApplyBuff(player_id, player_id, divine_might.clone(), 30000, 30000, 0),
            ],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let confiteor: AttackSkill = AttackSkill {
            id: 1904,
            name: String::from("Confiteor"),
            player_id,
            potency: 1000,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(4),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(confiteor_ready.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let holy_spirit: AttackSkill = AttackSkill {
            id: 1905,
            name: String::from("Holy Spirit"),
            player_id,
            potency: 500,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(divine_might.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let atonement: AttackSkill = AttackSkill {
            id: 1906,
            name: String::from("Atonement"),
            player_id,
            potency: 460,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                supplication_ready.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(atonement_ready.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let explacion: AttackSkill = AttackSkill {
            id: 1907,
            name: String::from("Explacion"),
            player_id,
            potency: 450,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 30000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let blade_of_faith: AttackSkill = AttackSkill {
            id: 1908,
            name: String::from("Blade of Faith"),
            player_id,
            potency: 760,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(5),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let blade_of_truth: AttackSkill = AttackSkill {
            id: 1909,
            name: String::from("Blade of Truth"),
            player_id,
            potency: 880,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(6),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let blade_of_valor: AttackSkill = AttackSkill {
            id: 1910,
            name: String::from("Blade of Valor"),
            player_id,
            potency: 1000,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: HashMap::from([(0, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let intervene: AttackSkill = AttackSkill {
            id: 1911,
            name: String::from("Intervene"),
            player_id,
            potency: 150,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 30000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 2,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let fight_or_flight: AttackSkill = AttackSkill {
            id: 1912,
            name: String::from("Fight or Flight"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    fight_or_flight_buff.clone(),
                    20000,
                    20000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    goring_blade_ready.clone(),
                    30000,
                    30000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };
        let fast_blade: AttackSkill = AttackSkill {
            id: 1913,
            name: String::from("Fast Blade"),
            player_id,
            potency: 220,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(2),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let riot_blade: AttackSkill = AttackSkill {
            id: 1914,
            name: String::from("Riot Blade"),
            player_id,
            potency: 330,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(3),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        let weak_holy_spirit: AttackSkill = AttackSkill {
            id: 1915,
            name: String::from("Holy Spirit"),
            player_id,
            potency: 350,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 1000,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let supplication: AttackSkill = AttackSkill {
            id: 1916,
            name: String::from("Supplication"),
            player_id,
            potency: 500,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                sepulchre_ready.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(supplication_ready.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let sepulchre: AttackSkill = AttackSkill {
            id: 1917,
            name: String::from("Sepulchre"),
            player_id,
            potency: 540,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(sepulchre_ready.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        let blade_of_honor: AttackSkill = AttackSkill {
            id: 1918,
            name: String::from("Blade of Honor"),
            player_id,
            potency: 1000,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(0, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        let potion_skill = PotionSkill::new(player_id);

        PaladinDatabase {
            fast_blade,
            fight_or_flight,
            riot_blade,
            imperator,
            goring_blade,
            circle_of_scorn,
            royal_authority,
            confiteor,
            holy_spirit,
            atonement,
            explacion,
            blade_of_faith,
            blade_of_truth,
            blade_of_valor,
            intervene,
            weak_holy_spirit,
            supplication,
            sepulchre,
            blade_of_honor,

            fight_or_flight_buff,
            confiteor_ready,
            sepulchre_ready,

            potion: potion_skill.potion,
        }
    }
}

pub(crate) fn make_paladin_skill_list(player_id: PlayerIdType) -> SkillTable<AttackSkill> {
    let db = PaladinDatabase::new(player_id);

    let paladin_skill_list: Vec<AttackSkill> = vec![
        db.fast_blade,
        db.fight_or_flight,
        db.riot_blade,
        db.imperator,
        db.goring_blade,
        db.circle_of_scorn,
        db.royal_authority,
        db.confiteor,
        db.holy_spirit,
        db.atonement,
        db.explacion,
        db.blade_of_faith,
        db.blade_of_truth,
        db.blade_of_valor,
        db.intervene,
        db.weak_holy_spirit,
        db.supplication,
        db.sepulchre,
        db.blade_of_honor,
        db.potion,
    ];

    make_skill_table(paladin_skill_list)
}
