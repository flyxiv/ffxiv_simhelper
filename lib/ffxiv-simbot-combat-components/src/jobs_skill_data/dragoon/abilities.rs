use crate::event::ffxiv_event::FfxivEvent;
use crate::event::ffxiv_event::FfxivEvent::{ApplyBuff, ApplyRaidBuff};
use crate::rotation::SkillTable;
use crate::skill::attack_skill::AttackSkill;
use crate::skill::damage_category::DamageCategory;
use crate::skill::use_type::UseType;
use crate::skill::ResourceRequirements::UseBuff;
use crate::skill::{make_skill_table, ResourceRequirements};
use crate::status::buff_status::BuffStatus;
use crate::status::debuff_status::DebuffStatus;
use crate::status::status_info::StatusInfo;
use crate::IdType;
use std::collections::HashMap;

pub(crate) struct DragoonDatabase {
    pub(crate) life_surge: AttackSkill,
    pub(crate) true_thrust: AttackSkill,
    pub(crate) raiden_thrust: AttackSkill,
    pub(crate) vorpal_thrust: AttackSkill,
    pub(crate) disembowel: AttackSkill,
    pub(crate) heavens_thrust: AttackSkill,
    pub(crate) chaotic_spring: AttackSkill,
    pub(crate) fang_and_claw: AttackSkill,
    pub(crate) wheeling_thrust: AttackSkill,
    pub(crate) fang_and_claw_plus: AttackSkill,
    pub(crate) wheeling_thrust_plus: AttackSkill,
    pub(crate) lance_charge: AttackSkill,
    pub(crate) heavens_thrust_surge: AttackSkill,
    pub(crate) fang_and_claw_plus_surge: AttackSkill,
    pub(crate) wheeling_thrust_plus_surge: AttackSkill,
    pub(crate) high_jump: AttackSkill,
    pub(crate) mirage_dive: AttackSkill,
    pub(crate) dragon_sight: AttackSkill,
    pub(crate) spineshatter_dive: AttackSkill,
    pub(crate) dragonfire_dive: AttackSkill,
    pub(crate) battle_litany: AttackSkill,
    pub(crate) geirskogul: AttackSkill,
    pub(crate) geirskogul_plus: AttackSkill,
    pub(crate) nastrond: AttackSkill,
    pub(crate) stardiver: AttackSkill,
    pub(crate) wyrmwind_thrust: AttackSkill,

    pub(crate) life_surge_buff: BuffStatus,
    pub(crate) disembowel_buff: BuffStatus,
    pub(crate) lance_mastery: BuffStatus,
    pub(crate) draconian_fire: BuffStatus,
    pub(crate) lance_charge_buff: BuffStatus,
    pub(crate) dive_ready: BuffStatus,
    pub(crate) dragon_sight_self_buff: BuffStatus,
    pub(crate) battle_litany_buff: BuffStatus,
    pub(crate) life_of_the_dragon: BuffStatus,
    pub(crate) dragon_sight_partner_buff: BuffStatus,
}

impl DragoonDatabase {
    pub(crate) fn new(player_id: IdType, partner_player_id: IdType) -> Self {
        let LIFE_SURGE_STATUS: BuffStatus = BuffStatus {
            id: 800,
            name: String::from("Life Surge"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 5000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let DISEMBOWEL_STATUS: BuffStatus = BuffStatus {
            id: 801,
            name: String::from("Disembowel"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(10)],
            duration_millisecond: 30000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let LANCE_MASTERY: BuffStatus = BuffStatus {
            id: 802,
            name: String::from("Lance Mastery"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 3000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let DRACONIAN_FIRE: BuffStatus = BuffStatus {
            id: 803,
            name: String::from("Draconian Fire"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let LANCE_CHARGE_STATUS: BuffStatus = BuffStatus {
            id: 804,
            name: String::from("Lance Charge"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(10)],
            duration_millisecond: 20000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let DIVE_READY: BuffStatus = BuffStatus {
            id: 805,
            name: String::from("Dive Ready"),
            stacks: 1,
            max_stacks: 1,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 15000,
            is_raidwide: false,
            trigger_proc_event_on_gcd: vec![],
        };
        let DRAGON_SIGHT_STATUS: BuffStatus = BuffStatus {
            id: 806,
            name: String::from("Dragon Sight"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(10)],
            duration_millisecond: 20000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let BATTLE_LITANY_STATUS: BuffStatus = BuffStatus {
            id: 807,
            name: String::from("Battle Litany"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::CritHitRatePercent(10)],
            duration_millisecond: 15000,
            is_raidwide: true,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let LIFE_OF_THE_DRAGON: BuffStatus = BuffStatus {
            id: 808,
            name: String::from("Life of the Dragon"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };

        let DRAGON_SIGHT_STATUS_PARTNER: BuffStatus = BuffStatus {
            id: 809,
            name: String::from("Dragon Sight Partner"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(5)],
            duration_millisecond: 20000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };

        let CHAOTIC_SPRING_DOT: DebuffStatus = DebuffStatus {
            id: 810,
            name: String::from("Chaotic Spring"),
            owner_id: player_id,
            damage_skill_id: Some(806),
            trait_percent: Some(100),
            potency: Some(45),
            damage_category: Some(DamageCategory::PhysicalDot),
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 24000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            snapshotted_buffs: HashMap::new(),
            snapshotted_debuffs: HashMap::new(),
        };

        let LIFE_SURGE: AttackSkill = AttackSkill {
            id: 800,
            name: String::from("Life Surge"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![FfxivEvent::ApplyBuff(
                player_id,
                player_id,
                LIFE_SURGE_STATUS.clone(),
                5000,
                5000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 40000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 2,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };
        let TRUE_THRUST: AttackSkill = AttackSkill {
            id: 801,
            name: String::from("True Thrust"),
            player_id,
            potency: 230,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(2),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let RAIDEN_THRUST: AttackSkill = AttackSkill {
            id: 802,
            name: String::from("Raiden Thrust"),
            player_id,
            potency: 280,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(2),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![ResourceRequirements::UseBuff(DRACONIAN_FIRE.id)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let VORPAL_THRUST: AttackSkill = AttackSkill {
            id: 803,
            name: String::from("Vorpal Thrust"),
            player_id,
            potency: 280,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(3),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let DISEMBOWEL: AttackSkill = AttackSkill {
            id: 804,
            name: String::from("Disembowel"),
            player_id,
            potency: 250,
            trait_percent: 100,
            additional_skill_events: vec![FfxivEvent::ApplyBuff(
                player_id,
                player_id,
                DISEMBOWEL_STATUS.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: Some(4),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let HEAVENS_THRUST: AttackSkill = AttackSkill {
            id: 805,
            name: String::from("Heaven's Thrust"),
            player_id,
            potency: 480,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(6),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let CHAOTIC_SPRING: AttackSkill = AttackSkill {
            id: 806,
            name: String::from("Chaotic Spring"),
            player_id,
            potency: 660,
            trait_percent: 100,
            additional_skill_events: vec![FfxivEvent::ApplyDebuff(
                player_id,
                CHAOTIC_SPRING_DOT.clone(),
                24000,
                24000,
                0,
            )],
            proc_events: vec![],
            combo: Some(5),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let FANG_AND_CLAW: AttackSkill = AttackSkill {
            id: 807,
            name: String::from("Fang and Claw"),
            player_id,
            potency: 300,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                LANCE_MASTERY.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: Some(5),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let WHEELING_THRUST: AttackSkill = AttackSkill {
            id: 808,
            name: String::from("Wheeling Thrust"),
            player_id,
            potency: 300,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                LANCE_MASTERY.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: Some(6),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let FANG_AND_CLAW_PLUS: AttackSkill = AttackSkill {
            id: 809,
            name: String::from("Fang and Claw+"),
            player_id,
            potency: 400,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                DRACONIAN_FIRE.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![ResourceRequirements::UseBuff(802)],
            resource_created: HashMap::from([(1, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let WHEELING_THRUST_PLUS: AttackSkill = AttackSkill {
            id: 810,
            name: String::from("Wheeling Thrust+"),
            player_id,
            potency: 400,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                DRACONIAN_FIRE.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![ResourceRequirements::UseBuff(802)],
            resource_created: HashMap::from([(1, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let LANCE_CHARGE: AttackSkill = AttackSkill {
            id: 811,
            name: String::from("Lance Charge"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                LANCE_CHARGE_STATUS.clone(),
                20000,
                20000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::NoTarget,
        };
        let HEAVENS_THRUST_SURGE: AttackSkill = AttackSkill {
            id: 812,
            name: String::from("Heaven's Thrust + Surge"),
            player_id,
            potency: 480,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(6),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![ResourceRequirements::UseBuff(LIFE_SURGE.id)],
            resource_created: Default::default(),
            is_guaranteed_crit: true,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let FANG_AND_CLAW_PLUS_SURGE: AttackSkill = AttackSkill {
            id: 813,
            name: String::from("Fang and Claw+ + Surge"),
            player_id,
            potency: 400,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                DRACONIAN_FIRE.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![ResourceRequirements::UseBuff(LIFE_SURGE.id)],
            resource_created: HashMap::from([(1, 1)]),
            is_guaranteed_crit: true,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let WHEELING_THRUST_PLUS_SURGE: AttackSkill = AttackSkill {
            id: 814,
            name: String::from("Wheeling Thrust+ + Surge"),
            player_id,
            potency: 400,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                DRACONIAN_FIRE.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: Some(5),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(LIFE_SURGE.id)],
            resource_created: HashMap::from([(1, 1)]),
            is_guaranteed_crit: true,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let HIGH_JUMP: AttackSkill = AttackSkill {
            id: 815,
            name: String::from("High Jump"),
            player_id,
            potency: 400,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                DIVE_READY.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: Some(10000),
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 30000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let MIRAGE_DIVE: AttackSkill = AttackSkill {
            id: 816,
            name: String::from("Mirage Dive"),
            player_id,
            potency: 200,
            trait_percent: 100,
            additional_skill_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(DIVE_READY.id)],
            resource_created: HashMap::from([(0, 1)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            proc_events: vec![],
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let DRAGON_SIGHT: AttackSkill = AttackSkill {
            id: 817,
            name: String::from("Dragon Sight"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    DRAGON_SIGHT_STATUS.clone(),
                    20000,
                    20000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    partner_player_id,
                    DRAGON_SIGHT_STATUS_PARTNER.clone(),
                    20000,
                    20000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 120000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let SPINESHATTER_DIVE: AttackSkill = AttackSkill {
            id: 818,
            name: String::from("Spineshatter Dive"),
            player_id,
            potency: 250,
            trait_percent: 100,
            additional_skill_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 2,
            stack_skill_id: None,
            proc_events: vec![],
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let DRAGONFIRE_DIVE: AttackSkill = AttackSkill {
            id: 819,
            name: String::from("Dragonfire Dive"),
            player_id,
            potency: 300,
            trait_percent: 100,
            additional_skill_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 120000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            proc_events: vec![],
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let BATTLE_LITANY: AttackSkill = AttackSkill {
            id: 820,
            name: String::from("Battle Litany"),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![ApplyRaidBuff(
                player_id,
                BATTLE_LITANY_STATUS.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 120000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let GEIRSKOGUL: AttackSkill = AttackSkill {
            id: 821,
            name: String::from("Geirskogul"),
            player_id,
            potency: 260,
            trait_percent: 100,
            additional_skill_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 30000,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            proc_events: vec![],
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let GEIRSKOGUL_PLUS: AttackSkill = AttackSkill {
            id: 822,
            name: String::from("Geirskogul+"),
            player_id,
            potency: 260,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                LIFE_OF_THE_DRAGON.clone(),
                30000,
                30000,
                0,
            )],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 30000,
            resource_required: vec![ResourceRequirements::Resource(0, 2)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(GEIRSKOGUL.id),
            proc_events: vec![],
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnPartyMember,
        };
        let NASTROND: AttackSkill = AttackSkill {
            id: 823,
            name: String::from("Nastrond"),
            player_id,
            potency: 360,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 10000,
            resource_required: vec![ResourceRequirements::CheckStatus(LIFE_OF_THE_DRAGON.id)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let STARDIVER: AttackSkill = AttackSkill {
            id: 824,
            name: String::from("Stardiver"),
            player_id,
            potency: 620,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 30000,
            resource_required: vec![ResourceRequirements::CheckStatus(LIFE_OF_THE_DRAGON.id)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };
        let WYRMWIND_THRUST: AttackSkill = AttackSkill {
            id: 825,
            name: String::from("Wyrmwind Thrust"),
            player_id,
            potency: 420,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_millisecond: 20000,
            resource_required: vec![ResourceRequirements::Resource(1, 2)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
            use_type: UseType::UseOnTarget,
        };

        DragoonDatabase {
            life_surge: LIFE_SURGE,
            true_thrust: TRUE_THRUST,
            raiden_thrust: RAIDEN_THRUST,
            vorpal_thrust: VORPAL_THRUST,
            disembowel: DISEMBOWEL,
            heavens_thrust: HEAVENS_THRUST,
            chaotic_spring: CHAOTIC_SPRING,
            fang_and_claw: FANG_AND_CLAW,
            wheeling_thrust: WHEELING_THRUST,
            fang_and_claw_plus: FANG_AND_CLAW_PLUS,
            wheeling_thrust_plus: WHEELING_THRUST_PLUS,
            lance_charge: LANCE_CHARGE,
            heavens_thrust_surge: HEAVENS_THRUST_SURGE,
            fang_and_claw_plus_surge: FANG_AND_CLAW_PLUS_SURGE,
            wheeling_thrust_plus_surge: WHEELING_THRUST_PLUS_SURGE,
            high_jump: HIGH_JUMP,
            mirage_dive: MIRAGE_DIVE,
            dragon_sight: DRAGON_SIGHT,
            spineshatter_dive: SPINESHATTER_DIVE,
            dragonfire_dive: DRAGONFIRE_DIVE,
            battle_litany: BATTLE_LITANY,
            geirskogul: GEIRSKOGUL,
            geirskogul_plus: GEIRSKOGUL_PLUS,
            nastrond: NASTROND,
            stardiver: STARDIVER,
            wyrmwind_thrust: WYRMWIND_THRUST,

            life_surge_buff: LIFE_SURGE_STATUS,
            disembowel_buff: DISEMBOWEL_STATUS,
            lance_mastery: LANCE_MASTERY,
            draconian_fire: DRACONIAN_FIRE,
            lance_charge_buff: LANCE_CHARGE_STATUS,
            dive_ready: DIVE_READY,
            dragon_sight_self_buff: DRAGON_SIGHT_STATUS,
            battle_litany_buff: BATTLE_LITANY_STATUS,
            life_of_the_dragon: LIFE_OF_THE_DRAGON,
            dragon_sight_partner_buff: DRAGON_SIGHT_STATUS_PARTNER,
        }
    }
}

pub(crate) fn make_dragoon_skill_list(
    player_id: IdType,
    partner_player_id: IdType,
) -> SkillTable<AttackSkill> {
    let db = DragoonDatabase::new(player_id, partner_player_id);

    let dragoon_skill_list: Vec<AttackSkill> = vec![
        db.life_surge,
        db.true_thrust,
        db.raiden_thrust,
        db.vorpal_thrust,
        db.disembowel,
        db.heavens_thrust,
        db.chaotic_spring,
        db.fang_and_claw,
        db.wheeling_thrust,
        db.fang_and_claw_plus,
        db.wheeling_thrust_plus,
        db.lance_charge,
        db.heavens_thrust_surge,
        db.fang_and_claw_plus_surge,
        db.wheeling_thrust_plus_surge,
        db.high_jump,
        db.mirage_dive,
        db.dragon_sight,
        db.spineshatter_dive,
        db.dragonfire_dive,
        db.battle_litany,
        db.geirskogul,
        db.geirskogul_plus,
        db.nastrond,
        db.stardiver,
        db.wyrmwind_thrust,
    ];

    make_skill_table(dragoon_skill_list)
}
