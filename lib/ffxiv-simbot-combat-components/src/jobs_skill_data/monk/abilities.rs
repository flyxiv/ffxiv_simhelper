use crate::event::ffxiv_event::FfxivEvent;
use crate::event::ffxiv_event::FfxivEvent::{ApplyBuff, ApplyRaidBuff};
use crate::id_entity::IdEntity;
use crate::jobs_skill_data::PotionSkill;
use crate::rotation::SkillTable;
use crate::skill::attack_skill::AttackSkill;
use crate::skill::make_skill_table;
use crate::skill::use_type::UseType;
use crate::skill::ResourceRequirements::{Resource, UseBuff};
use crate::status::buff_status::BuffStatus;
use crate::status::status_info::StatusInfo;
use crate::types::PlayerIdType;
use std::collections::HashMap;

pub(crate) struct MonkDatabase {
    pub(crate) leaping_opo: AttackSkill,
    pub(crate) rising_raptor: AttackSkill,
    pub(crate) pouncing_coeurl: AttackSkill,
    pub(crate) twin_snakes: AttackSkill,
    pub(crate) demolish: AttackSkill,
    pub(crate) dragon_kick: AttackSkill,
    pub(crate) elixir_burst: AttackSkill,
    pub(crate) rising_pheonix: AttackSkill,
    pub(crate) phantom_rush: AttackSkill,
    pub(crate) brotherhood: AttackSkill,
    pub(crate) riddle_of_fire: AttackSkill,
    pub(crate) riddle_of_wind: AttackSkill,
    pub(crate) perfect_balance: AttackSkill,
    pub(crate) the_forbidden_chakra: AttackSkill,
    pub(crate) perfect_leaping_opo: AttackSkill,
    pub(crate) perfect_rising_raptor: AttackSkill,
    pub(crate) perfect_pouncing_coeurl: AttackSkill,
    pub(crate) perfect_twin_snakes: AttackSkill,
    pub(crate) perfect_demolish: AttackSkill,
    pub(crate) perfect_dragon_kick: AttackSkill,
    pub(crate) winds_reply: AttackSkill,
    pub(crate) fires_reply: AttackSkill,

    pub(crate) riddle_of_fire_buff: BuffStatus,

    pub(crate) potion: AttackSkill,
}

impl MonkDatabase {
    pub(crate) fn new(player_id: PlayerIdType) -> Self {
        let fires_rumination: BuffStatus = BuffStatus {
            id: 902,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            name: "Fire's Rumination".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let perfect_balance_buff: BuffStatus = BuffStatus {
            id: 903,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 20000,
            is_raidwide: true,
            name: "Perfect Balance Status".to_string(),
            stacks: 3,
            max_stacks: 3,
            trigger_proc_event_on_gcd: vec![],
        };
        let riddle_of_fire_buff: BuffStatus = BuffStatus {
            id: 904,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(15)],
            duration_millisecond: 20000,
            is_raidwide: false,
            name: "Riddle of Fire Buff".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let riddle_of_wind_buff: BuffStatus = BuffStatus {
            id: 905,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::SpeedOnlyAutoAttack(50)],
            duration_millisecond: 15000,
            is_raidwide: false,
            name: "Riddle of Wind Buff".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let brotherhood_damage_buff: BuffStatus = BuffStatus {
            id: 906,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(5)],
            duration_millisecond: 20000,
            is_raidwide: true,
            name: "Brotherhood Damage Buff".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let brotherhood_raid_proc: BuffStatus = BuffStatus {
            id: 907,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 20000,
            is_raidwide: true,
            name: "Brotherhood Raid Proc".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![(
                FfxivEvent::IncreasePlayerResource(player_id, 0, 1, 0),
                10,
            )],
        };
        let winds_rumination: BuffStatus = BuffStatus {
            id: 910,
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 15000,
            is_raidwide: false,
            name: "Wind's Rumination".to_string(),
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };

        let leaping_opo = AttackSkill {
            id: 900,
            name: "Leaping Opo".to_string(),
            player_id,
            potency: 460,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(2),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![Resource(6, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: true,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let rising_raptor = AttackSkill {
            id: 901,
            name: "Rising Raptor".to_string(),
            player_id,
            potency: 540,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(3),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![Resource(7, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let pouncing_coeurl = AttackSkill {
            id: 902,
            name: "Pouncing Coeurl".to_string(),
            player_id,
            potency: 520,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![Resource(8, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let twin_snakes = AttackSkill {
            id: 903,
            name: "Twin Snakes".to_string(),
            player_id,
            potency: 420,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(3),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![],
            resource_created: HashMap::from([(7, 2)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let demolish = AttackSkill {
            id: 904,
            name: "Demolish".to_string(),
            player_id,
            potency: 420,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![],
            resource_created: HashMap::from([(8, 2)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let dragon_kick = AttackSkill {
            id: 905,
            name: "Dragon Kick".to_string(),
            player_id,
            potency: 320,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(2),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![],
            resource_created: HashMap::from([(6, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let elixir_burst = AttackSkill {
            id: 906,
            name: "Elixir Field".to_string(),
            player_id,
            potency: 900,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![Resource(1, 3)],
            resource_created: HashMap::from([(4, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let rising_pheonix = AttackSkill {
            id: 907,
            name: "Rising Pheonix".to_string(),
            player_id,
            potency: 900,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![Resource(1, 1), Resource(2, 1), Resource(3, 1)],
            resource_created: HashMap::from([(5, 1), (9, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let phantom_rush = AttackSkill {
            id: 908,
            name: "Phantom Rush".to_string(),
            player_id,
            potency: 1500,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![Resource(4, 1), Resource(5, 1), Resource(1, 3)],
            resource_created: HashMap::from([(9, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let brotherhood = AttackSkill {
            id: 909,
            name: "Brotherhood".to_string(),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![
                ApplyRaidBuff(player_id, brotherhood_damage_buff.clone(), 20000, 20000, 0),
                ApplyRaidBuff(player_id, brotherhood_raid_proc.clone(), 20000, 20000, 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 120000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };
        let riddle_of_fire = AttackSkill {
            id: 910,
            name: "Riddle of Fire".to_string(),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    riddle_of_fire_buff.clone(),
                    20000,
                    20000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    fires_rumination.clone(),
                    30000,
                    30000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 60000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };
        let riddle_of_wind = AttackSkill {
            id: 911,
            name: "Riddle of Wind".to_string(),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    riddle_of_wind_buff.clone(),
                    15000,
                    15000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    winds_rumination.clone(),
                    15000,
                    15000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 90000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };

        let perfect_balance = AttackSkill {
            id: 912,
            name: "Perfect Balance".to_string(),
            player_id,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                perfect_balance_buff.clone(),
                20000,
                20000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            resource_required: vec![],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 40000,
            current_cooldown_millisecond: 0,
            stacks: 2,
            stack_skill_id: None,
            use_type: UseType::NoTarget,
        };

        let the_forbidden_chakra = AttackSkill {
            id: 913,
            name: "The Forbidden Chakra".to_string(),
            player_id,
            potency: 400,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            resource_required: vec![Resource(0, 5)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 1000,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let perfect_leaping_opo = AttackSkill {
            id: 914,
            name: "Leaping Opo".to_string(),
            player_id,
            potency: 460,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![UseBuff(perfect_balance_buff.get_id()), Resource(6, 1)],
            resource_created: HashMap::from([(0, 1), (1, 1)]),
            is_guaranteed_crit: true,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let perfect_rising_raptor = AttackSkill {
            id: 915,
            name: "Rising Raptor".to_string(),
            player_id,
            potency: 540,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![UseBuff(perfect_balance_buff.get_id()), Resource(7, 1)],
            resource_created: HashMap::from([(2, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let perfect_pouncing_coeurl = AttackSkill {
            id: 916,
            name: "Pouncing Coeurl".to_string(),
            player_id,
            potency: 520,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![UseBuff(perfect_balance_buff.id), Resource(8, 1)],
            resource_created: HashMap::from([(3, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let perfect_twin_snakes = AttackSkill {
            id: 917,
            name: "Twin Snakes".to_string(),
            player_id,
            potency: 420,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![UseBuff(perfect_balance_buff.id)],
            resource_created: HashMap::from([(2, 1), (7, 2)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let perfect_demolish = AttackSkill {
            id: 918,
            name: "Demolish".to_string(),
            player_id,
            potency: 420,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![UseBuff(perfect_balance_buff.id)],
            resource_created: HashMap::from([(3, 1), (8, 2)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let perfect_dragon_kick = AttackSkill {
            id: 919,
            name: "Dragon Kick".to_string(),
            player_id,
            potency: 320,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![UseBuff(perfect_balance_buff.id)],
            resource_created: HashMap::from([(1, 1), (6, 1)]),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let winds_reply = AttackSkill {
            id: 920,
            name: "Wind's Reply".to_string(),
            player_id,
            potency: 900,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2000,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![UseBuff(winds_rumination.id)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };
        let fires_reply = AttackSkill {
            id: 921,
            name: "Fire's Reply".to_string(),
            player_id,
            potency: 1200,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2000,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            resource_required: vec![UseBuff(fires_rumination.id), Resource(9, 1)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
            cooldown_millisecond: 0,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            use_type: UseType::UseOnTarget,
        };

        let potion_skill = PotionSkill::new(player_id);

        MonkDatabase {
            leaping_opo,
            rising_raptor,
            pouncing_coeurl,
            rising_pheonix,
            phantom_rush,
            brotherhood,
            riddle_of_fire,
            riddle_of_wind,
            perfect_balance,
            the_forbidden_chakra,
            twin_snakes,
            demolish,
            dragon_kick,
            perfect_twin_snakes,
            perfect_demolish,
            perfect_dragon_kick,
            perfect_leaping_opo,
            perfect_rising_raptor,
            perfect_pouncing_coeurl,
            winds_reply,
            fires_reply,

            riddle_of_fire_buff,

            potion: potion_skill.potion,
            elixir_burst,
        }
    }
}

pub(crate) fn make_monk_skill_list(player_id: PlayerIdType) -> SkillTable<AttackSkill> {
    let db = MonkDatabase::new(player_id);

    let monk_skill_list: Vec<AttackSkill> = vec![
        db.leaping_opo,
        db.rising_raptor,
        db.pouncing_coeurl,
        db.twin_snakes,
        db.demolish,
        db.dragon_kick,
        db.elixir_burst,
        db.rising_pheonix,
        db.phantom_rush,
        db.brotherhood,
        db.riddle_of_fire,
        db.riddle_of_wind,
        db.perfect_balance,
        db.the_forbidden_chakra,
        db.perfect_leaping_opo,
        db.perfect_rising_raptor,
        db.perfect_pouncing_coeurl,
        db.perfect_twin_snakes,
        db.perfect_demolish,
        db.perfect_dragon_kick,
        db.winds_reply,
        db.fires_reply,
        db.potion,
    ];

    make_skill_table(monk_skill_list)
}
