use crate::event::ffxiv_event::FfxivEvent;
use crate::event::ffxiv_event::FfxivEvent::{ApplyBuff, ApplyBuffStack};
use crate::id_entity::IdEntity;
use crate::jobs_skill_data::PotionSkill;
use crate::rotation::SkillTable;
use crate::skill::attack_skill::AttackSkill;
use crate::skill::use_type::UseType;
use crate::skill::ResourceRequirements::{Resource, UseBuff};
use crate::skill::{make_skill_table, ResourceTable};
use crate::status::buff_status::BuffStatus;
use crate::status::debuff_status::DebuffStatus;
use crate::status::status_info::StatusInfo;
use crate::types::{IdType, PlayerIdType};

pub(crate) struct NinjaDatabase {
    pub(crate) zesho_meppo: AttackSkill,
    pub(crate) raiton: AttackSkill,
    pub(crate) raiju: AttackSkill,
    pub(crate) hyosho: AttackSkill,
    pub(crate) suiton: AttackSkill,
    pub(crate) spinning_edge: AttackSkill,
    pub(crate) gust_slash: AttackSkill,
    pub(crate) aeolian_edge: AttackSkill,
    pub(crate) armor_crush: AttackSkill,
    pub(crate) dokumori: AttackSkill,
    pub(crate) kunais_bane: AttackSkill,
    pub(crate) kassatsu: AttackSkill,
    pub(crate) bhavacakra: AttackSkill,
    pub(crate) tenchijin: AttackSkill,
    pub(crate) fuma_tenchijin: AttackSkill,
    pub(crate) raiton_tenchijin: AttackSkill,
    pub(crate) suiton_tenchijin: AttackSkill,
    pub(crate) bunshin: AttackSkill,
    pub(crate) dream: AttackSkill,
    pub(crate) phantom_kamaitachi: AttackSkill,
    pub(crate) meisui: AttackSkill,
    pub(crate) bhavacakra_meisui: AttackSkill,
    pub(crate) bunshin_stack: AttackSkill,
    pub(crate) mudra: AttackSkill,
    pub(crate) tenri_jindo: AttackSkill,
    pub(crate) zesho_meppo_meisui: AttackSkill,

    pub(crate) huton_status: BuffStatus,
    pub(crate) raijuready: BuffStatus,
    pub(crate) suiton_status: BuffStatus,
    pub(crate) dokumori_status: DebuffStatus,
    pub(crate) kunais_bane_status: DebuffStatus,
    pub(crate) kassatsu_status: BuffStatus,
    pub(crate) tenchijin_status: BuffStatus,
    pub(crate) bunshin_status: BuffStatus,
    pub(crate) meisui_status: BuffStatus,
    pub(crate) bunshin_clone_status: BuffStatus,
    pub(crate) tcj_1: BuffStatus,
    pub(crate) tcj_2: BuffStatus,
    pub(crate) tenri_jindo_ready: BuffStatus,
    pub(crate) higi: BuffStatus,

    pub(crate) potion: AttackSkill,
    pub(crate) potion_buff: BuffStatus,
}

impl NinjaDatabase {
    pub(crate) fn new(player_id: PlayerIdType) -> Self {
        let huton_status: BuffStatus = {
            BuffStatus {
                id: 1000,
                name: String::from("Huton"),
                owner_id: player_id,
                duration_left_millisecond: 0,
                status_info: vec![StatusInfo::SpeedPercent(15)],
                duration_millisecond: i32::MAX,
                is_raidwide: false,
                stacks: 1,
                max_stacks: 1,
                trigger_proc_event_on_gcd: vec![],
            }
        };
        let raiju_ready: BuffStatus = BuffStatus {
            id: 1001,
            name: String::from("Raiju Ready"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 3,
            trigger_proc_event_on_gcd: vec![],
        };
        let suiton_status: BuffStatus = BuffStatus {
            id: 1002,
            name: String::from("Suiton"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 20000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let dokumori_status: DebuffStatus = DebuffStatus {
            id: 1003,
            name: String::from("Dokumori"),
            owner_id: player_id,
            potency: None,
            trait_percent: Some(100),
            damage_category: None,
            damage_skill_id: None,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(5)],
            duration_millisecond: 20000,
            is_raidwide: true,
            stacks: 1,
            snapshotted_infos: Default::default(),
            max_stacks: 1,
        };
        let kunais_bane_status: DebuffStatus = DebuffStatus {
            id: 1004,
            name: String::from("Kunai's Bane"),
            owner_id: player_id,
            potency: None,
            trait_percent: Some(100),
            damage_category: None,
            damage_skill_id: None,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::DamagePercent(10)],
            duration_millisecond: 15000,
            is_raidwide: false,
            stacks: 1,
            snapshotted_infos: Default::default(),
            max_stacks: 1,
        };
        let kassatsu_status: BuffStatus = BuffStatus {
            id: 1005,
            name: String::from("Kassatsu"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 15000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let tenchijin_status: BuffStatus = BuffStatus {
            id: 1006,
            name: String::from("Ten Chi Jin"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 6000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let bunshin_status: BuffStatus = BuffStatus {
            id: 1007,
            name: String::from("Bunshin"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 45000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let meisui_status: BuffStatus = BuffStatus {
            id: 1008,
            name: String::from("Meisui"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };

        let tcj_1: BuffStatus = BuffStatus {
            id: 1009,
            name: String::from("Ten Chi Jin-1"),
            owner_id: player_id,
            duration_left_millisecond: 6000,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 6000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let tcj_2: BuffStatus = BuffStatus {
            id: 1010,
            name: String::from("Ten Chi Jin-2"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 6000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let bunshin_clone_status: BuffStatus = BuffStatus {
            id: 1011,
            name: String::from("Bunshin Clone"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 5,
            max_stacks: 5,
            trigger_proc_event_on_gcd: vec![],
        };
        let tenri_jindo_ready: BuffStatus = BuffStatus {
            id: 1012,
            name: String::from("Tenri Jindo Ready"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };
        let higi: BuffStatus = BuffStatus {
            id: 1013,
            name: String::from("Higi"),
            owner_id: player_id,
            duration_left_millisecond: 0,
            status_info: vec![StatusInfo::None],
            duration_millisecond: 30000,
            is_raidwide: false,
            stacks: 1,
            max_stacks: 1,
            trigger_proc_event_on_gcd: vec![],
        };

        let zesho_meppo: AttackSkill = AttackSkill {
            id: 1000,
            name: String::from("Zesho Meppo"),
            player_id,
            use_type: UseType::UseOnTarget,
            potency: 700,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(0, 50), UseBuff(higi.get_id())],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
        };
        let raiton: AttackSkill = AttackSkill {
            id: 1001,
            name: String::from("Raiton"),
            player_id,
            potency: 740,
            use_type: UseType::UseOnTarget,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuffStack(
                player_id,
                player_id,
                raiju_ready.clone(),
                30000,
                true,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1500,
            charging_time_millisecond: 1000,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(1023),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let raiju: AttackSkill = AttackSkill {
            id: 1002,
            name: String::from("Fleeting Raiju"),
            player_id,
            potency: 700,
            use_type: UseType::UseOnTarget,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(1001)],
            resource_created: ResourceTable::from([(0, 5)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
        };
        let hyosho: AttackSkill = AttackSkill {
            id: 1003,
            name: String::from("Hyosho Ranryu"),
            player_id,
            potency: 1300,
            use_type: UseType::UseOnTarget,
            trait_percent: 130,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1500,
            charging_time_millisecond: 1000,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(1005)],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let suiton: AttackSkill = AttackSkill {
            id: 1004,
            name: String::from("Suiton"),
            player_id,
            potency: 580,
            use_type: UseType::UseOnTarget,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                suiton_status.clone(),
                20000,
                20000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1500,
            charging_time_millisecond: 1500,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: Some(1023),
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let spinning_edge: AttackSkill = AttackSkill {
            id: 1005,
            name: String::from("Spinning Edge"),
            player_id,
            potency: 300,
            use_type: UseType::UseOnTarget,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(1),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: ResourceTable::from([(0, 5)]),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
        };
        let gust_slash: AttackSkill = AttackSkill {
            id: 1006,
            name: String::from("Gust Slash"),
            player_id,
            potency: 400,
            use_type: UseType::UseOnTarget,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(2),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: ResourceTable::from([(0, 5)]),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let aeolian_edge: AttackSkill = AttackSkill {
            id: 1007,
            name: String::from("Aeolian Edge"),
            player_id,
            potency: 540,
            use_type: UseType::UseOnTarget,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(1, 1)],
            resource_created: ResourceTable::from([(0, 15)]),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let armor_crush: AttackSkill = AttackSkill {
            id: 1008,
            name: String::from("Armor Crush"),
            player_id,
            potency: 480,
            use_type: UseType::UseOnTarget,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: Some(0),
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: true,
            cooldown_reduced_by_speed: true,
            cooldown_millisecond: 0,
            resource_required: vec![],
            resource_created: ResourceTable::from([(0, 15), (1, 2)]),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let dokumori: AttackSkill = AttackSkill {
            id: 1009,
            name: String::from("Dokumori"),
            player_id,
            potency: 300,
            use_type: UseType::UseOnTarget,
            trait_percent: 100,
            additional_skill_events: vec![
                FfxivEvent::ApplyDebuff(player_id, dokumori_status.clone(), 20000, 20000, 0),
                ApplyBuff(player_id, player_id, higi.clone(), 30000, 30000, 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 120000,
            resource_required: vec![],
            resource_created: ResourceTable::from([(0, 40)]),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let kunais_bane: AttackSkill = AttackSkill {
            id: 1010,
            name: String::from("Kunai's Bane"),
            player_id,
            potency: 400,
            use_type: UseType::UseOnTarget,
            trait_percent: 100,
            additional_skill_events: vec![FfxivEvent::ApplyDebuff(
                player_id,
                kunais_bane_status.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 60000,
            resource_required: vec![UseBuff(1002)],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let kassatsu: AttackSkill = AttackSkill {
            id: 1011,
            name: String::from("Kassatsu"),
            player_id,
            potency: 0,
            use_type: UseType::NoTarget,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                kassatsu_status.clone(),
                15000,
                15000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let bhavacakra: AttackSkill = AttackSkill {
            id: 1012,
            name: String::from("Bhavakacra"),
            player_id,
            potency: 350,
            use_type: UseType::UseOnTarget,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![Resource(0, 50)],
            resource_created: Default::default(),
            is_guaranteed_crit: false,
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_direct_hit: false,
        };
        let tenchijin: AttackSkill = AttackSkill {
            id: 1013,
            name: String::from("Ten Chi Jin"),
            player_id,
            potency: 0,
            use_type: UseType::NoTarget,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                tenchijin_status.clone(),
                6000,
                6000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 120000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let fuma_tenchijin: AttackSkill = AttackSkill {
            id: 1014,
            name: String::from("Fuma Shuriken-TCJ"),
            player_id,
            potency: 500,
            use_type: UseType::UseOnTarget,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                tcj_1.clone(),
                6000,
                6000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1000,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(tenchijin_status.get_id())],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let raiton_tenchijin: AttackSkill = AttackSkill {
            id: 1015,
            name: String::from("Raiton-TCJ"),
            player_id,
            potency: 740,
            use_type: UseType::UseOnTarget,
            trait_percent: 100,
            additional_skill_events: vec![
                ApplyBuff(player_id, player_id, tcj_2.clone(), 6000, 6000, 0),
                ApplyBuffStack(player_id, player_id, raiju_ready.clone(), 30000, true, 0),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1000,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(tcj_1.get_id())],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let suiton_tenchijin: AttackSkill = AttackSkill {
            id: 1016,
            name: String::from("Suiton-TCJ"),
            player_id,
            potency: 580,
            use_type: UseType::UseOnTarget,
            trait_percent: 100,
            additional_skill_events: vec![
                ApplyBuff(player_id, player_id, suiton_status.clone(), 20000, 20000, 0),
                ApplyBuff(
                    player_id,
                    player_id,
                    tenri_jindo_ready.clone(),
                    30000,
                    30000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 1000,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(tcj_2.get_id())],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let bunshin: AttackSkill = AttackSkill {
            id: 1017,
            name: String::from("Bunshin"),
            player_id,
            use_type: UseType::NoTarget,
            potency: 0,
            trait_percent: 100,
            additional_skill_events: vec![
                ApplyBuff(
                    player_id,
                    player_id,
                    bunshin_status.clone(),
                    45000,
                    45000,
                    0,
                ),
                ApplyBuff(
                    player_id,
                    player_id,
                    bunshin_clone_status.clone(),
                    30000,
                    30000,
                    0,
                ),
            ],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 90000,
            resource_required: vec![Resource(0, 50)],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let dream: AttackSkill = AttackSkill {
            id: 1018,
            name: String::from("Dream Within a Dream"),
            player_id,
            potency: 450,
            use_type: UseType::UseOnTarget,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 60000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let phantom_kamaitachi: AttackSkill = AttackSkill {
            id: 1019,
            name: String::from("Phantom Kamaitachi"),
            player_id,
            potency: 600,
            use_type: UseType::UseOnTarget,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 2500,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(1007)],
            resource_created: ResourceTable::from([(0, 10)]),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let meisui: AttackSkill = AttackSkill {
            id: 1020,
            name: String::from("Meisui"),
            player_id,
            potency: 0,
            use_type: UseType::NoTarget,
            trait_percent: 100,
            additional_skill_events: vec![ApplyBuff(
                player_id,
                player_id,
                meisui_status.clone(),
                30000,
                30000,
                0,
            )],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(1002)],
            resource_created: ResourceTable::from([(0, 50)]),
            current_cooldown_millisecond: 120000,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let bhavacakra_meisui: AttackSkill = AttackSkill {
            id: 1021,
            name: String::from("Bhavakacra-Meisui"),
            player_id,
            potency: 530,
            use_type: UseType::UseOnTarget,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 1000,
            resource_required: vec![Resource(0, 50), UseBuff(1008)],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let bunshin_stack: AttackSkill = AttackSkill {
            id: 1022,
            name: String::from("Bunshin-Stack"),
            player_id,
            potency: 150,
            use_type: UseType::UseOnTarget,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(bunshin_clone_status.id)],
            resource_created: ResourceTable::from([(0, 5)]),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let mudra: AttackSkill = AttackSkill {
            id: 1023,
            name: String::from("Mudra"),
            player_id,
            potency: 0,
            use_type: UseType::NoTarget,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 20000,
            resource_required: vec![],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 2,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };
        let tenri_jindo: AttackSkill = AttackSkill {
            id: 1024,
            name: String::from("Tenri Jindo"),
            player_id,
            potency: 1100,
            use_type: UseType::NoTarget,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![UseBuff(tenri_jindo_ready.id)],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };

        let zesho_meppo_meisui: AttackSkill = AttackSkill {
            id: 1025,
            name: String::from("Zesho Meppo"),
            player_id,
            potency: 850,
            use_type: UseType::UseOnTarget,
            trait_percent: 100,
            additional_skill_events: vec![],
            proc_events: vec![],
            combo: None,
            delay_millisecond: None,
            casting_time_millisecond: 0,
            gcd_cooldown_millisecond: 0,
            charging_time_millisecond: 0,
            is_speed_buffed: false,
            cooldown_reduced_by_speed: false,
            cooldown_millisecond: 0,
            resource_required: vec![
                Resource(0, 50),
                UseBuff(higi.get_id()),
                UseBuff(meisui_status.get_id()),
            ],
            resource_created: Default::default(),
            current_cooldown_millisecond: 0,
            stacks: 1,
            stack_skill_id: None,
            is_guaranteed_crit: false,
            is_guaranteed_direct_hit: false,
        };

        let potion_skill = PotionSkill::new(player_id);

        Self {
            zesho_meppo,
            raiton,
            raiju,
            hyosho,
            suiton,
            spinning_edge,
            gust_slash,
            aeolian_edge,
            armor_crush,
            dokumori,
            kunais_bane,
            kassatsu,
            bhavacakra,
            tenchijin,
            fuma_tenchijin,
            raiton_tenchijin,
            suiton_tenchijin,
            bunshin,
            dream,
            phantom_kamaitachi,
            meisui,
            bhavacakra_meisui,
            bunshin_stack,
            mudra,
            tenri_jindo,
            zesho_meppo_meisui,

            huton_status,
            raijuready: raiju_ready,
            suiton_status,
            dokumori_status,
            kunais_bane_status,
            kassatsu_status,
            tenchijin_status,
            bunshin_status,
            meisui_status,
            bunshin_clone_status,

            tcj_1,
            tcj_2,
            tenri_jindo_ready,
            higi,
            potion: potion_skill.potion,
            potion_buff: potion_skill.potion_buff,
        }
    }
}

pub(crate) fn make_ninja_skill_list(player_id: PlayerIdType) -> SkillTable<AttackSkill> {
    let db = NinjaDatabase::new(player_id);

    let ninja_skill_list: Vec<AttackSkill> = vec![
        db.zesho_meppo,
        db.raiton,
        db.raiju,
        db.hyosho,
        db.suiton,
        db.spinning_edge,
        db.gust_slash,
        db.aeolian_edge,
        db.armor_crush,
        db.dokumori,
        db.kunais_bane,
        db.kassatsu,
        db.bhavacakra,
        db.tenchijin,
        db.fuma_tenchijin,
        db.raiton_tenchijin,
        db.suiton_tenchijin,
        db.bunshin,
        db.dream,
        db.phantom_kamaitachi,
        db.meisui,
        db.bhavacakra_meisui,
        db.bunshin_stack,
        db.mudra,
        db.tenri_jindo,
        db.zesho_meppo_meisui,
        db.potion,
    ];

    make_skill_table(ninja_skill_list)
}

#[inline]
pub(crate) fn bunshin_trigger_gcd_ids() -> Vec<IdType> {
    let db = NinjaDatabase::new(0);

    vec![
        db.aeolian_edge.id,
        db.gust_slash.id,
        db.spinning_edge.id,
        db.armor_crush.id,
        db.raiju.id,
    ]
}

#[inline]
pub fn bunshin_clone_id() -> IdType {
    let db = NinjaDatabase::new(0);

    db.bunshin_stack.id
}

#[inline]
pub(crate) fn bunshin_stack_id() -> IdType {
    let db = NinjaDatabase::new(0);
    db.bunshin_clone_status.id
}

pub(crate) fn get_huton_status(player_id: PlayerIdType) -> BuffStatus {
    let db = NinjaDatabase::new(0);
    let mut huton = db.huton_status.clone();
    huton.owner_id = player_id;
    huton.duration_left_millisecond = i32::MAX;

    huton
}
